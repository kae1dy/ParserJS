Is this order guaranteed, ie ls-refs before fetch?
Why NON-NLS?
you're returning null, probably better return an enum, or maybe return Request.class.
Should use nextTag() and switch-case instead.
Maybe consider to change the check to check that raw is not null.
Could you please refactor the above to _protected_ instead of publicly?
check for queue size <= 0
check for null, we don't need to check
This is not the exception expected. It should be asserting that the exception is thrown.
Please use System.out.println() instead of System.out.println()
nit: this should be final
I don't think this is useful.
can you use forEach or instead of stream?
This is File copy error not file system retry case.
I think you're right. If the connectTimeout are un-ordered with a read it this would forceNext => the index read. If so you would like to avoid having to forceNext() here.
This is shared for all segments in newSegment. Maybe we can move this logic to a method
This should check to make sure notificationUUID is not null before attempting to delete it.
public methods should be private.
style nit: we don't use braces around single line blocks
Seems like there's a spacing issue here, two spaces instead of 4.
It is better to log the data too, and give the user a hint what they are doing to log the database and the actual database details.
I think I'd call that in the general purpose field. The goalResource is a rather general class.
should this be initialized in the constructor?
I'd rather use MavenProjectHolder.
Is this necessary?
this.redisTemplate
Is there a reason we can't just remove "configurationListener").start()". Its the "listenerListener" method to do that now
This is not needed, we have removed this printouts at all, or changing it to something like this.
I think it would be better to create a Resources and store it in an immutable list. This way we can avoid the non-static data being used for every request.
Externalize
You have a type of 'aType' in the beginning of the class, so if you want to move the code that sets it to the default type, you can reuse the one in placeOnTop. Thus you can remove the if-else with the if-else with the following if-else statement.
Please use Iterators.all() to insert the head of the queue.
This is not a related change... if you can move it to a separate patchset. Also, as per discussion, I think that rather than cutting the mark functionality in the middle here, we should zero it out in the config and leave the logic. If we really want to do this then we ought to remove the logic wholesale (which I'm reluctant to do). For now, maybe let's just set it to 0 in the config?
Could use a stored in the SQL, for better performance.
Please change the usage of ByteBuffer.allocate to save the very large bytes in the buffer.
According to which rules do we throw here, if there is an error here it should be logged and not an error.
Possible copy/paste bug in the order by clause.
This method should return date. SimpleDateFormat might not use our own class, right?
Hash code
Why is this assertion "model.getValue()"?
can you put the logic for the query string
Maybe it's better to name the cookie in the message to enable authentication, but it should also be set to that.
fail
Would it make sense to return a Publisher<Integer>?
This should use a StringReader instead of a ByteArrayInputStream.
Should there be a null check?
I think you want to require the content type here instead of the property. It is not a resource leak.
sleep?
WDYT about changing count to count as well? We could also directly change the message to something like "Hashed count must be in range %s. range %s"
This should probably be a RuntimeException instead of catching NPEs.
This seems too complicated to me. We should simply have: root.hasChild(subsystem) && root.getChild(subsystem).hasChild(address); instead
let's return a better name than sessionInUse
This looks wrong. Can't you just check whether the selectedMonitorId is null or not and return false?
discussed and decided to let it lie
@Serranya The same here. See above.
Is this the only place where we use the timestamp timer?
Shouldn't we use a method on the journalDoi name here?
consider checking the char content, as its much easier to read, if it was also expected, you could call this method and also test the case that the border is already known to the expected value.
Style-nit: Maybe put this in the GerritService class and get rid of the constructor.
If we have this method public, we can replace only the cache keys, even if they are public.
please inject a static method rather than using this class.
We should omit the colon in the next line.
I'd check if the network was selected before adding it (which is not a new HashSet nor a label).
Use logging instead of printStackTrace()
I bet this one, but new String[] { "at3", "oma", "aa3", "at9", "aa3", "at9", "aa3", "at9", "aa3", "at9", }; looks better to me.
SetSpecialDays should be tested on an E-meter DEVICE_IDENTIFICATION_G_LABEL -> DEVICE_IDENTIFICATION_E_LABEL getDeviceIdG -> getDeviceIdE
Is it possible to distinguish between tuple and tuple?
I think this is a bad error message. The message is in the context of a WDL file, not the stack trace.
What's the purpose of this query?
Add the check for setName(FilterLevel.class) and call that instead.
Could you change all() to return Collections.unmodifiableList(dataTypes.values())?
This does not seem right. We could just refer to the existing partition (i.e. this is the case, but that's why I would drop it).
Is this assumption correct? For example, we have 3 queries, and one query is marked with the broker name, and the other one is marked with the CQL statement? I think we should also verify that the CQL statement is the one we want to support.
should be protected.
"You do not have any buckets" or use a different default charset.
mapper[ --> signature]
NaN seems like a different value.
Consider using the blobName instead of the hard-coded string here.
Would the new Path, FIles API be easier to use than the old File API?
getUserIdIfExternal()?
What does this mean? Should we expose DatabaseName to the read / write lock?
Don't we need this?
Is it OK to change content to int?
This is too early: if thread 1 does this check is de-scheduled before line 238, thread 2 could run the entire stop() method and then thread 1 would create the spliterator even though shutdown() is true.
@Christopher-Chianelli I think it is easier to read than WFieldLayout.add(messages);
here too, should be this.LibraryAliasGenerator(
This should return an immutable collection.
wouldn't it be better to have a class (JobServicesClient) constructor in the JobService?
suggestion try (InputStream in = new FileInputStream(source)) {
Should this method be private?
suggestion if ((upload == null &&...).upload()) {... } return upload;
You can use java.util.concurrent.atomic.AtomicLongJob#observeOn.
Again, "Removes all", or "Removes all", like the implementation of FeedService.
this System.out.println should be removed.
Why do you use the String version of createAllFromJson(Class), which is the same in every call to createAllFromJson(Class), which is a pretty simple addition.
I think this should be WARN or even INFO.
Why do we have this constructor public?
No need to use else here.
Consider using parameterized logging instead of string concatenation.
should be more specific, like "java.version"
Shouldn't this rather be synchronized?
We need to start with "private" in case of a non-static method.
This line is not necessary.
("Error during type conversion from type: java.lang.ArithmeticException: long overflow")
should this be true?
I think we have a bug in get method signature and signature, like "this". Maybe we should add an entry in the method name?
remove unnecessary blank line
As this is a tady hack, I would prefer something like: java @Override public void setPluginName(String name) { if (name.isEmpty()) { this.pluginName = name; } } @Override public void setPluginName(String name) { this.pluginName = name; }
This test will always evaluate to true or false if there is no method with the same name. I think it's safer to test that there is only one test param if multi method was created with a different name than the other one.
@vilchik-elena Why remove this line?
Java 8 is allowed to return a Duration, which is less than MILLIS_PER_DAY
Should we assert that the value is not enabled before hitting the table?
It's useful to keep a binary type when SqlSocket.binaryType is not null, and it will throw a NPE if binaryType is not of type BinaryType.
Better to construct a ProtoType?
How about adding a log statement here?
this is going to be breaking in the case of an Integer that has nothing to do with the annotation_
CompletionException should be thrown from supplyAsync
isEmpty() should be checked for null and return empty if it is empty
Can you confirm that [System.out.println](<LINK_0> is what we want?
Not sure whether worth doing, but since the only usage is "DownloadImageManager" (that is in the same package), it is possible to remove "public".
Style Nit: remove this.
Or have some more reactive type cast?
suggestion private static String formatFileName(String filename, String count) {
I'm not sure what this method is trying to be. How about making isGenerative() private and public boolean isGenerative() { return methodType.equals("GEN"); }
As mentioned above, do we need to change this method?
setup should be using an ImmutableMap, same in previous impl
Should probably be StringUtils.defaultString()
Another log statement might be better here since the second argument is a warn and not an Exception. Also, the log message would be a little more descriptive, e.g. if (vendor.containsKey(url) && StringUtils.equalsIgnoreCase( PaymentWorksConstants.SUPPLIER_UPLOAD_DELETE_INDICATOR, a better error message would be: "Only vendor via the supplier deletion"
Is it necessary to use this feature? What is the reason we want this?
Instead of throwing a RuntimeException, why not have the method throw Throwable?
Float.BYTES
This null check is not needed
any clue on how this number was chosen? Is it an absolute or relative value?
Can this be called from the onPermissionGranted() instead?
What is the reason of removing this. instead?
You could make this method :private and use a static method in the base class.
would it be sufficient to print the height of the parent?
it seems like this check can be removed as well.
warn instead?
I think the restart after the class is run should be restored before the test run (after the restart).
Can we add a null check here?
I don't understand this change. it says "Create any new ByteBufInputStream(data);". But you are checking the cache. I think you should be able to do an initial copy of the data to a previously new ByteBufInputStream(data) and pass in null.
This can be package private, no?
Let's rename "ignore" to "ignired" Please use fail(): <LINK_0>
Not necessary.
it seems that this method is no longer used anymore, so we can probably move it after if (holder instanceof ReadingListPageItemHolder) {... } else {... }
To be safe, should not check isEmpty() first, since trigger.getTriggerConfigURL() is not null and triggersConfigURL is not null.
Useless extra parenthesis
This function should be added below the [try {... } finally { js.executeScript("arguments[0].style.display = 'none'", groupReceiverListUploadBox); }
Consider to use a builder for this.allowedSchemes.add(new String())
This shouldn't be the responsibility of invoking the decoder, while the user should be using the config, and can wait to do 3.0. So the user can call the decoder from the ConfigurationAdmin.
log.debug("add new Identity Provider event received");
also check this
Assert.notNull(persistTo, "ReplicateTo must not be null.");
we should consider to add a null check here too
Why are you catching and ignoring? Isn't this the same as that on line 79?
Not needed anymore as this is done in line 111
final?
You can use Objects.hashCode(cachedHash, other.hashCode()) to ensure the same object is always stored
:skull:
This should be a setRetainInstance(true) after we do the onSuccess callback.
You need to increment the successCounter before getErrorCounter().increment()
Minor: can we inject this in the constructor instead of having a static factory method?
Any reason not to use the function call instead of this? That would make it more readable.
Let's use ImmutableList.Builder<HiveSplit> splits = ImmutableList.builder();
submit?
I would put this log line inside the while condition
This seems to be changing the position of the file. what about 'UTF-8" @Override public void sendError(HttpServletResponse response) { if (!response.hasHttp("UTF")) { return; } }
please add new HelpTag and HashName (as in StorageListModel)
suggestion processInstanceIds.stream().filter(processInstanceId ->!hasParentProcessInProcessInstanceList(null, processInstanceId, processInstanceIds)).forEach(processInstanceId -> abortProcessInstance(processInstanceId));
This should check to make sure that notificationUUID is not null before attempting to get a valid notification.
requireNonNullElse is better
I think you can use the previous method to compute the weight of the timer: return getOptionAsInteger(options, BATCH_SIE_OPT, DEFAULT_BATCH_SIE_OPT, DEFAULT_BATCH_SIE);
Per IRL, I meant to say uploadApiCounting, because the API seems to be too big.
I'm not sure this is good. Cosmetic: Could you please make this a method (like appendDependencies())?
suggestion return supplier.get();
don't catch exceptions in every method call. Should be there a null check and we can put the.getWordUpdateEndpoint() into the try-catch so we can log the exception -- we can catch them also as well.
for(String buffer : brRef.readLine()) {
can this be removed?
Same test case for existing.
ImmutableSet.of() makes the type safe, and the previous implementation would be better.
This is a bit different from the line above, should we remove the high water-mark handling code that takes a long?
putIfAbsent returns a view of the value of the value corresponding to the ConcurrentHashMap, which is not the case.
Why not just do the inverse of the two lines above this? java Conditions.checkNotNull(attributeType, "attributeType");
This should throw an IllegalArgumentException if the attribute is null.
Change the text to "Remove is not supported"
Please put these in variables and return they (let's say you've changed the return type to Version_Field_Size_In_Bytes).
Collections.emptyMap() will do the same thing as you did below.
Why? Is it better to use getActiveHost()?
rename to image
Shouldn't the conditional be at the end of the if block?
This also should use TIME_FORMAT instead of "HH:mm:ss"
PullRequestSCMRevision should be changed to new PullRequestSCMRevision( prMerge, "8f1314fc3c828531212473c11828531212473c118285312-2dec-labels_valid(), this should also be updated
Why sync?
The constructor can be package private.
return INSTANCE_SIE;
No need to use URI.create
No need to make changes in this review.
I would not call the leaderListener outside the lock since it is already checked and then the leader listener will handle the error.
nit: This exception message is not needed
I'm not sure it is a good idea to add this field, since the user will have permissions to the storage domain, and if it is, then they should be able to remove the vm.
Do we need to check if refreshJob is null here?
Should be isBlank()
Why do you need to reset mActiveNetwork to null check? ConnectivityManager should be always null.
This is why I missed,  aspects.size()
Is this really needed? If this is the case insensitive command, then the implementation of IRemoteCommandShellService is not available.
Nit: Wouldn't it be better to just call this last statement in the test?
Couldn't you get the same result by returning the same future?
Could you please constants this? (or is it used in a lot of places)
With setPartitionKey, partitionKey and partitionKey are the options that are passed to upsertItemInternal. If we do not have to pass PartitionKey.None then we should pass in the options here.
better to use constant java.util.List<AnalysisResult> s = scheduleBuildAndAssertStatusForBothTools(project, s.txt); assertThat(s).hasErrorMessages();
200 -> 10000000. Is there a reason to use _assertEquals_ rather than _assertEquals_?
Because there is only one argument, we can pass workerMetrics instead of an object array.
We must be careful here, because Exception is not in the map for a null value. Suggestion: Should we create a custom exception type Exception for us and use them in the log message?
Missed port value.
Are you sure to use 000Diul?
s/i/i/
You can use directly return anyMatch(event -> event == ignoreKeyEvent)
Is there a reason to make this public?
Use the existing method <LINK_0> for removing the type parameter.
please set the ApplicationMode when done in the update() method.
@fanifieiev the same above.
Missing test for e.email.equals(email).
This should probably be "protected" or "protected".
if it's a weird state, it sounds like it has a useful method is something else.
Can we keep this nullable?
execPath = null?
Don't wrap any of these things in the instance variables, just return Collections.unmodifiableList(actions);.
@bgeVam why do we need to test this? I think the test should pass if the visit is null
I would not have to published the exception in the line above. It is verbose, but I'm not sure if the message should be logged in the Status while its not.
You should call next() too, to avoid doing this.
Duplicate in both createSubject and createSubject methods. Consider to refactoring into helper method.
Shouldn't this be a field so we don't have to create one each time
On START_DATE, the discount factor for start date should be 1.
The process can be applied on the same line.
These 3 lines should be "get("q")
minor suggestion: It is perhaps simpler to set a local variable for storing the exception value. Inspect its value in finally clause and then, take action.
Why not use STREAM_WORK_MANAGER_STORESTATE_ENABLED_DEFAULT?
What's the reasoning behind this vs. setting the limit of the session to zero?
Would be awesome to rename it to something more descriptive like "searchDiscussionsPost" or similar
getUsage(...) expects a localization key.
If we don't want to implement it, it is better to call @Override public void setup(OperatorContext context) {... }
Why do we need this?
This check is redundant in the instanceof and hasAndGet. Not sure why it's better than the check?
Same here - you can remove the local variable and change the return type to List<String>.
Type s.o.
This DateTime.now() can be made private
Similar to the one above, it would be good to log the error and continue here in case the exception is thrown.
Can be transformed into an if statement. I don't think we need this code.
L4-java already provides a proper class.
Maybe change this to  logging.debug?
Check for value == null, since startsWith() returns "mvel:" for mvel:.
I think isConnected() would be appropriate here since you're saying "active" network connection. If we allowed the "connecting" state then we would need a BroadcastReceiver to delay the (re-)try until the network connection has been established.
else not necessary...
Needs to be in finally - we might get interrupted.
Should you put this in the try block?
It is sufficient to declare this class as final.
Why not add this method to PageFragment?
Better to use constant for empty strings
We are checking if the color is null in all cases, better to use ContextUtil.getThemedColor() instead of in here.
This state should be off front of the constructor.
We should add: java assertFullMapping(properties, expected); FileBasedAccessControlConfig expected = new FileBasedAccessControlConfig().setConfigFile("/test.json").setRefreshPeriod(Duration.valueOf("1s")); assertFullMapping(properties, expected);
ah, yeah I'm not sure about this. It's very uncommon to do it on FINE. But I have to request an instance of EmptyMessageInterceptor that we may be able to request it.
Better to wrap other RuntimeExceptions with NuxeoException.
Use this.key
Why increment at the end instead of re-rejecting message?
RealmCacheType.values()?
rename to container
Won't this cause the entire stack trace to be printed on *nix?
Do we actually call init multiple times on a trace or is it a safe-guard? Just curious.
If this is the refresh period, it would be good to log it somewhere, rather than just the IOException.
Can we change this to: return accessToken.getPlainText();
This line is not needed. There is a default constructor already.
Let's use the more descriptive table name than call applicationForKey and applicationForKey
This should throw only if a file or file name is not found. Should throw from this method.
Should be final
obsolete?
I also think we should use the DuplicateKeyException here. For example, there are several issues with this code: - DuplicateKeyException is written as user code - DuplicateKeyException is written as a new DuplicateKeyException("message") in the exception you have to add the message. Will be much easier to diagnose the problem. For example, we don't need to use the DuplicateKeyException to do this.
If this is a debugging output, should we throw a some kind of exception?
Do we have a test for this? Breaking it up to uberfire.
nit: we can probably write this method straight as: return availableRanges.left.stream().map(x -> range.contains(token)).collect(Collectors.joining(token));
return.block() here, since the method is in the wrong place, and the call to the async client can still be blocking.
Should this be a constant?
Instead of comparing and hashCode, use Objects.hashCode(logEntry) instead.
nit: this could be removed if we make this method throws an exception.
super.testEncryption() can be removed.
could be "message":
invert the condition
done in setup method
Likewise.
return task!= null? task.getSchedule() : null;
@ksono Can you use WizardActionFactory.createAction(seleniumWebDriver) to simplify this method?
looks like a similar logic, it is not obvious to me what hasIgnoredModifiers is about. Can't we combine them into one?
Maybe add an assert to verify this message what the issue was with the message?
don't know if that should be null
The validations for the version >= Replica_Metadata_Request_Version_V1 || version < Replica_Metadata_Request_Version_V2) implies that the validation fails, this is simply not failing.
Does this need to be a public static String.format?
this will be executed in the end of the operations, i.e., the index is not the one you want to set in the end. What does it mean to be an infinite loop?
if you just want to be consistent with attachable, why not just use Objects.equal()?
why not use the field directly? In fact, perhaps checking fSSAssigned instead would be clearer.
The error message is a bit misleading. It's not actually a tweet through message, it may be worth including it in a plugin.
This is OK to kill the sender not the one before throwing an exception.
Lets make this private and deprecate it.
this log message is not accurate.
Could remove these lines, the authorizationHandler.setProperties(properties) call is already executed in the constructor
try with resources.
This should be done in the constructor, before we start using this(null), and then we can assert that the parameter is not null.
This is usually bad practice. Using a constant here is cleaner, since it is a matter of personal taste.
:exclamation: This is an "ancestor" method. It's not clear what we are doing here, just one segment is the immediate containing node.
Is this really needed? Since this is already being called by the @Before method I don't think any of the code is needed.
Do you want to put the 2 in a constant in startGridsMultiThreaded 3?
@NronSource.isRewardedVideoAvailable() should be invoked on a separate thread.
Why are you removing the test directory server after stopping the test?
I would add an assertion to see if the result is getting out of scope.
Note that areDuplicatesAllowed() is private in the original test class, so it can be moved to the @BeforeTest class.
Let's make this private. I understand that it's only used from the class, but it's private.
same consideration as before
> "value", "noSelection" [](start = 30, length = 16) can this be renamed to "value", "noSelection")?
I am not sure if we want to change this string. If not, I would use the view identifier only if it is temporary.
If we do this line, we can erase the type.
Will this method need to be public?
@maria-farooq instead of hardcoding number, just -1
Instead of a hack like this, maybe we need (or have) an "updatePersistentParameters()" method somewhere that could be called to set the Data in the constructor, and then set it to 0 in updatePersistentParameters()?
Check if the URI is null here.
Why public?
Missing the part of shuffling...
This is wrong. 1. /src/test/classes/test-repo-git 2. /tmp/TestRepos/,TestRepo 4. /tmp/presto-test-repo-git/Test-repo-git/Test-build/ fails With empty directory in the target directory, it should fail in /tmp/presto-test-classes/test-repo-git/Test-getResulteTest-resources. 2. /tmp/presto-test-classes/test-repo-git/Test-getResulteTest-resources.
This is a bit confusing. :D (if we are actually using the roundtr of the array to make it more clear)
:regionInfo.getRegionName will throw a NPE if the regionInfo is null. I think you want to check for null and throw in the #handleException method.
given/ execute/ assert
Are you sure this is the correct approach? Will this file get written to the same as the SMT?
You might want to consider data_PREFIX and data_PREFIX in EphemeralType.DATA_PREFIX to make it clear that you do the same thing.
Could pass in the factory to avoid creating the SimpleLexiMetadataSerdeFactory.
can you move it into ConfigurableApplicationContext.run()
should be SIE_OF_LONG * 2
This should be run on one line.
Just a nitpick: the null check is unnecessary, since the next line called if project!= null.
This can be simplified as: if (poolSize == 0) { return 1; } return 1;
nit: suggestion return StringUtils.hsIdToString(m_truncationHandle);
This should be simplified to just: this.durableNonTxMode = durableNonTxMode;
'this.' please change
Should be final
I'm not sure whether this should be mutedTopics.contains(message.getStream().getId() + message.getSubject()) or even just mutedTopics.contains(message.getStream().getId() + message.getSubject()). Looks like we're not checking whether the queue is Mute.
I find it more readable to use noneMatch instead of!contains.
instanceof Dataset is redundant
need to return abfsStore here
Please use toLowerCase() in all cases, even if you don't want to change the value of toLowerCase()
Could you use the Logger, and have a message in the exception?
check if the newTimeIn is positive?
Should be package private, so only the tests can use it directly.
typo
Should you use return this;? DIFF is not an unused method, so it doesn't really matter.
Should we use org.apache.kafka.common.utils.Utils.closeQuietly?
Do we still need this.
i think this should be simplier
rename to sash
I think this may be an error if the user doesn't have the app version. We should also report that the update log at the time of sending the app.
We should probably log this error.
minor - pull the instance out of the if block so that it doesn't get called multiple times.
unnervous you can use fail("Exception expected")
This doesn't have to be public
This message is misleading, it should say "Only --list option is currently supported"
DTOs should represent what came from stripTrailingeros().containsHelper().
You may also want a test case for a search value that is non-blank but invalid.
Let's see what happens when this file cannot be written to disk. Do we need to check anything here?
Could you add a check for dex dex == 0 && dex == dex.length and remove the dex parameter?
Maybe you should add a @BeforeMethod to the DB instance as well, since the test should be executed in the @AfterClass method.
don't catch Exception, the calling code will catch it and the exception if the exception is thrown but the calling code will handle it.
redundant this.sense-processed
In my testing on Linux I see another SWT.Selection between MouseDown and MouseUp. Maybe we can also do something like: notify(SWT.MouseDown, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, SWT.MouseUp, Selection.createMouseEvent(p.x, p.y, 1, SWT.BUTTON1, 1)); I didn't test the behavior when I tested it.
Magic number - please fix this.
We don't need to cast here. Just let the method propagate the exception.
Since you are using System.getProperty it should be enough to remove it.
Same here, you need to restore the server configuration.
This is a really good place to clean up the configuration. I tested without any new tests, and it seems to me that this method is not used.
Prefer assertThat(installSource).containsString(...) as per testing.
I think Long.SECONDS.toMillis(mock.awaitTermination()) is more readable to use.
An fail() without any message is not thrown.
How about catch ( FSDataInputStream in = fs.open(filePath); try { return in; } catch (IOException e) { throw new RuntimeException(ex); } } catch (IOException ex) { throw new RuntimeException(ex); }
We do not need to call get() method here.
[minor] You should call this asMessageAttribute(ChangeMessage) to avoid unnecessary object creation.
Can't we pass this to the constructor?
newIEWithSamplingEnabled()
Did you want to limit the SDK to be something more than 20?
My suggestion to test the error message in case the test fails.
add curly braces
@Override?
What does this change actually do? It seems like it's _STOPPING_? Can we just increment stoppedCounter.incrementAndGet() here and return STOPPED_?
@manstis I think you should replace the _isNewChildReference_ in the if to avoid the else here.
I think this code rather than the above, since it's the same as the one above. I think this may be a good idea to consider replacing isNotBlank by a isNotBlank.
I would prefer other methods to be private.
Is this still needed?
rename to contribution
An alternative constructor should be private.
Could we have a function with Presto return SQL? That way we can find one in the java file.
boolean?
I think it is wrong, but you should test for /a/foo/bar. Can you please make sure it works with file /a/foo/bar.xml?
It seems that this line is duplicate of line 89, which is at the moment the site is not updated. Please could we move it out of the if (getSelectedSite()!= null) statement?
I think we should give the limit of the two to be more generic. What do you think?
Should this be setNeedsPrivateSection(false)?
Unnecessary final
the logging might be too simplistic a condition i.e it should be based on process_id
You may also move list to CollectionDataViewImpl
Can be private static final.
This method should be in a sync method so that the top index is in the UI thread.
@tmarzeion you shouldn't need this change
suggestion view.submit(versionRecordManager.getCurrentPath());
return Boolean.TRUE.toString(System.getProperty(C_OS_PROP_PLU_PROPERTY, Boolean.FALSE.toString()) );
This should check the environment variable before returning true.
should we set this to the default value instead of the java.util.Objects?
give a final Request that would make sense (maybe it's not only a private method)
I think this sub-stream is needed some times before it's been done
not sure why we're doing this, but I think it would be better to abstract the common behaviour of the subclass using reflection. rather than exposing two different implementations.
@Before when can creation be avoided?
@ abstract
final
The EDGE.equals() doesn't make sense here.
So we just set the value to 0 for spill to disk, we should still hit this condition.
For this exception, the response entity is not populated, so there is no need to check for null.
Do you need the builder on construction?
Could you please make this private?
Is it a good idea to have an inner class for the DataTable() methods?
Should this be Mono?
could return logs.get(type)
this constructor should be private
There is an assertException thrown here.
can you replace this with return rsi!= null? rsi.getStatus() : null;
Can be removed
Why is this needed?
What is this better than adding mWorkDatabase.beginTransaction() inside the try block?
Can we replace the *.PATH by * and let it be replacing /?
I think we can use try-with-resources here
Why is this necessary? If it is not, it is fine to not reuse the passed in value.
Why can't this be extracted to a method?
Don't abbreviate variable names.
Why is this method needed? If it is private, it should be an API.
Minor thing, can we add a more descriptive name?
I'm not claiming to be a spectacular speller, but it's going to be a spectacularly if you're going to break this line, it would be better to just add a line break in this line, it's easier to read reading
is this method used?
We are now closing this writer in the finally block. Is it ok to remove?
Please add an overload for String join(String, String) as well.
We should pull this out into a setup method and call it here. The assumeTrue(NativeCodeLoader.buildSupportsOpenssl()); should be moved there.
name could be more descriptive
Please log the actual url/url here.
This is not needed.
The public constructor should call the other one.
clazz!= null check can be removed
Minor: maybe just move the depth++ to the end of the previous line?
Why does the numbers have a meaningful name for the constant?
This method is too complicated. How about we just use the enum and check if it's not a RuntimeException?
Added because?
The output of this catch statement may be a bit too wide, but the function can't be called directly. Something like this: java } catch (InterruptedException | ExecutionException ex) {
Won't this be a performance suicide given how the matcher was already implemented? Please check for some description only, which might go wrong during web travis.
Please say this is not mandatory but it would be nice to make a ForbiddenAttributeIncompatibility<SchemaIncompatibility>.
Check if s is null.
backup = null?
You should use the more specific return value than the method declaration.
The add method loops through its input stream, and we are calling it in a loop over the collisions. So we have a quadratic algorithm here. How likely is that to be a problem?
What is the purpose of 1000 here?
Maybe we could use a permanent error message here: return permanent*.add(type);
This would create a function for each of the databases. instead of setting it to a list.
We could consider using e.getMessage() here instead of e.getMessage(). This would also allow the IOException.
duplicate line.
Instead of running this as a benchmark, it seems like we should change the default to to : ) and check if the column is in quality_gates WHERE name = '" + qualityGateName + "'"
If the class name only has a single toString() method, you could just do this: return "TtyDev [portName=" + this.portName + ", interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.interfaceNumber + ", this.interfaceNumber=" + this.
As I know this is a test, but I think there is no need to create an DTCellValue52, it is the same as DTCellValue52.
Please remove this
s/test ok/test
I think this should be return an unknown value.
If there is a problem with the apiUri it needs to be fixed and this should be removed.
make sure that the throws is never thrown.
Catch Exception.
Is it necessary to have nested try-catch scopes? Can we make it simpler?
This needs to be the last line of this test.
I think that the code you're writing here is pretty ugly. Does this list have to be public?
suggestion return String.format( "logical %s for execution vertex (id %s) from the physical %s", logicalSlotRequestId, executionVertexId, physicalSlotRequestId));
style nit: no braces around single line block
I'd probably prefer accessibilityBlockOffset + Accessibility instead of xAccessibility and then a default Accessibility instead of a Accessibility.
nit: I'd prefer to see more expressive timestamp than the 100 being set, ie: when(timestampService.getFreshTimestamps(10)).thenReturn(range); and also verify that the correct timestamp is being set (both increasing the minimum and relative timestamp)
The participant should still be deleted here.
I think we need to clear the message by sendKeys(String, String) here.
unmodifiableList?
suggestion return fs.getUsableSpace(path);
Did you intentionally ignore the patientProgram parameter?
It would be good to return a copy of the list. Also, the return value is not used.
log() and return here to avoid nesting?
Why do we need to return null here?
Again, a small bug here.
Did you mean to remove this?
I think this field names need be prefixed with  and
This makes more sense: (Boolean) setGlowing(glow)!= null; if (ReflectionUtils.hasMethod(e.getClass(), "setGlowing", glow)) { e.setGlowing(glow); } else { e.setGlowing(glow); }
Value could probably be extracted as a constant. (I could also argue that getting the int value could be a constant, but I sense that there is probably some coding standards)
I think this is the same as the one in FormLoadingUtils.xml
Do we really need to worry about this? What if getSessions() returns null?
@NotNull instead of @NotNull.
I think this can be improved. The name of the file should be convertToV232)
Maybe add some Preconditions.checkArgument checks here to verify that the font was not already present.
You could just use a lambda here expression, as the predicate is statically imported.
You may find many examples in the existing code base.
The only problem with this approach is that Nested views may appear as a search result even if there is TopLevel view with such small group. And as a user I would expect the view to be actually ready to be implemented, not by yourself but maybe it worth to check all TopLevel views first. I would also vote for making a parameterizable method View getViews() which will be used when making a view.
this error message is not accurate, as in the method above, this parameter is not "java.io.IOException".
What is the default value?
Move this validation to PluginProperties.
Can you please add params.succeedsEvent(AbstractTransactionTransaction) to the method name?
this method must be private
change to returnStatus!= VdcBllErrors.Done()
This method is being used multiple times. Consider calling it once in the constructor instead.
nit: we can remove the else here as we return null.
I don't think you need to synchronize on this.
Please put back the parentheses around (like for _this_).
- ImageData for current image needs to be updated in the else case.
same again: do not create a new empty exception but reuse the old one.
Now this will not work with the default no-arg constructor. Is this the default behavior?
Style-nit: We don't put braces around single line blocks
I think it was good to change the order of parameters of this method by having a string for expected columns.
there is a assertNoOrder fixture?
You can use  bitwise operators here.
You should change this to not use labels, also the text of the label, and the text of the text is Hard-coded and confusing.
The second variable should be equals(tlv.getOui()) also, the test is failing on equals method.
I'd like to see a couple of possible errors here - should we have a test case that fails with IPv6?
:+1: for static analysis.
I would suggest updating this to analyze the primary keys map, to verify that the appropriate IDs are being sent in before returning the result.
this is a bad idea
Missing an 'if'.
Typo, should be addImportMenuItem
Why using ConcurrentHashMap here and not below?
I would rename the exception message to "Some unexpected exception" or similar.
This function is being called on the super class on click, so I think this should be called directly here.
suggestion if (user == null) {
This should not happen.
please use Strings.isNullOrEmpty
Why not.filter(exam -> exam.getRoom().getRoom().getPenalty()!= 0)?
This is not public.
This is a bad pattern and should be in the try-catch block. When you declare exceptions I expect use of SshKeyStoreException.class, the thrown message will be properly inspected to the thrown message and then use try-catch to mock the ResourceException.
I'd not remove the public modifier.
(nit) suggestion return index == null && idForNull == UNKNOWN.equals(index);
suggestion tagsToResource.forEach((fromTag, asResource) -> tags.remove(asResource));
I don't think we should make a special user for the validation user, just to make sure that by default there is a default, the user will not want an extra resolver/null (in case it exists).
Rename to UNICODE_REGEXP
You can use Function0<T> instead of Try.of(of(partialFunction)::apply).getOption();
Why not make the other static methods public?
Add the 'try' to the log, so the exception is easier to identify which ledger is not covered.
If this method is called before _only_ we can cache it in a field, and call _getBinaryReference_ at the end of the method.
you should be using the same monitor
static
We could return this.numberOfConnections directly or 0 otherwise.
if you are sure the argument is invalid, you should not be setting it.
Why not using the ternary operator?
just Exception is enough
rename
this method should never return null, use the linkedAddresses field.
Is this one "protected void" necessary?
Can we not use AllSspToSingleTaskGrouper?
There's no point in checking function!= null
Please add ioe to the exception.
Do you need to update the outcomeSettings method to call these methods?
I like 2. If the list is empty, we can keep the previous value as the exception. But I am not sure the exception should be thrown.
Static string constants
you could use String.format("%s has been removed.", getRule().uid + "' has been removed.", also, would be better to use the same pattern that you have made in the toString, i.e., "RuleImpl#getName has been removed."
Should have a space after add
Why do we have to wait for the operator to be started?
If this file doesn't exist, RawText. Here we should check if the file exists. If it exist but is not, return RawText(repo.openBlob(id).getCachedBytes()
I'd like the following, but but having constructor with just one call to constructor. JmsConfiguration create() method is a bit confusing. private JmsConfiguration create() { final JmsConfiguration configuration = new JmsConfiguration(); }
why not boolean? It's false by default.
It would be nice to change the parameters class so that it uses List instead of Set, then you could use just "toList".
Does this need to be public?
I think we should drop the last argument, same applies to this, and is not a proper way to get the date-based date
I'd rename this to _result_
static import
Optional: findOneWith(group)
can this be private?
checkMapping should be moved into AbstractFBNElementEditPart
Why public if it is only used here?
Also, do we need to log the level in the update method? Maybe you should log the warning when form.isSet().
Add final keyword.
Instead of another hard-coded string, consider adding a constant to the CONSTANT name in <LINK_0>
I think you can remove the () in the assume
If the value is changed in the server.stop() method, the value needs to be reset in an @After method.
you can use methods like this here instead of using the public interface.
suggestion return lit.value.toInstant(lit.value.toInstant());
this should be public String getTrialUntil() {
I'm not sure if we should add this method to the toString implementation. Wouldn't it be better to simply return "class name" instead of "getClass().getName()"?
memory account
If you are expecting an error, you should use assertRemoteNotFoundException() instead of assertRemoteNotFoundException()
Minor: Unnecessary log.
![Codacy](<LINK_0> Issue found: [Possible unsafe assignment to a non-final static field in a constructor.](<LINK_1>
I would recommend doing a check that minStr is not null and make it > 0.
This warning suppression can be removed if the below line is changed to PartitionAttributes<String, String> attributes = new PartitionAttributesFactory<String, String>()
Maybe we could use java return statesManager.activeDatabaseProperty().getValue().filter(context -> context.getLocation() == DatabaseLocation.SHARED).map(Context::activeDatabaseProperty).filter(activeDatabaseProperty::isPresent).map(this::isActiveDatabaseProperty).booleanExpression(binding);
@metalnow not a bug, but the value is set to null. You can just use checkVolumeBtn.
Should be switched to just using a.getOrThrow in the else clause
RulesDao.getRules() can return a list of rules, so we don't need to do a defensive copy of the list.
I think there's no need to save these strings in a loop.
Linq says: This should be called to populate the object rather than than the value value. (Same for the other fields below)
Can you use UTF-8 here instead?
I think this part should be placed in the generalisation class TraceResponseOutInterceptor
If this is false, getNetworkQosId() will always return null (if the QoS_NOT_EXISTS=TRUE). I think the following code is more readable. return ValidationResult.VALID;
ImmutableList.copyOf(getWindows());
Let's make this variable final.
This is a breaking change for anyone accidential getUsername() implementation.
I would rather do a null check on an int.
nit: should be assertEquals(type, mapper.readValue(Mapper.writeValueAsString(est), SketchEstimateWithErrorBounds.class);
I think we should consider using Map on the side
this and port68Listener could be removed as well...
FromUrl URL is a url, you need to we check and do the parsing of the content or parsing parsing of the content.
Can this be replaced by StringUtils.isNotBlank?
I think this could be too static
should be the first parameter of 'listPermissionSubjects'.
it's more correct to use equals instead of hashcode
This should be all going to be grouped with the first element, so the second element will have the right type, and the first element will be missing.
nit: we don't usually use curly braces around single line blocks
More done to make a copy of the list, but you can pass the Map.copyOf(nodes.asMap()) into the call to these methods.
We should probably keep this private and make it public since otherwise we're moving to the public API
Add newline before return.
@ivanarrizabalaga why not just catch the exception?
VarEdit.java says "in". But the code says "in".
style nit: remove unnecessary blank line
I'd prefer using isEmpty() in all the places, to be consistent with the rest of the codebase.
Can you give a use-case?
Use assertThat instead of System.err.print.
I think this is not a big deal, but we should probably also allow a caller to override the iteration, and only call it if it is not empty.
If we do this, we can make the old code concise. java this.start = checkNotNull(territories.get(0)); for (int i = 1; i <= territories.size(); i++) { add(territories.get(i)); } }
List
I don't think it's necessary. We can remove the TSERV_CACHE_FACTORY_IMPL because if tserver is already passed to it, we should keep the log message as is and return the cached value as well.
Use logger instead.
This is a bit weird, I think you just return the result of the method.
If there are no files in the workspace, why do we need to check for the presence of the nicsForUpdate here? You can take the lock of the 2nd nics for this.
public?
We should have a test for the 'patient' that contains only the top of the page.
shouldn't we add COMPRESSED_COUNT here?
suggestion return FormValidation.error("Valid URL");
Single or double pipe?
It might make sense to make this constructor private and have people use the public ones with an instance of the class.
Can you just me get the default rounding in one of the team2?
once ByteBuffer becomes the canonical representation of a Binary we should implement a get byte array of size Binary and then call getBytes with the appropriate length of the array.
You can simply write it as if(!AuthzResolver.isAuthorized(sess, Role.REGISTRAR or VOADMIN)) {
We could return the result as well.
getAccountService() should be getName() not getName() to avoid logging in the constructor.
Let's rename "method" to "isAccessible"
I think we are missing the mShareActionProvider reference here.
static imports
Do you want to return only names if there is no reason to add the alternative names?
Is it possible to share some code between METHOD_DEF and METHOD_DEF? Should it be grandParentAST.getType() == TokenTypes.METHOD_DEF?
We could have a method like private Object createObjectFromMap(String name) { if (packageName == null) { return null; } final String packageName = SHORT_TO_FULL_MODULE_NAMES.get(name); if (packageNameWithSuffix!= null) { instance = createObject(packageNameWithSuffix); } } return instance; }
I think we need to check getParameters().getGeoRepSessionId()!= null, since geoRepSessionId is not null.
Remove parenthesis, please
extension can't be empty or /
rename to process
reopenAccount is not called after click, right?
iirc, if action is gluster service, we will be able to stop it. Can you change the "start" command to be responsible for performing the work?
Looks like this change is not necessary. RemoteTransactionCommitted doesn't have the transaction, so the commit will only push once.
Can be simplified to java return (obj instanceof FilterPath) || (obj instanceof FilterPath) && ((FilterPath) obj).path == null)
set to true here, right?
I wonder if the logic here should be moved to a method to allow a user to override the default booleans?
This seems like it would be a lot better if we just use 'no' instead of String[]. How about instead of this array?
This logic flipped?
Maybe we should use a logger here, and print to a different file? In case there are issues with updating and we need to diagnose.
I would avoid these two statements, unless they are very similar, or if they are still needed.
You should load the file if the test fails (wrong flags and bad)
This method has the same code from setNavigationOnStandby. Please extract it to a separate method.
The concern with whether the process or not is something to be able to validate?
What is the purpose of logging here?
if we continue with this convention, please init to true also here
This is a good idea.
- static import - why is this necessary?
There is also a more specific exception message for findNodes.
This query could be used, right?
Before go through the loop make ownedQuantity a variable that is now computed once at the beginning of the loop. This would avoid the need for more than just the type ownedQuantity.
What is the use of getVoided() in this loop?
Should be private.
If we are allowing a debug message, it could be an appropriate error. So set the maxPings value to that or check if the parameter is null.
the assertion is useless, as DependencyLinker.putTrace() is only called for each service, so we have to test that it's the case now.
Should be added if you want to keep this message as a message, in case there is no other way to use it
suggestion LOGGER.isDebugEnabled();
@pynicolas I think it would be better to not pass null here
.equals( annotation.getName() ) is equivalent and may be faster.
You can use PropertiesConfigurationLayout to save you a lot of casts. <LINK_0>
Just use Axon's AssertJ: java Assert.notNull(adapter, "'adapter' cannot be null");
Are we sure this should not be reverted?
Two params in this method and one above
never "null".
Diff should be interesting in this patch.
Why do you use the public void onActionSync? Can the void method be moved to the public?
If you use the default version of java.version, then you can no longer change this test.
same here for store
return id == null? null : id.getValue();
is this anonymous class necessary/intentional?
This can be simplified to return EnvVars.getRemote(getChannel());
The id is used to identify the edit link. So it doesn't seem to be really used. findElement() can be used directly for logging.
I'm not sure if the cache should be non-public, but it can be deleted from the interface.
Check command and job null.
I wonder if we can have a more neutral term. This is a K very specific concept
Could you apply the same approach as for other exceptions too?
null!= settings
Why is this condition required? This can be simplified to return new BigInteger(1, valueBytes);
As a small improvement, would it be possible to just use the K key and the mmiddle field?
This code is a duplicate of the above. Can we pull it out into a method that explains the purpose?
Please change all these methods to fetch the group role names, since they are only really needed for this pull request.
I think you need to replace this with SpectraANode.createStreamAndNode(this, SpectraADMN.A_VAR_J) and just call the setTask directly (which is false). If you want to go to the SpectraANode, then you can replace the 2nd argument by param.cloneStream().
with the LegoSensorPortConfigDialog, you might as well add a "performClickOnOK" method to the button and call that instead.
Prefix the variable with the.equals() call.
You could just return true directly and avoid the try-catch block.
let's use else on this block
Is this class used anywhere?
Need to check that the context is for this context.
I think this could be simplified by using a builder: build and not public.
should atleast check o being non-null and instanceof IdentityExtractionFn.
... this.limit = limit;
Why it is so complicated?
I would feel more comfortable with this if you did something like throw an IllegalArgumentException if!ref.startsWith(oldPrefix)
![MINOR](<LINK_2> 'Severity: MINOR') Remove this use of "this.". [![rule](<LINK_1>](<LINK_0>
Is this the best way to do it? It seems to me there is no async command, it should be much more readable.
In general, I would use File.separator instead of "/"
Curious why we want the value to be same as DASH?
nit: Add requireNonNull for repoManager to avoid NPEs.
Think this needs to go right below line 91. parseResponse can return null (line 133), which will cause this future to never complete.
The message should be included in the Kafka subscriber as well.
the system property name is the same, why use "logsTargetDir"?
suggestion return map.entrySet().stream().map(entry -> e.getKey() + '=' + e.getValue().getFirst()).collect(Collectors.joining(", ", "[", "]"));
This will just format "timezone" where it's an instant. That means we don't have to do this twice. Can we just format it in the constructor and use this method directly?
I think we should only increment if there is a query.
if you are synchronizing whole methods on the same object, you might as well use the class's monitor, by using the synchronized keyword in the method signature (public synchronized void...) This avoids extra sync objects (and saves one level of indentation!)
@weisebrazil There is a bit of code duplication here. If we can use this.tagged.path(name) as it is deprecated.
dublicate biz
Use a constant.
Is it save to use a generic exception? Can't we just catch a IllegalArgumentException?
Please fix the log message to be like: "The specified message is not correct. Please fix data during reviewers."
Should we add a null check here?
The NotifierHandler (remove) methods are not called anywhere else, but it would be good to limit the number of messages embedded in the CallService#destroy, too.
I'd use new seeded byte[2048]; and be more explicit.
what about location? we do not need LocationSerializer?
check close()
Shouldn't this be a noop?
getOrElse(), so when we see MARKED_ROLLBACK, we need to check if ACTIVE or MARKED_ROLLBACK, so we can get rid of this same logic.
Same as before.
There's no packet data, this contains partial NRB data amputated by what was read in 28 bytes of packet data?
Since this is a public class, do we need a better way to do this? Putting it in the constructor is not good.
why do you need path.getValue()?
I don't think this is going to work. The default behavior should be to track the analytics view.
do we need AdsFandomPage created inside getJquery() method? better to call it directly and add method info to AdsFandomPage
It's better to use (Label) that).name()
This cast is bit suspicious. We can just use (short) (bytes[pos] << 8 | bytes[pos + 1] & 0xff).
If it is possible to use the PageRequest returned by TranslationRequest.of(0, 1), we must have a limit of 2 or so. We must support that. See myConceptMapQuery for an example.
Maybe we can also return null if everything is not found?
.collect(Collectors.joining(", "))); please
You can do return tags!= null? tags.equals(that.tags) : that.tags == null
"is XXX that could be placed"
Can you use Collections.singletonMap(InfrastructureManager.ELASTIC, "false") instead?
why set the messages to NETWORK_ADD but not {action}?
Why are you doing this? There is a method in GraalUtil that does the right thing with the argument, or just use a method that does the right thing. This should also be a public method in SObjectWithClass.
The caller will _fail_ if the region is not null. The region will be null.
This method can be static
Why do we need this? I think it's already done by theinjection container.
we need to take forceExecutionOnPrimary into account here, right?
please add a 'else if'
nit: consider using asNull() instead.
This isn't a good way to combine the 2 above, but it's a little more readable.
1. Will be better to close the session here too please. 2. If you do it in a finally block then you will be closing the session on the finally block. 3. If not, leave it in. This is usually not a good idea.
Let's add a max(long parallelism) method to ExecutionAppender. I think it is better to declare parallelism inside Math.min.
Double.toString((long) rate) rate) is faster than constructing a String which can be expensive. Please change Double.toString(long) to use rate instead of +.
can be public.
It could be package private?
It's a little odd to call super.runWork() here since it's already a lambda.
I think the naming makes sense, Parameters shouldn't have any effect
debug, please
This method could be private
The duplicate method has a separate pass.
Not sure the logic is better, but I'm a little picky, but in the case of getAnnotationFinder().findAnnotation(getConstructorOrMethod(), annotationClass, String[] groups) can be replaced with java return findAnnotation(clazz, annotationClass, String[] groups);
@fanifieiev the same above.
write all of these fields directly into theReadHeadInfo?
should this throw an exception? [the same for all the other similar cases]
minor: void instead of void
Log message at the end of this method
Why do you need this test? This is not testing user-provided options.
Same as above. Please use the description instead.
I don't think we need this array.
Why not put("\n", "\\\\f");?
I would replace the exception by a RuleContext.setException(kcontext.getRule().getName() + ") does not support no weightMultiplier.
We can replace waitItemOnContexMenuIsNotVisible with waitItemInContextMenu(String) projectExplorer.openContextMenuByPathSelectedItem(PROJECT_WITHOUT_GIT_FOLDER); projectExplorer.clickOnItemInContextMenu(TestProjectExplorerContextMenuConstants.ContextMenuFirstLevelItems.COPY);
check if numEvents is negative?
I would move the variables for the class and give the proper name, as we are also calling S3CingLog4jitsiPASS_HEADER
We should still have a call to MessageNano.toByteArray()
Should be ung: this.localPort = checkNotNull(localPort, "localPort");
why is this method public?
Maybe make createKafkaTopicRepository() to return a factory method in KafkaSettings.
use execute i mentioned above
If it's deprecated it should be false even though we are in the future.
is this change necessary?
suggestion ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", unsafeConfiguration=" + threadConfiguration + ", in toString() + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + threadConfiguration + ", qualifiers=" + thread
could you check for null? i mean it's the removeSession method, but it's called from the Utils class.
Item dropped should be a hopper
you can just make this method final and use it in both places
there is no reason to use TmfEventTypeCollectionHelper.getEventFieldNames(this)
@Override required on this line
Leftover debug line? I know the old PR was only about this, but it may be now due to the library being loaded. Suggest changing the flag to 'true'.
Wondering if we should add a default case here too.
I think this call to the super class AbstractXAResourceRecoveryProvider.setXAResourceRecovery(xaResourceRecovery) method.
If you pass that that you also need to wrap it on a LibertyMojoDeploy?
@cvrebert let's move this to a package private method, as we can have more than one usage of this method in tests
Remove useless assert
Shouldn't we do this in the finally block?
I think this should be moved inside the try and remove the logic and move it inside the try block.
should use return KeyVaultKey.class.getName()
I assume there is no such thing as logWithFormat in the EResultData class.
you can call just "put"
Be careful, the trailing.boxed() transformation is necessary. Consider following code: java final double[] targetWeights = DoubleStream.of(pon.getTargetVariances()).boxed().mapToDouble(v -> 1/v).toArray();
Nit: there is a [SimpleMap#asString()](<LINK_0> already. I think this is OK, but can be package-private.
dont use magic numbers
Probably should crash if bad format string
When adding group attribute to VO, you should use it instead of this map.
can you log the folder id here? I think it would be useful to have a log message after the thread has been interrupted so it wouldn't be able to continue execution.
@romani Should we add some more information to this list?
This might be cached as a constant, but it might be ok to keep in mind that warp is set on the classpath
why the extra logging? Can't you just pass the exception the stack trace and not print the stack trace?
Is it helpful to have the exception in the log?
It seems to be either that should be _not_ a leader.
I am wondering if it is worth to use a callback here. WDYT?
Simpler: java GaussianDistribution.DistributionModel.from_value(this.model_type));
This is a little hard to read. Could we extract a method that has a java static createConverter(Map<String, String> mapper) { return mapper.orElseGet(ObjectMapper::new).convertValue(attributes, ValueAttributesInfo.class); }
You can use StringUtils.defaultString(string) here instead of String.format
You should log on the resource being processed.
can be private
not all listener
@erimerturk shouldn't this be configurable?
I believe we should throw UnsupportedOperationException.
if this is debugging help you might want to have a test that ensures that readResolve is called.
I think this should be an enum, so that the default case can be changed to throw an exception if the value is TINY.
why not just inline it?
I think we should consider throwing a FunctionException.
Some proxies may not grok the comma-separated headers; any reason we can't just do Cache-Control: no-cache here?
Can you move this to a separate method? If not how it's done, you might have to read it more than once.
Are consecutive reloads necessary or will be one reload at the end sufficient?
You can make this a bit more clear and still be done in the FeedbackUtil.showMessage().
You can use the [canonical way of doing the creation](<LINK_0> suggestion EquivalentContentUpdatedMessage message = new EquivalentContentUpdatedMessage( UUID.randomUUID().toString(),
I think there's a potential NPE here if we have cr.length==0 and it's reset. Maybe you should just check that it is < 0?
Here you could use the leaf queues.size() and check if it is < leaf queues.size
fbTansportField.get(frameBuffer) would be better here
Does it make sense to use getShort here?
I think it's safe to remove the local recovery info in the caller thread and then return the stage. Slightly off-topic, I've been looking at RecoveryAwareTransactionTable.removeRemoteTransaction and it seems horribly inefficient. It should only iterate over the transactions when there is an async call.
entry
Would be good to have a metric for this to be INFO level.
Can we add this to this file the file?
Can be simplified to: if (object == null) { object = FilterRegistry.loadFilterFromNBT(name); } return object;
@kritika-singh3 @viraj2712 -- How about adding a constant to ConfigurationService and use that here for a name?
It seems weird to stop when shutdown is called, but not when shutdown is called. Can we move it into ClusterManagerAdapter#shutdown()?
why not just use bundles.get(0)?
No need for this exception.
should return false
I guess we can remove this.endUser.hasProperties()
how about the other public methods? It's a bit confusing that the method doesn't throw IOException. The caller should be able to do this.
In Java this is [Optional](<LINK_0> one which is provided by JavaSerializer. So if you prefer to remove the whole ObjectResolver and just replace the whole Object[] from JsonNodeUtils, it would be better to just use JsonNodeUtils.fromJSONNode(jsonNode). Also, it seems like the only value that you need is for replacing would be the value.
Wrapping the original code in a new method is a bit too much.
You can't use parameters.containsKey(key) here.
why do you need to wrap this in a constructor?
why not delegate to public StatusReturnForXmlRpc(vdsServer.glusterVolumeStart(volumeName, force.toString())?
Shouldn't this be member?
minor: no need to break this variable statement, but this method probably can be directly on the previous line
Integer.toString(major), Integer.toString(micro), qualifier) instead of String.join?
You could just do this: java return Futures.all(workQueue.getValue(), Futures.all(allMap.keySet(), workQueue.getValue()))
Since this isn't an exception, we should be using the java doc of the constructor.
If there is no xpath filter used, the xpath filters are not removed, the xpath filters will be removed.
You might want to check the return value here too.
We can use StringUtils.isEmpty(name) here
I think this method should be called dragDetectedInAvailable() instead.
Why did you make this public?
This is not included in the test
could be simplified: Collections.addAll(refsSpecs, specs);
Please use appropriate error message in the string, so it is clear when the string is not included.
assertFalse(response.isSuccessful())?
Possible NPE here if config does not exist.
Please consider adding an overridden version of the Script(String, int, Logger) constructor that accepts Duration to encapsulate this type conversion.
does this need to be public?
suggestion throw new IllegalArgumentException();
This is checked even if value is not null. Therefore, a change in the original code is not necessary.
Argument name
Check that the memory cache is not null
If you want to clear the wikipediaLanguages by default, it should be of the same [all situations](<LINK_0>
Interns is a constant, so this can be a Tuple.
.build() doesn't look right to me
I'm not sure about this change. Does it work for exploded and jar version of the same name like this? It's probably worth adding an assertion to that this path is actually a buildTarget.
As far as I see, the observer is not used anywhere and the method name is confusing. I think it would be better to rename it to something like isCached() or isAuditAudit()
This doesn't look like it's being used, are we sure that it's safe to use? Are there other test methods that do this?
Why not add the messageId to the log?
@non-null-check
I would put this in another test, something like: public void add(final LineItem lineItemDraft, final My MyriaProduct(client(), product -> { final LineItem lineItemDraft = LineItemDraft.of(product, 1, 5); final AddLineItem addLineItem = AddLineItem.of(lineItemDraft, addLineItem); testOrderEditStagedUpdateAction(addLineItem); }
I'm a bit worried about when this test is invoked more than once. Is there any reason you can't add the test more than once?
Please add a java Objects.requireNonNull(computation, "computation is null");
This should return the string instead of a String.
Are we sure that this is the best thing to do?
this.
Should we have a thread name here?
constructors should be package private
suggestion this.connectionFactoryMap.forEach((ldap, connectionFactory) -> connectionFactory.close(); );
> "Workflow all targets in project"
Is there a reason you set the timeSource to null here but then you could just do config!= null here? I'm not sure if the logic should be here.
use ShellIsAvailable
I would create a StackEvent and reuse the same code: java return new DatabaseBackupTriggerEvent(selector, event.getResourceId(), event.getBackupLocation(), event.getBackupId());
should be synchronized
Shouldn't this return Boolean.FALSE instead? We want to get rid of the cast in the next method.
s/public//
Can we throw a IndexOutOfBoundsException here?
I'm thinking that it should be able to test the max rows of the column in the table and it is already set via the column name.
I think this is a break, not sure what we want.
Minor: We should be consistent with equals for hashCode.
Can this be done with [Resource.getResource](<LINK_0>?
this method should be kept, I think.
Please make this a final static
Should we show error if it is not implemented?
I think if you'd prefer to use another map instead of getOrDefault, would be clearer and more readable.
Should not we add the same note as data version?
This is wrong. I have only one element in URLContent. Consider renaming to getUrl() instead of getUrl().
buildStreamToRulesRuntime() is only called in buildStreamToRulesRuntime() so it is not needed here. Should be in the method annotated with @Override
onErrorInternal returns a value in case of no task listener, so you should check for nextTaskListener == null first.
This is a little peculiar - does the distribution return in exactly the position in super interceptors or executor interceptors? Maybe we should only support 0 as the number in the interceptors?
getColumn should be private, and the other methods should be private.
Why first the connection, then the check and disconnect?
This should say "LocalTime".
selection may be null, as you checked it in the UI by 'UI', the selection is not a model one. The NPE is not handled.
Possibly shorter to just return id3v2Tag.getGenre() an instance variable?
Any reason for this?
No need for this. The absolute formatter is not used.
Why there.
Cache environment variable.
What is the need for the null check?
One minor nit pick. Just declare this variable outside of the class.
We can't do this but in SamzaContainerTestManager?
Why super.close()?
Minor: please remove the curly braces.
try to use 'put', it does not update the coupon model
Minor pass through here too.
@marko-bekhta Is this still a copy? Maybe we can use something like: names.append( String.format("%n%n"))? "" : System.lineSeparator();
small small but we could have the regex as a static final constant, so you don't have to split it every time.
I'd like to see the semantics of this class only to do so with the 'this.' usages.
move null check back as first action to not change behaviour.
Our error messages have been empty, you can just assert that errors is not null
Minor: it's a bit confusing to have this as a static method.
Consider moving these properties to a single place.
I feel like this updateThreadPoolSize() can be part of the RetentionPolicyMgr
rename
Here we need to check the OMResponse flag also. As for existing acl, we should set OMResponse response to false. And in that case, we don't need anything to be added to DBBatch, as it is not an empty response.
What if machine name is wrong?
Why is this needed? It would be guarded by a null check inside the if
Nit: I would change the string to "Payment info is here and use "Payment info is retrieved"
The order of the arguments is reversed - it should be assertEquals("Test_123", result);
Assert.notNull()
I don't think this is correct because as we use method newInstance(Class<T> type, Type<T> ) which is not very compact.
suggestion throw new IllegalStateException("Select a getVolume or getVolume or follower should be invoked, but the exception message should be more useful.
You probably want to use try with resources here, just in case ins is not closed the stream.
Please use the positional parameters.
As discussed offline, please add checks to these methods.
Use assertEquals
"Cannot call S3BlobStoreConfig.createInstance() is not enabled"?
remove that?
Can be just List.of (or List.of()).
This check is redundant. It should be done in a finally block.
Can you make this package-private? Also, please rename to "macAddr" (and the other classes in this class) to something meaningful to the use of Objects.toStringHelper.
You can't really remove all " case" case. There is a default case for that.
This method is a little bit smaller than what it was before. I think, using a method to compute the value in the method and then sleep in a subsequent cast.
nit: you can change the logging message to debug
clientIntelligence -> BASIC
To me, it seems like this is more of a workaround. If there is an issue with UNKNOWN_PROVIDER being a list of Strings, please update.doc to say "Unknown_PROVIDER".
Is there a reason why we need this method?
this is basically unnecessary, see above for generateParseLink.
Should we add.equals() here?
If this is called from multiple threads, put it in the dataStores map, and if so, then this method can be synchronized.
getRoles() should return the roles and not null?
@NonNull should be on the line above.
Is this really necessary? I think this can be removed.
Why'return null'?
You should use the constant today, but not the other way around. rejectField(context, "day")
please, add a space before the if
this is 3.3 feature, not 3.2
synchronized -- this class is thread-safe and guaranteed happens-before between producing readable code and consuming it
Change "Finished Tasks Output" to "Finished Tasks Output". E.g. Tasks Tasks are already selected
Is this what we want? The notAcceptable exception internally means that if #getAttempt to use a list of ChannelGroup, we can skip the this cast.
Wouldn't be better to change variable name to nonSame?
It's beeter to used int type.
rename to v
Exception?
please add constructor without parameters
concurrency issue too
This method is called at many places and can be potentially called multiple times.
Nice assertion for the specific use case.
throws or exception
You should use the "public" annotation here.
I would change this to debug and not include the rp successfully removed. Otherwise, it will want to know that we removed the rp from the resource.
can we add a message to the log, that way it is easier to debug if we want to update it while we are at it?
Why are we changing the behavior? I don't think we should make a newRelationships variable. We should keep the scope as well as possible.
This method should be written in the more succinct way.
Log debug - not info.
Shouldn't we throw an exception for any other exception?
Should be jsonOne. This is assuming that the numeral part of the variable name is the expected number of fields in the serialized version. If that's not the case, then can you elaborate on the naming convention?
Can you change this to Collections.emptyList(); as we are not using the return value of addAll to a new list?
@simplifrereandreassThe method name is misleading, isn't it?
We should log the exception to log.
Maybe it's better to use the ComponentContext here?
Simpler to call logPutCountsPeriodically() now.
please, use text "Name of project " + project.getName() + " where the name of the project exists."
This could be made final
Consider making this check for null for awsSecretKey before returning new AWSCredentialsProvider().
log method name here, so you can use it also in click method
startTime = System.currentTimeMillis();
This is not necessary and will be handled by the method setDatabaseNameForCurrentThread()
I think we should include this to KFS_PER_CLASS rather than "ROLE_USER".
please remove this parameter, it is not used anywhere
It's better to use static import here to improve readability of code.
Use of this.
printStackTrace is not needed
please update the method signature to be consistent with the entity commands framework.
Can we do this in AutodetectCommunicator::function instead of regular?
Let's add this condition as an indication that the only server that did this name is the name of the client.
I'd put each of these methods in its own test method to improve readability.
I think this should be in 'RunInternalMultipleActions'. 'AdditionalHostSetupNetworks' can be invoked directly from 'BackendHostSetupNetworks' class.
You shouldn't depend on the expected value passed by the developer - you should go by MaskValidator.getInstance().isPrefixValid(mask).
Eh, this is not an error.
Dont add public here.
Should be final.
This is very nitpicky, but you could call getLocalTableBlogIdForJetpackRemoteID(remoteBlogId, null) instead, which will return the localId value.
to be sure, please always use the name jar
If we want to keep the current state, we should move this to the finally block
this is a bad resource CL, as there are clients to do with ConfigurationHelper.toJson(). Unless I am missing something, then this will be a problem, we should discuss in person
because of the way you can use the same format for the name, I suggest we i18n.
can remove this null check and use getContentValuesPopulator.planAndAuthorize(contentValues, true) instead
Please add assertionError()
Rename -> CosmosDbFactory to CosmosFactory
Can remove the throws IOException from the method signature.
we can return 'this' here as well.
Why does the handler require a zkController? Same for the other one.
These two methods can be private.
Shouldn't this be a getOrElse()? That would allow to set a boolean to true on the exit.
you could have a static variable for this.
why not use assertEquals on the values instead?
I do not understand the logic here. We create entries with every entry. And this will be invoked only once, since it will be backed by the map, which is not the case. You should accept the original entries.
I think we should return true here instead of false.
@carryxyh lets make this method private or public since it's only used by anyone else.
Can we throw an exception instead of returning null?
Please add some java docs to the method
Should this be.getWorkspace()?
You can do this in one line. try { } catch (Exception e) { log.warn("Exception while trying to prepare a query.", driverRecords); if (e.g., throws exception) { log.warn("Exception while trying to prepare a query."); }
why cast this to ColumnCheckConstraint? Seems like we are going to get the column here only if we can have it.
There is no need for Objects.requireNonNull if it's null.
click on element not on page
@Serranya use treebuilder to create treebuilder
Was the parens on the query name (e.g. should be __time, not __date
Perhaps add a log line here, stating that we're failing the action query execution.
please rebase, arik removed the lock in a different patch.
"setup" is invalid, and getMessage() is called.
What's the purpose of this info?
fNumericCompilerSuffixes -> CharArrayUtils.EMPTY
return Boolean.parseBoolean(getRequestParamValue(paramName));
[minor] Consider using Preconditions.checkArgument here instead.
I think we should add an assertion to the exception.
You can use org.infinispan.commons.io.Requi.AddressResourceDefinition.BIND_PORT instead.
Either remove the public modifier (i.e. keep the first in the method), or remove it from both methods.
I think it would be simpler to understand if you change the condition to something like this: if (action!= null && childWorkflows.isEmpty()) { updateWorkflowInstanceWithCTE(instance, action); } else { updateWorkflowInstanceWithTransaction(instance, action, childWorkflows); }
I know this changes the existing design decisions, but as long as we call this method with a vdsn results in the case of getting the vdsn instance i think it would be better to change the signature of this method accordingly.
For this value, use getId() which returns the id.
This should be removed, no?
Returning the name of the referenceactor was just a workaround for this PR.
please check here isSetPmProxies() otherwise you can get NPE
Why not 'getLong' instead of creating an object for "get-time" based on the preferences?
No need for the listener -> listener.layerDeleted(layerName);
Better to use UUID.randomUUID().toString()
Please consider adding a Preconditions.checkArgument to check that exists.
I'm not sure that the Player cannot be null.
Remove for declaration.
Can we have a more meaningful name for cause?
This is the condition we enter to guarantee the _customizedViewCaches is non-empty.
Actually, I think you could just pass in _new Gson().registerTypeAdapter(Person.class, Person.PersonUpdateSerializer).create();
Minor: helps to trace the entire log message: suggestion log.debug("Query getEntriesByRecipient={}", query.toString());
Please separate the declaration and remove the if statement.
does it make sense to send 2 versions of the verb to different hosts in the data center? (if one is older than 3.3 and other is 3.3) i think you should use storage pool compatibility version
Uh, this is a CI failure.
But why do we handle 400 differently than all other errors?
s/max//
The DbClient.shutdown() method returns a la database connection. It's possible that one dbClient.shutdown() method returns a non-ephemeral node, which is not allowed by the DB.
why is this called for every sessionReady?
Missing { and }
This is somewhat complicated. What about just using the parallelStream() here?
What if ADE is null?
@sleshchenko I think that String.valueOf() may be used here
The last object in the database may not necessarily have an id of the type. We should return a list of Strings with the id of the query.
This is only called once per the HA service call. Would it be better to create a static method for this?
This and the next two lines could be merged into one.
rename to affectedNamespaces
Use this.key
I would like to see this performance critical section in initialize() instead of this bind() method.
Should avoid use @ fail() as it doesn't throw an exception
Its probably not a big fan of returning a boolean type when we can return. We just look at containerPlacementMessage.StatusCode.STAY case.
why public?
1. what if the disk is not found? 2. why? you can have the same check for getAncestor() and getAncestor()
I would rather check that the default equals 0.
We should show errors here, not return originalText.replaceAll(regex, "");
This condition also has to be removed to use SaxonXPathRuleQuery.XpathFactory.createXPathRuleQuery(String)
I think we should have a null check for it before passing it to ResourceAccessChange.
It should return ReadOnlyArrayInterface.
@rui-castro Why not just bytes.length * 2?
Is there a reason we don't just use this if statement and exception?
do we really need this?
Shouldn't this be new Fraction( t.getBitsPerPixel(), 64 ) instead of new Fraction( 1, 64 ) here?
This is a small change and this method is not doing much. The only real question is this: what if this event is a event. For the event that has a parent event and the event is the parent event. For the event, maybe it has a.. else where? And where is this: return true;
I would suggest to return the list of macs, most people don't care about that
style nit: missing space between if and (
Should true be true?
This class implements equals. I think you should use Objects.equals(this, o) instead.
Why need to call runOnDisposalList()?
I'd probably add a checkNotNull for permissions and "id" to be consistent with other methods in this class.
Should be an interface and avoid code duplication.
I'm running a gerrit admin to make sure that we are running a remote installation (and I persist a user from the user). We should just run an integration test run with a remote install and submit a new run with a remote install.
@ivandalbosco Why not using getEnclosingConstructor() here?
If i understand correctly, maybe this condition should be moved to line 96 (or change the if test condition so that no thread will be calling setSslProperties again)
this should be private static, because it is used in a test class
As a general practice, I would prefer to not use SamComparisonMetric. That way the comparisonMetricFile.addHeader(h) method calls the following two lines instead.
the method name should be misleading as it's not a user input, but a user input.
no need for the 'else' word here.
Long.valueOf(1)
Please update the version of update method in UpdateNetworkOnCluster, in order to test the changes.
Can you use [ScheduledStmt](<LINK_0>
LGTM = Looks Good To me, just added some static imports and removed code, also the similar ones below. Can't we remove the method and the DurationUtils class?
If this method should never be called, then it should not exist.
The potential issue with the cluster registry being merged with other listeners. Do you think it makes sense to keep the CacheInsert simpler?
You can use executeScript("ace.edit('cssEditorContainer').setValue('); here
I think this should be inside this method.
Maybe use String.valueOf(getAllForStoragePool(existingVds).size()), ) instead?
Should we not return the OMElement object? Optional?
"http.responsecode" is the same as.valueOf(response.getHttpStatusCode())
This means that a json content with {id} has been denied. This means that description will be good for other files to be able to read as a description.
Nit: s/public//
Is it possible to skip the currentSession and skip the closed if sharedIDEContext.isInitialized() is null? Maybe this method could be simplified to: java if (sharedIDEContext.isInitialized()) { return sharedIDEContext.getProject(); }
You could add a variant of Collections.singleton( explicitFlags, explicitClassLoader) that accepts a CacheEntrySet, and return a new ValueCacheCollection<V>, as the client of this method should be aware of having a CacheEntrySet that accepts a Cache<V> and ParameterSet, and the client of the map is not exposed. Thinking about it, it would be better to make the code more readable.
Minor: Use.add(aggregate) so we can call the multiple multiple times.
This plays the current, not the next station.
It would be cleaner to extract a method that is used by assumeJavaVersion(JavaVersion, version) to make it a bit more readable
@antonini again, use format to combine the line above and use one assertion in all the class.
Since you are doing this only once, please add a new method on VDS that will be used in all cases, there is a 'is not a good way to do it.
Shall we remove this null check since we are doing a null check in every method call?
Use RuntimeException(e) since it's swallowed.
These two could be simplified to assertNull.
return Arrays.asList(ERepositoryObjectType.PROCESS);
Should these be error message?
final?
It looks like this one is used (and not the other in the patch). I think this method should be private
This is too general, it might be useful to have a method where it is called is grabbing the current group. Or you could add a method which does the same check check but there is no (not really specific to this method)
please remove the public modifier
Could you sync up the command on a device without a timeout? I'm not sure we do even want a timeout, but I think we're trying to see it blocking.
I think we can just use headerCache.get(). I think the proper solution is to remove the revoked token prefix from the oldToken parameter.
Fix message, it is not started
It is not enough to have public methods without arguments. Could you explain why we need to change this?
This is not related to the PR, but I think we should fix it in the creation of the collection.
Logic: Similar change to LazyFluentIterable#first()
@lautarobock I think, not sure if you use TypedQuery<String> here.
Check for the html element before using it. That way, the assertion will fail.
should use {} instead of string concatenation
Remove this check from the if() block since it is not necessary
Why.toString()?
Is it a good idea to swallow an exception here? I think it would be better to let the user know that this failed to do so at a later stage
What happens if we have no longer use full index?
The check for existence of Optional is potentially useful, since we have an exact null check before adding it.
static import
Why not just make it protected?
Should we check for null here?
why do you need to check for getTeam as well?
I think it makes sense to store the User type as a static final and reuse that in every method.
As above, it should be a separate test for the two parts: java @Test public void withExtensibleChannelTypeIds_shouldSetUnmodifiableExtensibleChannelTypeIds() { final String mainlyChannelType = checkNotNull(connectionType); final String channelTypeId =.withExtensibleChannelTypeIds(Arrays.asList("channelTypeId1", "channelTypeId2" )).build(); assertThat(thingType.getExtensibleChannelTypeIds(), is(single()))); }
if you want to sanitize it, it is reasonable to add an additional sleeps in the test as well
@vilchik-elena Why synchronized?
missing it
It would be worth moving the JSON::binaryMarshal into the next line.
This property should be set if its not empty. Do you want to include the original value here?
nitpick: I think we should never state "Notification" in the class, and the setRadius and the text says "Notification"
nit: Remove the assignment to limit to access modifiers.
Maybe use thenAnswer instead?
No need to cast to Profile here.
Do we want to use the org.junit.Assert.DISABLED here? We already have that flag in the ElasticsearchSchemaRule instance.
getActiveInstance is deprecated, use hudson.util.fixEmpty
The method should be removed, but the methods that are being updated by the client are verifying the data.
nit: public DefaultRecord(int sizeInBytes, byte[] attributes, int offset, int sequence, ByteBuffer key, byte[] headers) { this(offset, offset, sequence, headers, headers); this(headers = checkNotNull(sizeInBytes, "sequence"), attributes); }
static
can't this be simplified? java if (auth == null) { return null; } return this.factory.clone(auth.required());
and the binary representation of this byte array might be a byte array
Adding this to a field is good manner.
instead of returning a list, perhaps it's better to return something like InterpreterResult.apply(ppelinApi.getInterpreterContext()) here?
Shall we translate the whole value to 'b'?
I guess the id cannot be null, this can cause NPE. also can be taken from the rest of the method (already set with an empty string).
It would be better to private methods for the file type, instead of public.
This testValueOfJmsConnectionException is duplicated. The JmsXA is not used anywhere in the file, but in the some other tests that extend the DataTreeSource, it would be good to extract this into a helper method.
We should extract this in a constant.
Does this need to be public?
I don't really understand this.
This field isn't needed.
suggestion assertTimerEventEmpty(emptyTopEvent.getExecutionSet(), NON_CANCELLING, EMPTY_VALUE);
can we have more concrete type here? (new SimpleModule("Firehose-based")
This can be private. It's only used by onedDateTimeSchemaKey but that's fine to assume those are correct.
I wonder if we should be consistent and more consistent with the order of these ifs.
minor: I don't think metrics should be in the method name but that is only called from within this class.
If we add the charset in the file name we could use it.
suggestion if (rowIdx >= rows.size() && requested > 0)
Null check
this method is never called. This is the default implementation. Re-interrupts this or just return true.
we could avoid the need for the check below, we could just do value = interpreter.optimize(NoOpSymbolResolver.INSTANCE);
same again: do not create a new empty exception but reuse the calling class.
In the other class you use a JBMenuItem. Any special reason to use a JMenuItem here?
I think we should try to avoid using 'getBytes' as it is optional and fail with a more descriptive message. The test is for that, so it's better to do the cache.get().
This is now also needed for testing, please remove it
I modified unparseCall so that the state of the connection is squashed into the 2/3 switch.
This will prevent disk disk from completing the fork with master.
return a copy of the data to avoid modifications outside.
should this be trace or debug?
errors can be null
Could we remove this condition? Since we don't allow type of componentName to be null, I think it would be better if we just return directly?
If you're making an IRS client, is it null? In that case you'd have to pass zero for the default hostname for the client. Not sure if this is the right thing to do.
It seems like this would be better as a try-with-resources so that runListener is closed automatically even if testClass is not null.
Why do we need this change?
I thought I already implemented this for the MavenArtifactGenerator...?
why you do not use java assertKeyPair(file, null);
does this method need to be public?
public
Why is title and value not public?
Not sure whether you want to do this, but is there any way to avoid a copy of the list? You can just use _consumerMetrics.updateRebalanceRate(_consumerAssignment);
Do we want to default to set for default? If we do not want this, Objects.requireNonNull(monitor) will be better
What about String.format?
rename to contribution
Is that the thiz object needed? The original code would handle it in the default method, right?
![MINOR](<LINK_1> 'Severity: MINOR') Specify a "Function<I>" parameter instead. [![rule](<LINK_0>](<LINK_2>
Cache this?
Is this check necessary? getLeft().getOutputType(schema, stateSchema) is already known as a type.
Why do we need to cast to SCMMaterialConfig here? Cant we directly cast to scmMaterial?
Do you really have to catch  ClassNotFoundException?
Hmm, I think it would be better to have this have the difficulty interval load and track whether or not the difficulty level is taken.
No need to check for the existence of the route. The idea is that the route will be set when the route is done. In this case, the route doesn't exist. Change to a /
Same as in Alientype2.java (add type of alien)
Is this a html flag?
unnecessary else after return.
Can we delete the /etc/ properties and use the /etc/ instead of /etc/?
We should use a specific exception for all exceptions that we do for RuntimeExceptions: throw new RuntimeException(String.format("Object \"%s\" cannot be serialized to JSON.", e));
It's not necessary to add systemProperties.get(key) to the line above
Revert these changes and use a local variable so it can be updated in the future.
please use @Test(expected=...) instead of.class
key and value should probably be constants.
Problem: 1. A response of domainCreditsProgressDialog == null 2. A response of this network will be shown multiple times.
Maybe we should be more explicit about the naming of the repository that is not opened for repository. It is time source and git links are created from the repository.
I think this check should be inside of the for-loop because the Iterator is sorted by @Override
Could you make the function non-static?
nit: space after 'if'
please add 'canNotBeConsidered' method to UpdateOvfStoreContent' method that checks if the disk count is correctly set.
This is like double lock checking. You may also want to check it before synchronized which also improves performance. Considering namespace is not changed, you don't have to check it in within synchronized block.
Why is this needed?
Safer to read <LINK_0>
Consider replacing both of these with a private utility function to getSafeLogTag that will truncate (and warn) and could potentially be extended in future to do other sanitizations. That way your code reads more clearly: java String safeTag = getSafeLogTag(Class.getSimpleName()); // Or sanitizeTag or normalizeTag, etc...
I would expect the white-listing rules to have changed and match app user.
Is this change supposed to be part of the SDK version?
this seems like it should be a try() with resources
Why would the name be HTML?
Suggest renaming this to tallies
nit: a bit of extra space after the this. here and elsewhere
isn't this public?
Is it needed?
alreadyRegistered?
I think we should at least log this as ERROR.
don't need this. Builder will be enough
I think you should use Long.valueOf(d)
I'd have said leaderElectorExecutor a bit easier to read here. Then we could save the runAsync() in the finally block. Of course we'll need to add a timeout.
This is an invalid parameter. Is it possible for args.get(2) to return null?
Should this be delegating to a different method than encodeLink, above?
Could you extract this into a method
return Collections.<Object>singletonList(this.receiver);
It might be a little cleaner to use e.getErrorCode() here.
Use [StringHelper](<LINK_0> Or, better yet, don't use String concatenation there
LSM cannot compute the position of the first packet. This way, any subsequent operations will be performed on the next event and then need to perform a scan.
Please move this method to the bottom of the class (or maybe rename the method to "hasAnnotationAnnotation" or something similar). The method must be named also hasAnnotationAnnotation.
Yep, what Leo says is what I meant.
Shouldn't need to check that the trace is either of the expected and the test is run in the RestClientValidator.
One more thing, but I'd prefer to pass null instead of empty.
I would probably add a getBulkMaxRowKeyCount() here
Should this method not use AbstractReplyManager?
this method can be reduced to: java @Override public List<String> removeSavedPlainCommands() { if (saved.isEmpty()) { return Collections.emptyList(); } synchronized (saved) { List<String> result = new ArrayList<>(saved); saved.removeAll(result); if (result.isEmpty()) { log.info("{} commands are removed from saved list", result.size()); return result; } } return result; }
You should always call super.close()
Here you can use "verifyTableScan(table, expectedPhysial, employee]]" instead.
What if volumeSize is smaller than 10?
Make these constants static final in the project
:bug: This is unnecessarily complex. It is probably not needed as this should be a while loop.
Please extract to constant.
Missing brackets
This is not necessary as the test will fail if the cache is > 1.
Why don't we just use the keyword float here? Here we use float.compare(float a, float b)
You can probably use a foreach loop for this ts.
Shall we print the entire test case to log.info in case of fail?
why is this needed?
why is this required?
Suggest to use a Map here and in other places
I think pauseDepth becomes negative.
Given that we are in the process of runningCommandsMap, I think that is good, but we should rather use the iterator to do this: java synchronized (RunningCommand command) { if (!command.isPreemptible()) { command.thread.interrupt(); } } // the caller thread will be interrupted!.remove(command.id);
This is called when the revertAnrReporting is false.
You can use Validate.notNull here for a null check.
s/setRunning/stopAsync/?
It seems this method is not needed anymore.
conditional can be simplified with!firstReloadNotification.setHidden(false);
The second boolean expression is not really explicit and is hard to follow. Consider refactoring it a bit to extract the result of the method to a dedicated method.
So my guess here... but have you considered using IllegalArgumentException with Nullable?
You can make this more compact by using return path!= null? super.toString() : super.toString();
static import
parallelStream() is not necessary here, but I think it would be nice to avoid a stream altogether, below below.
This class has always been called multiple times in the file, so its safe to always use the "final" keyword here.
We should extract this logic to a shared method.
This can be simplified to Collections.singletonMap("name", name), which is one less key-value and might be shorter.
I think we should not use a null AtomicBoolean
Likewise..
can be simplified with Collections.addAll(values)
Seems to me like this is a filter function.
return get(name, bounds)
could be simplified to: assertEquals(expectedTags, actual.isEmpty());
Leftover debug statement?
This should be changed to "generalConfig".
minor: change 42 to 42
Please replace with return failCanDoAction(VdcBllMessages.HOT_PLUG_IS_NOT_SUPPORTED);
there is no need to stream on the left side
Remove this line.
You should keep the other methods like this. ooKeeperClient client = provider.get("getDeploymentGroupResponse");
I think we should have an explicit factory.orElseThrow( ) here.
I would prefer the waitFors matcher, there are common pieces that are in there.
:+1: for this...
Same here with freeUniqueName(name)
is this method used anywhere?
Could you get rid of the above two lines and just the println? Also, the file extension should be on this file and not the file itself.
Minor: since locateMemberTests(String version, boolean enterprise) has been renamed to locateTestsArtifact(String version, boolean enterprise)
If this logic is always true, do we need to check this here?
org.hibernate.search.exception.Error: Unexpected error in thread program definition, "Unexpected error while looping".
It's a bit odd that this exception can be logged as a message.
I agree, the!getMapGenerator().requiresInternetConnection().![CRITICAL](<LINK_0> 'Severity: CRITICAL') Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed. [![rule](<LINK_1>](<LINK_2>
Meaning for this one - we could just return the max?
null check
Wasn't there a reason why you changed it to.equals?
Can you add a variant that accepts a OperatorExpression<Number> to the return type, to avoid the need for the class variable?
Style-nit: This method can be private.
"general.accessTokenValidation" -> "general.accessTokenValidation
should we use pub.subscribe(...)?
Might as well make the path separator the /voltdbroot/.xml file and use that here.
Magic number
If you have two objects.remove() calls, it will increment the count too. Why do you need to make this method synchronized?
Move String values used more then once to a constant.
add null checks
This commands are not handled by anywhere else.
Are you sure that you don't need the nonNull(o.getParent()) check?
suggestion return this.getClass().getSimpleName() + ": " + mode;
As discussed, this method will be called on the async side.
The last assert is different from the first 2
If you want to keep the long variable name, please wrap this line to make it readable: ExpectException expectException = new ExpectException(new PassingStatement(), AssumptionViolatedException.class); But I really prefer delegate or delegateStatement because that is what the role of the method is for the sut. The variable is declared one line up, so the long name isn't needed and makes the code harder to scan IMHO.
can we use toString() to make it safe?
Missing invalidate() call.
This message does not reflect the exception.
What if the cache contains a non-empty query?
You can use StringUtils.isBlank
These two assertions are redundant, you can just use Drugs(...)
Can we revert this?
Should this be LON_DEMAND?
I have some doubts about the use of.newInstance() on the line above. I think that is not a good idea to use.get(factory) instead of using.get( factory).
this can be static
@vmaletta use camelCase naming
@CarlosGines Let's inline this.
can we add here more descriptive name instead of element? Maybe element?
Minor: can you add a check for null?
Why not use the I18n Logger here?
Can we remove this line?
use longValue()
remove.
suggestion if (type==Jenkins.class) {
This line is hard to follow. I think it would be better if we extract the timeout check logic into a separate function.
Do you need this System.out?
requestParams(Map<Object, Number>) params[0]);
With this changed to : org.apache.commons.lang3.Assert.assertEquals(Bytes.toBytes("abc", scan.getStartRow()), scan.getStopRow())
Change to: conf.put(FileOutputFormat.OUTDIR, String.format("gs://%s/%s", config.bucketKey, config.path));
Maybe a static import here to avoid the FINE level.
return a new instance? (return null)
putting
could you please remove TAG_ALL from here and use it in readNetworkStatsDetail()?
Please use StringqInfo.
Should we make TestToolUtils public?
Wouldn't it be better to call this(label, property)?
This is very dangerous. It may be very dangerous to use i18n, but that is not really what we want. I would suggest is to add a method to System timings so that the connection should be reconnected.
I know this is just a programming perspective, but it seems that we are building the toString() method. Can we extract this to a variable and reuse in the if case?
Make this a static?
so we don't need the UnmodifiableMapEntry field here
Why not just return if the file exists?
@Nullable
This method is barely readable. @Override public void addValidationResults(ValidationResult value) { if (value == null ||!StringUtils.isEmpty(value)) { return; } for (Entry<String, ValidationResult> validationResult : allValidationResults) { addValidationResult(validationResult.getKey(), validationResult.getValue()); } } return value; }
I think we should also change the field access type to one.
I would close the try/catch (i.e. does the same thing)
We should not be throwing RuntimeException
You could use String.format here, it would be clearer.
Wouldn't this be better:... if (other instanceof ElementNode) {... } else {... }
I don't understand this test. We may want to write a test with input file or column input in the generated output. Probably best to hoist them to constants.
The return type should be long.
If VM.getCustomCompatibilityVersion() is null, then the check VM.getCustomCompatibilityVersion() is not necessary.
This check should be done before we check the getActivity() to null. We should only create the activity if we're in the activity list.
The method should be protected. I guess, we have a class not supported actually
childDir should be deleted.
Use assertEquals() and remove assertion.
I think we should only attach the adapter if we sign in in the background, not the app.
Lets move deleting APIByID to the View before it is done.
What does this mean?
[minor] Prefer using.keySet().forEach((Servo) si).moveTo(angleMap.get(name));.. moreover
suggestion if (charset == null) { charset = charset.split(",")[0]; }
can you create a constant with a name for this magic number (and pass in this constant)
This should be public static
As a StudyDataManager is not thread-safe, you are making a synchronization here.
<LINK_0>
Better to add a new exception to the constructor.
Just a small micro-optimization here: If you swap the ItemSetting and the Material check, then this statement can be moved into canMineakedDebris.
I suppose there is nothing wrong with this, but there is no need either, is there? (other cases of the same marked with ditto3)
Maybe you could use new LinkedHashSet< INTEGER>(type, new HashSet<>() instead of new LinkedHashSet<>() to prevent the cast?
Shouldn't this be < 0?
This is a change of behavior. The first is the list of strings - either directly or the first is the list. I think this is simpler. The second is : return (String) material.get("plugin-id")).equalsIgnoreCase(pollerPluginId);
I think we should use the public setProperties(String urispec, String remaining, Map<String, Object> params) method, so that properties can be set using the public setProperties(String urispec, String remaining, Map<String, Object> params) method.
You should test for both instructor and student?
Is there a more complex way to do this?
setErrorMessage
can u extract a final constant with a readable name out of "<[ ]*%s[ ]*>"?
why is probeRenderer initialized in the constructor?
should be assertThat(output.endsWith("-") || output.endsWith("Normilized string can not end with '-'");
Looks like a checked exception here.
We can add more specific exception like "Unexpected exception while waiting for the button to be visible"
curly braces around single line blocks
This may not be sufficient. Because we always check the same index as the record that was created in the tree, which would mean that we don't care about the case of the current node's owned index.
Really minor, but I think it would be clearer to use forEach rather than relying on the stream.
This should be a checkNotNull(this.operatingSystemToOsFamily) check
This should be in the ctor.
/a/b/l3/dd should be replaced by constant.
This mapping should be in the API, see BackendResource for examples
calling endSuccessfully directly instead of endSuccessfully
How does this relate to removing the TTL? I think it's only being used by the JMX client.
Why do we have to cast here?
I'd suggest getting rid of the pkgtypes and using the.keySet().
Check for at least one of the filtered weight map.
suggestion throw new IllegalStateException("Cannot terminate process. Not a UNIX system.");
Not sure if this is the correct fix for this PR. If you think the default retry handler would be a new LBClient to get the retry handler of the clientConfig map, and we'll need to get the retry handler from the underlying map to be consistent with the other clientConfigs, since the default is a common (taking into account).
Brace next to class definition please.
It would be better to add a boolean flag to unkownSubsystems to true and check that it's a Pattern, right? I could check the Pattern and throw exception if it does not exist.
Should return the empty list, not null
RowKind.DELETE
@NielsCharlier there is no need to pass null and blank lines, since we don't use null for username and clientAddress
Should be debug
The JDK JDK could use [UTF_8](<LINK_0> here.
If I understand correctly, if success == true, then writeUnlockAll will be called before writeUnlockAll. If it was already called after writeUnlockAll, then it should be done even if writeUnlockAll is true, because it was the system that owns the file didn't exist. I think it was the current state where it was not.
Should we include a specific text to see which url the user can look at?
If you use scheduleDirect, you should use the try-catch-finally block.
Same here, we should undo this change
nit: this method could be private?
[DEVELOPER](<LINK_0>
This seems like it could be also called after the fireEventsFor() call, which is not needed. Might as well add a protected method at the Sweeper class, as it's only called from within the fireEventsFor() call.
suggestion void setCustomFields(Map<String, Object> fields) {
This is the default implementation.
Please remove the extra line.
return null here as well.
does not need to be public
You should use ImmutableSet.copyOf(breakable)
Can we consolidate into a single catch block?
new DirectoryException("Invalid data loading policy: " + dataLoadingPolicy + ", it should be one of: " + DATA_LOADING_POLICIES.contains(dataLoadingPolicy));
Is it possible to have a constant for this?
Why change the method name?
seems we already have a Neo4jRealmCoordinator(TransactionCoordinator owner, options ) method above. I'd be tempted to move that to the start of the factory class, and also make it the final. Perhaps we could add a Neo4jRealmCoordinator(TransactionCoordinatorOwner owner, TransactionCoordinatorOptions options ) method that doesn't require the logic.
Should we get a try-with-resources here, and remove the explicit close() call?
return ok(systemConfig.getApiTermsOfUse());
is it possible to have a null language in the delayed_capture? Probably best to remove the need for the null case.
rename to element
I think this is a bit misleading, as it doesn't really matter what.
It should be better to have the method autoGenNote(String name, String autoGenNote) and autoGenNote(String name) method
The message should be "Timed out" instead of "Timed out".
As you are calling a method you should be able to just call the other log messages, or a result should be the same. 1. The log message should have the "Could not update MoM policy on host" appended to the log message. 2. /s/Fail.
s/vdsId/cluster
In general it is not good idea to check currency directly. We should just do not need to have two different approaches: Example: "Conventions must have same currency:"
call notFound
what about java return Objects.requireNonNull(externalUserPassword);
I would use Integer.valueOf to avoid SWITCH_STATEMENT.
this fails for me, although I'd be in favor of removing it if it fails. I'd delete it in the test, leaving the blind pre-down in the current version.
Should this method return a null or throw an exception?
Would be good to move this exception handling to be done at the end of the method.
I'm not sure, but since this is a test class, I would like to avoid replacing any existing null values.
It is file, not url. how about "url cannot be null"? that would be a completed sentence
Nitpick: Generally, I'd prefer _no_ to have a redundant super() call for a constructor.
Better use Collections.singletonList rather than Arrays.asList -- it's more concise and easier to read.
Would be good to use ValueArray.fromArray(Object) and ValueArray.get(int) and correct the semantics of this method.
This block of code is quite similar to [this](<LINK_0> You can extract it to a method...
add brackets to make this expression more easy to understand
This is a really strange case. gwtorm should return the value anyway, and think we really want this special case for some other collection.
We should add synchronization block for groupMetrics and thread.
Not an exception
This is a lot of code duplication, maybe a method for each of these? I would be a lot of this here.
I think we should consider having this method public void deleteAsyncTaskPlaceHolder(String taskKey) { instead of having to use a getter for taskKeyToTaskIdMap, as long as the getTasks() method is called from the DBByTaskId.
I think this could be more readable if we returned contains(otherId) == true
I don't know the version of this PR, but do you feel it is better to test with spring?
Curious why this field is not set to null.
suggest using 'this' in it
might be useful to print it, no?
Similarly, this could be removed
What's the purpose of this change?
Should disableCliSchedule be the Action so that it can be disabled by other modules.
detach
Can you explain why this is necessary?
listeners are not notified?
Minor thing, but while we're at it, please use the while condition to make it more readable: while (current instanceof StatementTree) { if (current instanceof StatementTree) { return current; } } return current;
Can you make this private?
this can be 'long' instead of 'Long'
Get the service based on the current state, this method should return a Java Collection<Object>
Please use GTK.gtk3.10. You can check if the GTK version check is part of the Table.
How about to call super method in the context that is deliberate?
Can we use com.google.common.ObjectMapper#toJson instead?
@exper0 let's use HmRsHeader class here
minor thing - there is a constructor with just this signature so it can be private.
I would have preferred an else because the character is more specific what's needed.
prerequisite.isInitialized() =!isInitialized; should be moved inside the if block
selectedItem can be null
Remove 'public'.
why not field?
It does not look to be a good public API. Why would you need it here? Could it be just moved to the storage?
This doesn't seem to be a safe way to call it while multiple threads calling it.
Please, use cast.
While the code here is correct, consider using.map(startupPage -> startupPage.getPath()) here instead of stream()
What's the purpose of this method?
This should be called only if showMigrationEvents is null and the method is called only when showMigrationEvents is null.
Add the name of this message. Also you can use the log message as the second argument.
@nvazquez this exception must be thrown, as it is already closed with a message.
This is not needed since its already set to false.
@since 3.13 missing
I'm wondering whether the project is visibility when the delete operation is invoked. For example, the first project is called with a project as a visibility rule. I would prefer to keep the default visibility as a default value, because it provides meaningful information about the project.
The Streams reference is a bit tricky here, because it represents a poor structure. It could be confusing to have a variable that is assigned to a field instead of an object in the middle of the class.
Why is this needed?
Same here, you can simplify and remove the ternary.
do we need the RuleMemberValidator to return the RuleMemberValidator if it is not null?
bonusType can only be 1
Does it have to be public? Couldn't it be package visible only?
This assertion no longer passes if I am parsing this?
This should be a null check on the builder, e.g. if (this.groupId.getContent()!= null && this.groupId.getContent()!= null) { return "-"; } else if (this.groupId.getContent()!= null) { return this.groupId.getContent().concat(".").concat(this.artifactId.getContent()).replaceAll("-", "");
Probably should call Thread.currentThread().interrupt() when handling InterruptedException toTop
I think this is an improvement, while you are at it, could you please change the logic to use the old one?
THREAD-SAFETY This is a poor construct to use for a thread-safe class. It doesn't save (that much) memory, and can be solved by using a volatile boolean set to false as a default value instead.
This seems wrong: It should be Objects.hash(name, name).
can you make this method final?
Be careful of nullable fields!
Could you just use SalesforceAnalyticsManager.clearCaches(userAccount); from the UserAccountManager?
This method is not consistent with the rest of the class. The super class is, it should be <code>return getDefault().useBase();</code>
@Nullable
This method can be package private.
if we are not running and can you please make safe to copy the <LINK_0>
Can be private.
nit: You can use PreviewEditModePageObject(driver) method
I'm not sure if this is the right thing to do. The existing rows are for a cell when a column has only one element. I'd rather add the element to thegetCell() method and return it here.
Maybe add something like DetailAST result = node; while (true) {... }
Why?
I would suggest either leftOperand.verifyEliminateNots or leftOperand.verifyEliminateNots(), or just leftOperand.verifyEliminateNots().
Since this string should be added to the default Chinese instead of a default, it should be cached.
I think it would be better to take a look at the implementation of waitForWritesCompleted in a more general way, something like this: java public void waitForWritesCompleted(Duration timeout) throws InterruptedException, TimeoutException { if (for both of these methods) { writer.waitForCurrentWrites(timeout); } else { writer.waitForCurrentWrites(timeout); } }
nit: why is this called groupByColumns?
Same here, don't need a null check. We can put just an empty Properties instance.
please add values that you have done in the same order you declare and initialization.
There is no need to call query.query(0)
rename to file
Now that we wrote this into CrashlyticsCore, in which case logt and debug tree is enabled. Wouldn't this be sufficient?
the while condition can be dropped
Wondering if we can use a method that accepts a List<String>.
Can this be reduced to: java if (capability.equals(CAPABILITY_OFFHEAP) && isSubscriptionBasedLicense()) { return true; }
What about adding in the following cases? - use IterableStream.of(this.getElements()) - if both items are optional, we return null anyway. - use Iterators.any() instead of this.getElements().stream().filter( iterableStream ->!this.getElements().stream().allMatch(Stream::is)); - handle the null case for you (and all occurrences in this case).
This is major, so why not make it configurable?
I think the caller would do the following: java public static SamplerConfiguration getIteratorSamplerConfigurationInternal() { SamplerConfiguration scannerSamplerConfig = getSamplerConfiguration(); if (scannerSamplerConfig!= null &&!iteratorSamplerConfig.equals(scannerSamplerConfig)) { return scannerSamplerConfig; } if (scannerSamplerConfig!= null) { SamplerConfiguration scannerSamplerConfig = getSamplerConfiguration(); if (scannerSamplerConfig!= null &&!iteratorSamplerConfig.equals(scannerSamplerConfig)) { throw new IllegalStateException("Scanner and iterator sampler configuration differ", scannerSamplerConfig); } } return scannerSamplerConfig; }
Why doesn't this need to be public?
Can we align tryLock() with the spirit in the tryLock()? Also, for non-equal, you might want to consider the tryLock() call with an assertion failure, so that it's not a no-op.
The code looks strange, can you please explain why do you have copy here?
we can remove this one too
Objects.requireNonNull( checkpointMetadata)
It seems that mockStore is only used by tests, so it would be better to use AbbreviatedObjectId which gives the correct reference to the mock store.
I think there is some place in this class that looks better than threadContext.execute().
Why do we need the Won't it be enough to ensure that the setting of the CCC descriptor below is applied?
Should this be a warn?
token -> assertThat(t.requiresTransaction()).anyMatch(t -> t.requiresTransaction())
Is this method used?
you should call the method isCheckstyleModule() to not sleep for a bit the test.
Ditto, warn: No page sink provider for catalog?
Again, we should use braces
No need for getInstance(), the container can be passed
Does this class have any state?
Can be simplified to return a lambda.
@NielsCharlier there is a org.apache.commons.nio.charset.StandardCharsets#UTF_8
This is not implemented
5 or 43 seconds since a constant is protected static final int DEFAULT_DECK_INDEX = 5
This variable is not used, can you update this method to use only super.sendMessage(chatRoom, toSend);
here you can use StringUtils.isEmpty()
Don't know why it's true, it's false.
Why do you need this change? This is removing the extra ones.
Should we merge this into BitmapUtils?
Can we use the diamond operator?
This should be OperationFailedException.
Remove this
if you're using this file, I don't think it's necessary.
@Happy-Neko Same here, let's use IndexOutOfBoundsException with custom message.
I think we need to get rid of the path variable by calling the String.format() method.
Move String values used more then once to a constant.
Label should be reporting.parameter.onOrAfter
Should this be forReplaced?
As we discussed, lets change the _violations to be Iterator<ConstraintViolation<ConstraintViolation>>.
no need to check for the constructor to not be null - the method already checks if header is empty.
how about createSnapshotForVm?
please use NotImplementedException()
does this not work?
Also %d > 0?
I think this check is unnecessary? We already check for not null entries :wink:
Any reason to add this change?
old app.controller.shutdown();
I think using save(new Message(message, "", intramurals, member).setSent(true)); is more accurate (and I think it's unnecessary for other compare method)
you should be able to use the new ArrayList<Order> here.
Should be 'public'
can be replaced with: return getStudents();
I'm a bit worried about this, as there is no default value. The only reason why we get a Class, is to retrieve the Type object and then only the String is used as an argument. I mean, if we get a non-null value, then why do we need this? The only way we get a single value is to retrieve the Type object. It is a better approach to retrieve the primitive type as a Type directly. I mean, if we get a null value, we should have the Type as the default value. I mean, if we ever use as you want to retrieve the Type, then why not just store the primitive as a String?
Use the solution in the large Overall/Manage PR instead, please.
You should create a new MockSCMSource here. Then you can just set the setId method on the builder.
Since we are improving this code anyway, I think we should switch to using [StringUtils.containsIngoreCase](<LINK_0>, java.lang.String%29) instead of toLowerCase+contains, since lowercasing a string is not always the same for non-ascii characters.
Can you add curly braces please?
It seems that you can safely remove all the accessor rows and check for null and empty rows. For example, if I have just 1 field, you can still remove from the input stream and check for that instead.
Did you check that it's not already null?
Maybe you could use a [Optional](<LINK_0> to trigger the assertion
missing'return'
It seems we are still using the public constructor, so we should make the class package private.
I don't think you need to call closeBraceToken() if you are using a stream and your lambda got a chance to break the code.
I think we should move the logic of deleting index files into the IgniteCheckedException rule as well.
suggestion logger.info("Scheduling criteria to run every {} seconds (will start in {} seconds)", interval, initialDelayInSeconds, threadNumber);
This ValueProvider.convertValue() is hard to understand. Suggest removing one line to setDiscard.
We should have an else-if, even if the entityIndex is an instance of AliasedEntityIndex. If it isn't that important, we should leave it as it was, even without that call.
The convention in the codebase is to include the @Override in the signature.
public?
Why not call ExportFileName.decodeAnnotationClassNameFromExportFileName()?
Just a thought, don't you think we usually use createQuery() for a filtering by id?
This needs to use justOrEmpty as the response value can be null which is an illegal value in a Reactor stream.
Why do we need to keep the same close around close?
java return getAttributes().get(name);
I think this is wrong. The method already returns what the value of the wait has after this line.
I'm not sure what this one is going to do here, but it's better to just use count.get() without Matchers.equalTo(0)
@dmzaytsev let's call it bytes for clarity.
possible NPE? fValue is null
shouldn't the file get deleted here?
Will need to be changed to...
Please use static import for.iterator() and avoid the need for explicit type arguments.
I think it appears that Parser.xmlParser() could be used instead of parseInput()
You are not supposed to have any fields here.
You could do the same thing by doing @Test(expected =...), see above.
Is there a reason to be consistent with the original implementation?
Should those hashcodes be hardcoded? They depend on HashCodeBuilder.toHashCode() implementation.
Could you please add a log message here for the rare event that we're about to skip event? (I'm not sure if that's a common issue in this case?)
Cache this value.
don't we need to do this one in stop?
Use try-with-resources?
We could add an assertion that the value of this object is different than the expectedNumberOfAllowedRequests value. That way we would not have to test that we're using Hamcrest against the expectedNumberOfAllowedRequests value.
suggestion return "Abort and restart the build";
This should still be >=.
externalize
I think @Nuwantha you're handling the non-existent state. This is because we don't want to handle missing data in the cache.
Minor: also verify the exception message, as expected.
@mikebell90 voiced a suggestion to : 1) Why not change the REST API to return Template, and let the response entity be built? 2) Why not return TemplateResponse.of(new Response(FlowView.class, fieldTypesMap ) )
do we need to initialize ambryStateModels?
suggestion RestRule not found: '%s'", ruleId, user);
After giving it more than one argument, can you please correct the if conditions of this if statement?
![MAJOR](<LINK_1> 'Severity: MAJOR') Make "toString()" a "static" method. [![rule](<LINK_2>](<LINK_0>
return Status.BACKUP_FAILED.equals(status) || Status.RESTORE_FAILED.equals(status);
should we include at least one one to prevent someone from actually testing the size?
Would it be the correct behavior for this method to return Throwable?
Why in this case?
Consider using query(Query.getId())
return unitFrom * unitFrom.convert(1, unitTo);
use ShellIsAvailable
throws
output.writeObject(filter).forEach(filter -> output.writeObject(filter));
Please use warnf instead of error.
URL Encode
Very minor: this could be adjustedValue = cachedAdjustedValue.get();
OPAQUE
I think this is wrong. It should be called from both of these parse* methods. The Version parsing will result in incorrect behavior and it will probably throw an exception if there is no format. I suggest we use the same approach as for the other parse* methods.
Can you move this into the field declaration?
Why not use ImmutableList.builder?
I'm on purpose to have a cache on size, so I'm not sure if it's really safe to cache.
The (and ) parameter is unnecessary, you can simply use.andExpect(jsonPath(".[?('oauth2-client-credentials-scopes')].name", hasItems("oauth2-client-credentials-scopes"));
Why are you blocking this?
Yes, you can just use the constructor with a FakeProcessExecutor parameter to avoid confusion in the future.
Can't we just set without compare?
suggestion "Namespace is longer than "+ MAX_NAMESPACE_LEN+" characters");
This log statement should be removed.
Could you add one more case?
The code here should be replaced by: Ref tag = getRepository().getRefDatabase().getRefDatabase().exactRef(R_TAGS + tagName);
Map.get can return null.
There do not be formatting rules in the project.
suggestion return Objects.equals(this.getClass(), o.getClass()); The reason for this suggestion in general is that it handles nulls properly, e.g. if this.getClass() returns null the previous implementation would crash
So, we should skip this timer? Is it not that bad?
Is this really needed? Maybe this should already be removed for efficiency reasons (but I don't know what the performance impact would be of doing).
is there any reason why this method should be public?
This is probably a LAUNCHING constant, but maybe pass it into the tag param here? I mean, it's not really required for the user to see what they need.
I don't think there is any reason to use unlocking method. Not sure if it's right.
There should be a message that will be shown in the UI
Can't you make sure there are only columns here that are loaded?
I think this can be simplified to java return Objects.equals(myName, that.myName) && Objects.equals(myName, that.myValues);
toInstant not allowed in tests. We're not using Instant.now() directly, but the OffsetDateTime.toInstant().atOffset(oneOffset.UTC) works as well. In theory, we can use OffsetDateTime.now() instead, which is more readable.
It seems that we should have a "allocator" somewhere in the above PR, though that might be the better fix for "new ArrayList<String>".
return StreamletUtils.require(false, "build() in StreamletShadow should NOT be invoked");
we can make the condition more clear.
Is it always worth it?
.asList(files) is generally more efficient.
You can replace that with checkName(name) && PURE_FUNCTIONS.contains(name).
I don't think this condition is needed here
Can be better.
The order of the arguments is reversed - it should be assertEquals("%", "", result);
would be nice to have the separator in the message here ("Storage Engine and Shutdown Failed - Everything : ")
requireNonNull
I think these should be externalized.
Are these strings not already defined in string resources?
We might want to do this System.out.println in the test cases?
Do you want to accommodate value merging here? I don't believe we have a case at present where two different rules produce the same key, but in that case the implementation above would cause the latter to overwrite the former. Merge semantics would be preferable. On the other hand we can say "don't do that."
Just return the if/else as above.
should this be private?
Probably should be using System.lineSeparator() rather than \n
This should be private, and the constructor can be private.
No need for Optional here.
ServerSocket implements AutoCloseable which means you can use try(ServerSocket socket =...) {} might be better?
I do not understand why we need to catch this exception, is there a more specific way to handle it?
This method is mostly like a good candidate for a method.
version can't be null
Double check?
method name should be absolutePath
use!closeIcon()
Does this test really matter? If not, I'd prefer to remove the final keyword because it gives a compiler error.
else not needed
Is there a reason not to use super(ERROR_CODE, parameterName)?
not insecure - but no need to clutter the workspace.
this method can be private
Can this be null?
but this doesnt solve the issue, even if the events are disabled in the config eventsRefresher will be created because it will pass the first 'if' statement (above) why not adding the check for events to the line above?
why is this needed?
Safer to check if entry already exists for the given table. If yes, re-use else put new one.
I wouldn't replace this with return new QuantityType<>("0")
[optional] Consider using a [appendQueryStringTo](<LINK_0> instead of the URLClassLoader constructor.
to be aware that checkstyle is not on this line, maybe check the original code? (I know it's not your fault, but maybe we can update my refactor)
Minor: would be nice to factor the same code for the non-null case.
The exception is only re-thrown if the exception is lost. It's better to suppress it for now, or simply remove the try-catch.
If we want to be sure that the permission level property is not set, we should be set to this.permissionLevel so that the first permission is set.
isVerifiable(typeDef)
TODO found
Is this the right way to do this? Assertions.assertThat(slave.getLog().isBlock())?
All these should be ConfigurationException
suggestion assertEquals("The correct page range is from 0 to 0 to 0 to 0 for the given page size", response.getStatusCode());
since the configuration has no attribute, is it possible to make more sense as a constant?
This is a fail() in the previous version of JUnit. Why not just put throws for this kind of "Exception"?
This is returning null, not null
Another log message, can you please move it to the new exception instead of String.format? It's a bit too long for logging.
Could you rename this to setupNodes? It's not a big deal, just a note.
suggestion assertErrorEventExecutionSet(emptySubprocess.getExecutionSet(), EMPTY_VALUE, NON_INTERRUPTING, EMPTY_VALUE);
This looks weird, I think we don't expect the element anymore.
I would like to see this used anywhere, like this: @Override public void describe(SensorDescriptor descriptor) { descriptor.name("php.ini analyzer"); descriptor.add(desc.name); }
Same here, this method should be private
This should also define a commit message, for example: "Delete this catalog."
Lots of public methods should be package protected.
Do we need a builder for the various constructors?
This could be simplified to a single return statement
rename to signature
Instead of this and the withRel("related") call, I think it would be better to have a setter for the title.
Format the strings.xml file can be removed.
This test doesn't seem to verify that the status CREATED is returned.
Can you please have this test also pass?
Shall we change the variable name as well?
This data has to include 'long jobIdSubSets' in front. The reason is that the loop occurred when we have a conflict. You could already include a new line after the loop.
Can we simplify these two lines?
why you remove client?
Why not have this in the AddNetworksCommand?
I feel like this should be just something like "return gov.hhs.Mhinc.myStatic" or similar
The catch block would be already visible to the caller, so if localSegments was added to the segmentsLost then it would be better to make it clear that it's the only place, and then log.tracef
Better to use Collections.singletonList rather than guava for this.
Suggestion: Should return something like this: public void setSpmMap(String spId, Host host) { if (spId == null) { map.put(spId, host); } else { map.put(spId, host); } } return null; }
As I understand, this constructor should also have getter for some field
The type parameter should indicate data type. So that it is generic to indicate type should be generic.
Please use Collections.unmodifiableList here.
the whole line has to be a constant
I think i=1 should be part of the "for" style, not the "for".
You should check whether the type is assignable in all cases. Just, when the projection converter is disabled, you will call isConvertedTypeAssignableTo on the *raw* converter. Note that your tests didn't fail, so you're missing a test where you try to pass the wrong type to rawField(String, Class).
Please add a check Objects.requireNonNull(supplier, "supplier is null");
I would prefer to have a insert and the details as parameter to this dao call. Also, it does not need to be protected against the public API. This method is only used by the services of the API class.
I think "saved search" is not necessary, could be made more clear to call it rather than put this method call.
Can be replaced by a stream : suggestion return providedNamespace.stream().filter(c -> c.getQualifiedName().equals(c)).findFirst().isPresent();
Why is protected?
Since forceClose() is a method that is already synchronized, I wonder if we should do the work in the start() method instead of here. The base class still uses the connection, and is not the same as the start() methods.
Could we return Locale.forLanguageTag("en-GB").toLanguageTag(); instead of relying on defaultBrowserLanguage to be null?
I don't think it's a good idea to use "" instead.
I think that we need to cache the results of the query for every statement.
Will the parameters need to be _public_?
Move this to loadRootFolder
This code is very hard to read. I think it would be better to have: java if (subject == EnvironmentContext.getCurrent().getSubject()) { return subject.getUserName(); } else { return nameIfNoUser; }
If you want to store the style name, you'll be able to change the line number. Personally I prefer the combination of div.setClassName(diffTable.style.padding()).
judgmentSearchResult.getJudges().stream().collect(Collectors.toList()) could be replaced by simple judgmentSearchResult.getJudges()
Why do you return a Principal here?
This optimize method is called only in the postBuildIndex() method. This should be updated to use the actual config in the callback method instead of in the first step.
What if type == FileOperations.INSTANCE?
Why "Whatever" here, is this a left over, or final?
Spacing is off here, Ctrl+Shift+F this method is missing
What if AccountService is closed?
i think this might need to encdoe the name and bitmap type too.
Log the IOException here
Why is this final?
When using a byte[] buffer, I believe we need to capture the returned byte count because it will likely be less than the full array on the last read. As in: int byteCount = 0; while ((byteCount = in.read(charArray)!= -1) { byte[] byteArray = new String(charArray) at the end; byte[] res = new char[byteCount]; while (out.read(charArray)!= -1) { byte[] byteArray = new String(charArray) at the end; byte[] res = new byte[pos]; out.write(byteArray, res); } return out.write(byteArray, 0, byteCount); }
rename to var (and similar to isSimilarMethod())
Use assertFalse()
I think it's better to have a test that validates the timestamp, rather than pass empty string.
This should be: if (!(c instanceof RevCommit)) { initializeShallowCommits(); }
Throw the proper exception if something is not supported: - NullPointerException if frameID < 0 or if frameID > 255. - IllegalArgumentException if frameID < 0 or if frameID > 255.
Same as above for otherNonCodedConceptUuid
I guess that MachineLocation (which is created from the machinesToTearDown), shouldn't we instead let the thread determine it and close the socket?
Probably more update to "Cannot loop this lock."
Does this mean we can use the existing planner even if we are not returning null?
MemStore is used for tests, so we need to implement this function.
Add slotName as argument to waitForVideoStart
You don't need to call.getValue() here, just return it directly.
Pull "cache" into a static final variable to avoid expensive expensive computation and expensive operation.
I would prefer if you change it to return an Optional instead of an Optional. Prevents accidental NPEs if the method is not installed but it does not matter.
we should have static import for these
This is not executed for FPs, as it's driving the analysis.
hope you know the difference between this change and the other patch?
why don't you return null?
I think we should be checking the tree count in the challenge of the TreeWalk and perform a atomic operation on the tree in the case.
This should not be registered on an HC.
does this need to be public?
The IF clause is not needed and **else if** is only needed.
The second parameter can be ignored.
This should be package private. Also it's not used outside the package
Should we remove this check and/or let the thread do the shutdown?
I think we have a race here. In this case, perhaps we can make the preloadContextCache() synchronized? Also, instead of a concurrent map, perhaps we can synchronize on the threads as well: private synchronized void setContextCache(List<Class<?>> classes) throws JAXBException(Exception e) throws JAXBException(Exception e) throws JAXBException(e); The reason I say was that the context was closed. I think this should be guarded by a "cleaner" check.
It would be better to log an error message in this case.
+ desc
any reason for the double slashes here?
safeName -> shouldEcoreOperation.getName()
LexoNumericComparator looks like LexoNumericComparator.compare(map1.get(key), map2.get(key))
What happens if someone calls stop on a lock?
Should we consider printing the partition id here?
This should becases/EmptyCase.bpmn2
Style-nit: I'd have implemented this with two-space indents.
There's a strange way to make the call to super.merge(other), since this in the constructor is the only other call to merge.
Add a message to the assertion.
as above, how about adding the one logger to the logger and in the getter?
please reuse the constant
It looks like a paragraph and an empty line should be removed. I think it can be removed.
@eg04lt3r we should use here method for such a method, something like this: @Override public void accept(final Socket socket) throws IOException { if (this.origin.accept(socket)) { this.origin.accept(socket); } else { this.origin.accept(socket); } }
Minor: This is not thread safe. There is a cache..
please add final modifier
This should be done in a for-each loop.
We should probably remove this constructor and make it package private.
I'm not sure how this should be translated, but if it does, it's still a common status so should be a FAILED like "unknown".
This check is unnecessary, just the outcome is controlled by the KeyPressCommitRunnable.this.toCommit.equals(getEditorValue())).
nit: suggestion this.inputOperators = graphSpec.getInputOperators();
Don't use a local variable via reflection here. suggestion assertThat(defaultR2dbc:inbound-channel).isEqualTo("dbc-channel" + "-adapter");
o
We can also validate the cluster name?
Please add cmd.getNetwork() to the log message to assist with operational debugging.
Don't forget to update this
suggestion @NonNull InputStream stream = index.read(); return stream == null? null : stream;
Don't create new line.
Please check the list of values in a list and see if it's empty or not.
This is a stylistic nitpicky, but I'm not sure this is necessary.
Maybe log the error message here too?
Same here regarding the messages.
Can be moved to inside the if block.
You can make this method private since it's only used by this class.
since capacity is not a real capacity you can use a LinkedList
Diff should be private.
Is this case because there is no rollback()?
This should be done in the constructor.
We don't have checkNotNulls for the parameters in the null check.
If we are the first 'for' loop we should account for the annotation's length for each annotation.
This doesn't work correctly on the case where multiple files exist, the user want to delete all the files.
nit: those names are a bit lengthy, also it would be good to extract those names in a constant.
Java Charsets.UTF_8 is default charset, not a charset.
Is there a reason for the default.directory_provider to be a string?
Can you make this method private?
I think calling an Iterable here is more expressive so it's possible to use a StreamThread.Range of a count. Maybe I'm missing something but it's optional.
Here and below: public PullRequest getPullRequest(String payload, GitHub gh.class) throws IOException { return PullRequest.parseEventPayload(new StringReader(payload), _getClass()); }
Why not just: return responseTypes.stream().allMatch(s ->!s.isEmpty())?
I wonder if we should do this in a different strategy. For example, a retry will wait until we're in the background thread that will be interrupted, but we're not in the state of the next request.
Why not return;?
Minor: make it private.
What happens if Environment.Variable is a byte array?
Why is this a public method, if we already expose the DiscussionThread.getIdentifier() call? I'd be a little more comfortable if we could work on it just once here.
ConflictException.class.getName() should be ConflictException.class.getName()
This can be declared final
s/At least one interpreter should be declared/affeinely/
static import utf8Slice
You can also verify the initialization of the UserManager.
are the sortLeftOverAgencies in fact the unsorted ones? I am wondering if there is a better name for what goes in this list
This should use NotImplementedException instead of NotImplementedException.
Is this an error condition or just timing? When will it happen?
I'm not sure if this is needed or not since the list is only used for ghost block. The list will be created in every single host.
dataTypesPage.disableShortcuts();
suggestion info("Consistent ID: " + ignite.cluster().localNode().consistentId());
@manuelplazaspalacio I'm not sure what this method is for - you should wrap this in a try/finally clause, because you're not closing the resources. (I don't know, but this makes it very easy to read it, so it would be better to combine the code below it with this.getClass().getClassLoader().getResourceAsStream("warnings.json")
This toString() isn't needed, we can use info.
Consider renaming the method as well, i.e. MarkupFormatter
Make the event removeDefaultFilter method synchronized
Please extract this out to a method.
This function is called from multiple places. It should be private
errorMsg is used in UI messages, I would suggest to use NLS.bind() here.
Shouldn't this be: java } catch (InterruptedException | ExecutionException e) { Thread.currentThread().interrupt(); throw new RuntimeException("interrupted", e); } catch (ExecutionException e) { throw new RuntimeException(e.getCause()); } catch (TimeoutException expected) { throw new RuntimeException(e.getCause()); }
this is what I meant. why do we need to remove action?
why the need to declare a var?
I'd prefer to keep the firstNonNull.
I think this should be error
Please add @Nullable to the constructor.
can't we use the empty string here?
You confused "expected" and "actual". Usually it's first "expected" then "actual". Please change, to avoid missleading Error messages" As I see it, it's in the whole test-file
Need to remove codec from here too, right?
I think that this method could be left out of the isGroupAdmin method.
suggestion if (cacheCommand instanceof FlagAffectedCommand) {
:bug: This is now a no-op for owning elements.
I think 0x is a valid IPv6 here
there are two things here. If the container is unavailable you might get an NPE
This should also be in the synchronized block
Remove all instances of from on the next line
You could do this in one line: return slice!= null? srcBuf.slice(srcIdx(offset), length()) : srcBuf.slice(srcIdx(offset), length());
I haven't tested this, but what happens if the user is running init on an existing site, which already has the Verified flag, and he selects "yes" on this option?
Can we not be more specific? The exception message is either a RuntimeException or a generic one and let the caller know if that is this exception.
It should be unique across maven repo. Please change it to system.properties similar to "win-x64/node.exe". The same applies to all other node directories.
note from discussion: woud be better to probably only check from item.toString to null
Can this be LogicalServerStateMBeanImpl.class?
Loud be _callToActions = callToActions;
Please bring the braces back.
ShellIsAvailable
Another place where we could note that the boolean is unused.
Could be final?
Shall we rename this to something like supportsDefaultSynapseHandler and use it in multiple places
point here is to clear entries if some were removed compared to previous state, would selectedIds.containsAll(fSelectedIds) remove more clear cases? (replace the selectedIds by a hashset in that case) Also, the actual clearing / update happens at org.eclipse.tracecompass.tmf.ui.viewers.xycharts.linecharts.TmfCommonXAxisChartViewer.UpdateThread.updateDisplay, should this code be there, to avoid the clear/update pattern in child classes?
I wonder if not this better to just return the existing fields with as a List<>. This would simplify some code and as well as not too much to read.
Needs null checks
suggestion Timber.w("Null formController");
Why change this?
Are you sure the default is what we want to do?
&& apiTokenValid.equals(request.getAttribute(BasicHeaderApiTokenAuthenticator.class.getName()))
Make non-static
this test is not work correctly. You need to do something similar to a junit test that checks it.
These should be declared as constants.
Should be checked just in case.
This is the replacement for [this](<LINK_0> We might want to consider --non-interactive at least.
This doesn't seem to be backwards compatible.
@m-g-sonar you can drop this if statement and use the  expression on the previous line.
Can you rename this method to something like setOrHideNodeActions?
Received *tries* is not changed. <review
This should be final
@ekondrashev Too much indentation for lines 61-64, move them back four spaces.
non-deterministic order. Could be better to use Collections.emptySet() here.
No need to go through a map here.
nit: Assertion could be made static
checkNotNull?
Can you make the qualifier string a constant?
Why do you return null here?
use exot in message
Shall we add some log message here that the key is the same as key.getTaskName()?
Suggest unindenting for clarity: if (!Objects.equals(mIfaceName, route.getInterface) { return false; } int i =...; if (i == -1) { return false; } mRoutes.remove(i); return true;
@mehturt Maybe rename this to something like isRingTimeFromWorker or something like that?
I'd prefer to make this so that we don't have to expose the API and use the annotation in the beginning.
We should throw a runtime exception here.
The logger could use this pattern for logging.
nit: I would prefer Jenkins.get().allItems(AbstractProject.class, i -> i instanceof TopLevelItem && this.equals(i.getAssignedLabel())))
minor static import isWhitespace for readability
I think we still need the method name for the proxy here and then throw an exception from the call.
I think you want to keep the original implementation here.
start and end of thing?
That's a good point, but I would prefer 'java.util.Map#entrySet' to be more efficient in this case.
s/n//
You forgot to specify ImmutableFlyingData.of(key, value, ImmutableFlyingData.absent());
suggestion
The rate limiter doesn't need to be created by the rate limiter. RateLimiter are already performed for each rate limit, so no need to do it twice.
Collections.singletonList(internalArray()) is much better than newArrayList(internalArray()), consumer);
I think I would prefer something like: if (disableCaching) { persistence.disableCaching(); }
Again, a constant or something.
Shouldn't this be an error?
still need to set it to final
minor: this should return Collections.emptySet();
if(bases.length <= 1 )
why not just delegates.stream().map(NotThrowingParser::of).filter(Optional::isPresent).findFirst()? That way we can avoid not have to create the stream and the find method directly.
For this to work, we need to create a new instance of Context in the callback, and close it in here. Otherwise, this will create a new Context each time, and will keep the original one in memory for all the callback.
Please use more descriptive names, like "finishColumnsFirst" or something more descriptive.
Use getRimberrr()
Maybe we should use Objects.requireNonNull here?
Could we add this to TextUtils.join() or String.join(", ", cols) to make this clearer?
NotBounded is actually the default.
java segments.stream().filter(x -> Math.abs(s.getSegmentMeanInCRSpace() - 1 + meanBiasInCR) < 0.1).toArray();
This should be private, since the constructor is not static.
Why are we keeping the return type of the enum? enumToBinary returns a single enum.
I think this shouldn't be removed. When you receive changes from the server (new note, deleted notes or updated notes), the widgets should still be updated.
please remove empty line
This if statement is not needed.
I think this.url + this.url + firmwareIdentification
@sebing assertFalse(containsClass(TestLoggingEventListener.class, eventListeners)); was already imported.
This should be using Locale.ROOT in order to prevent issues in ui structures.
return itemClass.isAssignableFrom(MavenModule.class) || itemClass.isAssignableFrom(MavenModuleSet.class));
Could you please Camel case TextArea.
add a message
Please throw notNullValue() for this
Why do we need this list rather than just return true?
Can you change this to: return this.properties.getProperty(name); or this. return null;
import this
Make this warn level.
Capitalize Thrift (or remove the word)
In other files we use [this method](<LINK_0> where this is not necessary.
Should be List<PlanNode>.
why public? Are we planning to use it outside of this class?
Shouldn't this return Flux.empty() instead?
I think this is a good idea to use something like: menuItem.getTitle() (note the label, etc)
I think you can remove the "iterations" variable.
Why not make this an explicit guard? It's because the method is synchronized.
List#isEmpty()
Can be wrapped into an Object.toUnmodifiableList() call.
Is it needed to call dismiss() here?
If now, is there a reason for not putting this inside the class?
Why do you need to catch Exception here?
This can't be null, it's Nullable..
> 0 is the default, it is always 0, so you can set it to new GregorianCalendar(2001, 0, 1).getTime()).toInstant()) > > 0
type inference (synchronized)
public?
I would rather have this as : new Thread(this.group, "cucumber-runner-thread-" + this.threadNumber.getAndIncrement(), 0)L); in the constructor.
I guess you can replace all these by java if (event instanceof TimeEvent) { return ((TimeEvent) event).getValue(); } else { return stateTable[status] }
This could be replaced by: return element.isValid()? null : element.getDeclaringExtension();
Please check GoInspectionUtil.getExpressionResultCount(e)!= 0
Make sure you have your own quick list of TIME_LEFT_UPDATER entries.
this method can be private
Please verify the returned command.
note that the reason for test is now to not use public.
Lets use IgniteUtils.waitForAsyncCompletion()
We could add some logging in the next test, to make sure it fails.
No need for this.canvas.
nit: this could be more readable by using ternary operator?
minor: You can use Collections.emptyMap() instead of creating a new empty HashMap.
I wonder if we could use a method reference and method reference instead of stream + filter here
the name of the two expressions could be better : ((JavaSymbol) s1.isPrivate() && ((JavaSymbol) s2).flags() == (JavaSymbol) s1.isJava();
Should this be incAtomicLong?
Can we not verify that the text boundaries are correct? Verifying that we simply set the boundaries on the text decorator is better than nothing but can we not ascertain the values that should be being set?
For a ton of discussion, should we use a different Error type (e.g. RuntimeException) instead of Error?
I think the conversion of the AssignmentExpressionTree to the assignment loop is rather unnoticed.
There is no need for this check, since we're returning an empty Locale.
Guid should be used here, as Guid
Please, do the cast in the previous line, or add an explicit null check.
Please implement toString() to provide debugging state information for debugging purposes.
if service is not present it should throw exception?
I'd just use a lambda here: java.util.Optional.ofNullable(metadata).map(FunctionResolution::::::).orElse(null);
I don't think it's worth putting this into the response message. It might be easier for someone to debug if we ever add a successful response message.
suggestion assertSignalEventExecutionSet(emptyTopEvent.getExecutionSet(), EMPTY_VALUE, CANCELLING, EMPTY_VALUE);
it's weird that this is not null delimiter, is it preferably the same as the list text?
nit: consider testing with something more than 0, as it's not worth the spaces.
boolean?
It looks like the subtab of the new executeCommand() method is missing, if the parent command is already running, cancel it will not cancel the command.
we should log a warning here so that users who have wrong permissions on /.gitconfig by mistake have a chance to detect the problem
I don't think we should override the responseStatus() method to return a RepeatLastCall. This method could then appear in the runOnce() method and have it return true. The implementation of repeatUntil() doesn't seem to handle the case of an exception.
@CheckForNull
![MINOR](<LINK_2> 'Severity: MINOR') Remove the redundant '!unknownSymbol!' thrown exception declaration(s). [![rule](<LINK_1>](<LINK_0>
Is this method supposed to be called 'categoryInput'?
@sebing please use RtReadme(this.request) here.
You can use getString(String, View convertView, @NonNull ViewGroup parent) instead of calling get(int position, View convertView, scope)
This is unnecessary, parents can be null.
String.format?
Don't need this assertion otherwise.
should this be public?
This can be a a json string, i.e., is a text, not a text?
I would prefer having this method take the calculation and use it in the new methods: checkForRemove_ = event.isValueTo(this);
This should return an Optional<RequestCreator> instead.
was this meant to be "UNKNOWN"?
Don't do this. Please static import.
For consistency, this should come from the Builder
Please extract the query variable to a local variable and use it here.
This should be more verbose: more concise with 4 spaces, code.
Use StringUtils.isNotEmpty instead
What do you think about.clear() instead?
maybe we can do something like: if (messageHandling == null) { return null; } else { return handle(messageHandling); }
A great deal we can remove these unrelated changes when they are no longer necessary
Do you really need a mock here? Couldn't you use an instance of MetaDataService instead of using a mock?
This does not require calling into the constructor, it is changing the default constructor.
We can remove this log.
If we handle the case of a specific type of TupleBatch, maybe we should have a common method to represent them.
Can we not do this in the constructor, rather than in the constructor?
Please add curly braces
declare throws please
Do we need a throws declaration here? It seems to be inconsistent in the existing methods.
Could also be considered a invalid state (e.g. currentIterator().next() == 1)
warn maybe? and not sure if we want the exception. maybe just the message?
IndexNotApplicable.
Why is this returning null?
why not return iterator?
getContentLengthLong() is a bit of a long. Can we add a limit to 1x -1 and return it in getLength()?
should this be moved into the first catch block?
To enforce immutability, I would prefer to have this logic in a second place as it is not needed.
Let's add a line below the 'if'
rename to pathObject for clarity
This isn't an error. It should be logged at least.
Should we change this to equals and hashCode?
does this mean that symbol.gSymbol() will be null?
Maybe check the message is better? It looks that this test is used without any assertion
addFailedAttempts is an element of the list of attempts. Should we just addFailedAttempts to invalidLoginAttempts, and removeFailedAttempts from addFailedAttempts?
Is this thread good enough?
Nice, but I guess a more readable method would be (String.endsWith(getCodecA())
can be inlined
error message should be more descriptive. Like "ws not ws instead of wss. No SSLSession available."
I don't think we should expose this method as a public interface. I think we should unify it
I looked at this and it seems you have an issue.
This should be package private.
forgot to change this to just test the parsing fails
Why there are no logic here?
all these literals should be static final
suggestion if (StorageService.instance().isGossipActive()) {
@yingsu00 Can this method be implemented as: String result = sub.replace(message);
static import
Should this be using the constant ENABLE_MANAGEMENT_FILE instead?
We should probably check for null here
To be safe, you should throw an exception if name is null.
Same as above, please can be package private.
@aljoscha We should probably use [try-with-resources](<LINK_0> on that to avoid a warning
Suggest to use 'final' for local variables
can be putIfAbsent
suggestion.until(() -> j.jenkins.getQueue().isBlockedByShutdown(task));
Use || instead of duplicating the logic.
Do we need a catch block for these?
Do we want to use SparqlUpdateHelper here?
Gson.json() instead of Json.createObjectBuilder()
Small suggestion: " This function is not longer useful, use send_resourcepack() will return a valid merge action." + " Proc older server in this patch, use send_resourcepack()"
return japanese2Romaji(text);
this is going to get the cache for the key in the map. Instead get it once before the map lookup, you can do something like this: if (cache.isCacheable()) { cache.remove(key); }
Is this a private method? It's only used by the super class.
a)valid: if (value < offset >= (1L << readNofBits)
I'd rather delegate this to the delegate, so that we don't have to expose a public method, or should we use the ForwardingAndAdvertise or similar name?
This is a legacy expression - you should be able to directly compute the isSuccessfullyParsed in order to save the isSuccessfullyParsed call
This is kind of confusing. It's not clear what the point of the task is ton, but it's given that the list of clampleds is blind.
This is wrong. Context is not in the app context. You can use Context.context() to access the instance.
The same Arrays.stream() can be applied here as well.
I think this needs to check if the zkey has a version name and if its not removed (to get a relog notification) getBlocks that dont add a version name.
Could you please remove this? I think there is a case where executionMask is an int and not mask.
Please update these string to say "developer mode" instead of "debug build".
misspelled. plus why are you removing the alias anyway?
Why are we calling Keywords.getRawSignature() twice?
There is no reason for public.
Check for null instead of "something <operator> null" convention.
suggestion return File.createTempFile("OPENNLP_DATA_DIR", StandardCharsets.UTF_8);
Use parameterized logging instead of string concatenation.
Remove
I would prefer AssertionError if all methods that return void, and wrapping the IOException to an AssertionError if the exception is not a RuntimeException.
> Passwords
Please use parameterized logging instead of string concatenation
It seems like the min and max should be there is no change in the configuration. If the sleep times out, then we should consider adding a new sleep(0L, max) to the constructor and make it easier to see the code easier to read.
I don't think we should have this if. The call to setSSLParameters is every single parameter.
it would be better to rename the constant to StrategyResolve
H-m. Why do we need to call ThreadPoolTaskScheduler.shutdown() in the actualShutDown() instead?
That would overflow maximum instructions per method before the size of the class. Can you check it again?
We can try to wait for the whole panel to stop waiting for a single panel to complete.
Please remove unnecessary whitespace
I'd prefer throwing an exception from the code, and remove all invocations from the Accumulo API. The main reason is that the method throws InterruptedException, rather than the main one in the CI server and will never execute. For example, if you're using the Java 7 API, and you get a NullPointerException, there's no longer a way to check if the code is running and remove all invocations from the database. And since the main reason is that the exception will be thrown by the main UI thread, rather than the UI thread (which will maybe be the case).
This function is very similar to the sanitizeForRichText, can we make it simpler?
Should we throw UnsupportedOperationException here?
Should we log errorMap here?
Can you move this out of the if block?
Why don't you just use.getDurability() instead? No need to define a separate long type for this.
If customers send retentionTimeout is less than 45 days, we should use that value instead of 45 days (default value). This is to let customers have a way to expire earlier than the default 45 days. For cases where they deliberately send test metrics and then want to delete them from discovery after a week. The check we should have is, to cap the retention timeout by default.
@adyach are you sure this is not null?
removeRef()
Nice catch. At first glance this looks like the idea behind java.util.Objects.requireNonNull() Maybe java.util.Objects.requireNonNull()?
just a note here - Assert.assertCounts
the field should be removed as well
The memory alignment should not happen in this case since the priority is unknown in the case when it is a constant.
Can be simplified to: suggestion Object instance = this.constructMessageHandlerInstance(msg, new ArrayList<>());
we could do not create this throw new IOException.
I would add a method singletonMap(String, String) which does the null check
In this case, we should use the same address as the current server.xml
+2
I think this is fine, but I wouldn't set it to FALSE here. One more well, right?
How about using MetricsManager.meterRegistry() for this?
How about computeIfAbsent?
Can't we use the parserContext.getWriter() method instead of the lookup as well?
I'd rather we test the case where the TIMEOUT is not the last argument and returns a value.
I would also do this: java if (coll!= null &&!coll.isEmpty()) { return; }
Is this catch needed?
if it is not null, we should throw here here.
this.intersectingTypes[0].isClass() && this.superclass().isSuperclassOf(otherType);
log the exception here.
This is now also in requestPinReset I would expect to do: this.requestPinReset(userID, confirmationCode);
assertSame(x, y)
See above about formatting issue
You don't need to do this, as you can make a method that returns the same object.
Take a look at [Java-82](<LINK_0>
Doesn't this NPE is thrown on any address?
Returning the first endpoint may be null, this method is not called from anywhere.
@vmaletta add a default case
Hmmmm... now that you have something complete like this.. we need to think of a way to reuse this logic into ActiveMQServerImpl:: displayDetails and this is used in testing framework.
I would add a "log.debug" here too
negotiate?
No need to retry if storeExists is null since we cancel it.
Should this be "readBadlyDistributedFile"
See above. If this is too long, you can just use one function and leave it in for the other methods.
You might also need concurrencyGoal here, and in the other tests?
Can we use the URL in Utils.java?
What if one of these is null? Shouldn't we return false if it's not?
Could use StringUtils.equals here.
I was thinking the idea would be to move the auth check inside the configuration object. Configuration#get() to be able to do the check and check the config against a given value. I think the best option would be to only do the check once, and then make the call the method private. Note that the configuration object will never be created with a bad config, where you have the default and non-default parameters to the configuration.
I think you should have done this at the end of the method, not at the concrete level.
you do not need to cast it in order
Returning isActive from a method is not necessary. This should only be called by the time of the function.
suggestion bean.setSourceSet(new HashSet<>());
Idea with a small helper method and reuse it
what if you have a table to execute the actual write?
if you want to pass the plugin name in the plugin it will be to the cli parser module
This should be private.
if you prefer to use Tomorrow, you might also consider replacing "-rc.5" with "-rc.5".
We do not use 15 levels for constructor arguments
Shall we just use PRESTO_CLI_HISTORY_FILE instead?
The combination of "force" and force is not clear to me. I think this will return true if "action.isForce". What do you think?
This is a bad idea, you can't immediately check it when JdbcSinkConfig.validate() is called.
The response headers should be stored in the <LINK_0>
These two methods don't seem to be used. Why not just return the CompletionStageAssert<V>?
pls format (>120 chars)
do you really need to log every time? you could just put it in a variable
This change is not correct. If i understand correctly, parameter name and parameter name are guaranteed to be the same as "listener".
FAILED_ENV_STACK_CONIFG_UPDATES_EVENT.name()?
There is no need to invoke toString() in each method. What you could do is make this method private?
Same here: should we throw this exception, not just print it to the console?
How do you feel about this one: return timeoutCache.getIfPresent(TransactorID.getNodePath(config, transactorId))!= null
I think we can message the two methods with single call context. The single call context is really not required.
The aforementioned "never return null" rule would be good for all the string getters here.
Just a thought. This testConnection() method can be private.
Another nitpick: Should this be synchronized?
Should be a constant.
This message could be updated in a private static method that is called many times.
I think this part is redundant with the settings in setup method?
getTitle() is redundant here, it's not being used.
@garydgregory I think this is what we want.. No need to call updateEnablement() here since it's done in view.
No need to change this.
I'd use the same suggestion return Flowable.fromPublisher(acl.publishEntries(filter, false, false)).map(MarshalledEntry::getKey).collectInto(new HashSet<K>(), Set::add));
It's better to use constant
PageObjectLogging.log("appendNewLine", "text "+content+" added to the source mode in new line", true);
nice - thanks!
Maybe make this private?
this can be simplified to throws IOException
return new Config(configInput)
MessageQueue.RegisterBankAccount_PushMessage
I think this test might be more readable by moving the code to a separate method that takes a string and a StringBuilder object.
This should be a RuntimeException, since it's more like an exception than a user might be able to suspend the process.
you can use the new Hashtable<String, String> props = new Hashtable<String, String>(context).toFile();
should this be the byte array?
Please extract getRoles() into a variable and use the method reference here, since it's not a getter and it's a bit confusing to see a side effect of calling this method twice.
Use assertFalse() instead of assertTrue() to provide a better error message.
why is this void?
I would use to have: java/util/duration:java/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration/gjava/duration
Probably better to use the more basic filter here. Something like.filter(shape -> shape.getDmnElementRef().getLocalPart().equals(id)).findFirst().orElse().orElse(null);
@JonathanGiles, was there guidance in the past to use the collection type to find the language?
We should not invoke this if mHasGmoStatisticsKeys() is already being set.
This is not autoassignment, right? reassignmentsInfo could be used as well.
Maybe add a static import for this?
You should use some sort of synchronization here for simplicity of the lock: <LINK_0>
Guessing that this should be Object?
Could be simplified to java if (value == null) { return extractErrors(form); } return extractErrors(form);
I think we should be able to replace this with a regex.
Please use log.error instead of logging, otherwise we are going to have information about which role value was not found.
should we also log the corresponding log message in the other log files?
This needs to be the last line of this method.
There is only one log for the _all_ files. This will log the entire file too, if it has a certain number of entries.
"0"?
We need to be careful with this as well. Was it intentional to have a separate shutdown method?
Slightly confused by the code if the hashtag is the same as the one we have in the code. Can we just move it to the if block and do the checks? The code seems to be easier to read.
Put this in a static member, as it's used twice.
Doesn't this mean we can't verify the z3Loads at all?
I think public is not needed here
I think this is a better place to initialize the executor (the task queue is not null). Otherwise the refresh will result in a lot of warnings.
Why not just use fixture?
List<String>
it isn't a matter of personal preference, but I would prefer a method called skipInvocation() that would take care of some boolean parameter.
Don't use toStringHelper as we avoid good state!
@vilchik-elena Why not just get the inserted row from the function and return it instead of having the unused column?
There's a "this." prefix elsewhere.
Can we and should we check that indexInterpolated is never null?
Minor: path.hashCode() can be made non-null.
The check should be done before the super call, not here: org.eclipse.emf.common.ui.viewmodel.setVisible(boolean)
This is not directly related to this PR, but is there a reason not to use it in this way?
Did you check this prints messages with decent grammar? Not sure, but did you mean "cluster name... service name..."
for tests to check we can use Collections.singletonList() to make sure we're not null-safe
remove local variable
Let's check the exception message as well.
I'd add braces {} to this even if it's a single line statement.
Do we need the null check here?
Again, I think this should be: throw new UnprocessableEntityException("This group cannot be patched.");
Wouldn't it be better to call call super.createPatientDiscoveryProxySupport() and then call AbstractPatientDiscoveryProxySupport?
Why not to use random.nextLong()?
Please use the static resource method, in all the classes it was present before the handling. The intent is that you don't need to send this exception, and you can assign this to the app with the warning.
@xupyprmv put all this literal in a variable and remove @xupyprmv
no reason to explicitly set to null, its default behavior
Not to be a little female dog, but generally good style to include the else in the same line.
Add ioe to the exception.
nit: make this file a final static String and use that instead of calling getSamFormat()
Minor: can be private.
Can you please add isDebugEnabled check?
We should only catch Exception here, and then handleAuthenticationFailure method in the catch clause.
The parent.list() method should not return anything, and throw exception if the id isn't valid.
It would be better to have a method checking correctness of the lawJournalEntry that could be used here and at the implementations of the lawJournalEntryFactory.
I'm not sure if this works. Can you explain me why do we need this? I mean, this operation should be pushed into the KeyboardShortcutsService.
casting to OnkyoConnection?
You should be able to do this via the following: long response = executeCommand("SIE\r\n"); long currTotalSize = Integer.parseLong(response.substring(0, response.indexOf(' '));
checkNotNull
We can use getPathName(snapshotRoot) as it's only used for the dir name, right?
I think you can avoid this method by using the Concur ReportService#getOptionals(String) method to determine if a line is a uthoritative cause of the value to be null.
PS: If this is what the order is important, the test fails.
What are the implications of checking the strategy from being null?
The AbstractHistogram is already a a Histogram and has the same methods to be used.
Yup
Did you mean to use null?
this two things are special afair cc @lanwen
With the JVM and the JVM can be changed to use an instance of ListeningForDao.
Between should be beforeCall.
This can now be deleted.
In other cards, the title is protected. We should add some checks here to make sure the constructor is only called by the title public DetailsService.java.
currentBundle.getId() could be null. Please add a check for null before calling getVersion.
we can make this a static inline class
I think it should be: java if (testFramework.isTestEncryption) { testFramework.setTestEncryption(testEncryption); }
analysisMetadata.setOrganizationsEnabled is already called on line 117 and it really does not matter. Because you're not calling it 3 times, it's always the first time.
Should probably be a warning or warn?
Redundant space after cast.
No need to call copy() here
add "this" qualifier
Why did you change this to return Color.RESULT_OK?
Why is this second?
better return action!= null && doExecute(action, false)
suggestion if (prev.compareTo(shortened) >= 0) {
messageEt.getText() is null safe. You should use a TextUtils.isEmpty method.
Should remove, and use similar functionality in CoreAuthenticationTestUtils
I think we have some constraints regarding the target URI? (e.g., exactly one? at most one?)
Move this logic to a method and call remove
nit: maybe Base32. encoding.base32().decode(base32);
should be synchronized
no need for public
Would be better to check for null for the field instead of having to be public.
I would suggest to rename this as HSMGetStorageDomainsList, and use it here and below
You'd better use {} for the string message
Suggestion: Once you are testing that the list has size 1, you should test it against the public list. It will be much easier to understand if you do something like this: java public List<Ip> list() { return List.of(publicIps); } public List<Ip> getVds() { return List.of(publicIps); }
I'd prefer to use a stringbuffer instead. We've got a lot of object in other classes that aren't using it.
Better to use isEmpty()?
Do we need to use BlueIdentifierGenerator here?
Unnecessary call to super
this can be simplified to probeIndexBuilder.reset();
Could do project.getGroups().forEach(Group t -> tags.add(t.getName()));
Again, you're right, but I was trying to point out this block.
Should this be reused.
the vds load blanacer
This assertion should also be inside gcDeletedTarget
No need for this method as it's public
then test will fail?
Why is this needed?
Maybe just make this private and move the declaration out of the ifs
why 40 as a limit?
You have the builder pattern already for this.
If you call this method 3 times and.clear() you should call it in.finally block.
suggestion createGrantAuthorization(PROCESS_DEFINITION, ONE_INCER_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY); Both works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.
The following code would be better readable if you change the method to be such as: @Test(expected =IllegalStateException.class) public void validateField(Widget field, FormField.class) { FormField.class.thenReturn(widget); }
Why change this? Also can we set a timeout to 20 seconds?
i think 'public' is necessary
Cosmetic: Braces on new line, please!
Should be _f_.bind(o)_
why log an error if the user does not have enough information. Should we log just at debug?
This is where you added the listener to setViewDataFromServer
adding a java doc please
Use BranchDef.getSafeConstructor or change this to an interface.
Why two separate lines?
I wonder if it would be better to print the stack trace before the test?
Should we just use dpToPx instead of getResources().getDimensionPixelSize()? We can remove the extra variable and make it a String constant
Use map() with filter()
Oh, update, and this one is a version view, do you have a Mac to do it? If not, then call create a new one, while it has a version version.
+ desc
remove this.
Please add a second sentence here, e.g.: "Dosage Adjustment Percentage: " + nDosingInstructions.class"
> Sorry, I missed this for the first review. You can use mObjectsToBeDispatched.map(Object::getName).orElse(null) in the method to make it clear what you are doing.
Why not just'return true;' like in the other apply?
This is a little weird if you do public String[] addFilePathToArgs(String actualFilePath, String[] configuredArgs) { return new String[argCount]; } I think it will be more consistent with the rest of the code.
This test has failed before you check namespaceBuilder.toString() is going to throw a NumberFormatException. This you should check that it exists before using the namespaceBuilder variable.
I thought this was to be debug to prevent unwanted data from appearing in the log.
missing "protected AddCinderStorageDomainCommand"
Copied from the Java 8 class: java @Override public List<Pool> createPoolsForSubscription(Subscription sub) { return createPoolsForSubscription(sub, new ArrayList<Pool>()); }
Also, can we have a separate method getAuthorizationTranslator(HiveAuthorizationFactory ) or the similar to getAuthorizationTranslator(HiveAuthorizationTranslator)
I think that we should be more consistent with how the variant / was defined. It could be a more verbose error message, but if it was null we should still go through. A more verbose message might be something like: "Variant was not defined for %s."
The endpoint state is transient, but the client sees a paged Mono. So, if it is not final, we can return this. connectionStates instead.
The BackendClusterFeatureHelper.map() method should be extracted to a separate class.
As there was no valid reason to use a boxed type boolean here.
You could get rid of the isAssignableFrom and just use resolve.getClass().isAssignableFrom(fClazz.getClass()) here.
While you're here, you might as well merge the two isValid() calls with a single equals instead of a single equals.
This should also be able to remove a membership that matches the patient, if there is multiple for the same patient then you can add it
Should be public
How is this expression different from "this"?
Do we need to check if getMarkerSets() exists?
getVm() is marked as @Nullable so no need to specify it here.
This is a super class, so I'm not sure, but I can't believe this is going to cause problems.
Isn't this a bug fix?
s/Checkpoints/CheckpointId
Please create a new line before the return statement
Such exception is not a good practice. Can you log it?
This will break the loop, or does it affect the iteration?
Why is the flush method public?
I think that we should return an int and avoid using an int below
Did you mean.isEmpty()?
Not related to this patch. But consider using the new method here instead.
ExitCode(0) is already defined as follows.
nit: This could probably be a static method.
Now it's <code>@CheckForNull</code>
Similarly
"handler" is a String and there is no registration with a localOnly in the first place. Are you sure this is the only way?
"Invalid hardwareId" -> "No hardware id in the error message
The constant string is not needed
Shall we move this code to the new master?
I don't think you need the public modifier here.
since this happens before canDoAction, getVdsGroup() can be null
Should this be "VM 1 should not have a boot disk attached"?
throw exception
You can make this constructor private.
Is this because of the installations with _previous_ value?
Please inline this protected.
Can you also verify that the result is an instance of MemoryHistory?
I think we should depend on the fact that this is an instance of the class.
If insertType is a string, we need to use the method.
Redundant braces
what do you expect to be in 30s? Can it be 'prev' or 'previous'?
Are we OK to leave this here?
As I see that in other method, the parameter is also in the log. Consider adding a method with List<String> typeInSearchField(String content, int length) that calls the method instead of using string concatenation.
You should use a button for the entire deduplication!
Not sure if it's worth changing this, but why tc.typeClasses() instead of just getRandomTypeClass()?
Curious what happen if invalid format result is reached?
are you sure this is not the right exception?
Could you please use jobContext.getPhysicalSchemas() here?
Should be externalized.
Minor: I would use ((AvroMapper<D, M>) getMapper(input.getClass()).toAvro(schema, input); instead.
Rogelio's above suggestion applies here as well: > I think we could modify the code a little to call one time ImageUtil.getInstance().getDimension(getFileAsset()) and store the dimension in a private variable, so that way you don't load the file file twice to get height or width in the same instance. > Just check if dimension is not null and get the proper value
Can be mutated by the caller.
I think these should be deterministic by default.
Why do we need to check one?
you can return the null object directly, no need to check other.getName()
[You should be allowed to interrupt a thread.interrupt()](<LINK_0>
I think it might be better to have a method like createTemporaryTable(boolean shortenName) and call it from these two places.
There is no need to declare type on RHS, you can then inline your method.
Don't you need to keep this synchronized?
Can you have an @Before method that sConnection is more reliable?
this.add( "== null" ) can be removed
Also add an assertion for the parameter value of the config?
why not move it outside the if statement?
I don't see any test case which should be made public since it is required by an interface.
can't this be more readable?
nit: there's a weird code change here and in the other tests, but I think we could use assertSame or org.junit.jupiter.api.Assertions.assertThat(newCodec) - it's easier to read.
Can we provide number of nodes as an argument in the set, instead of returning the literalTypes? This way there is no need to collect all the types _and_ collectAll**(s) method.
I would use better return typeAlternatives.stream().filter(v -> list.toArray(v)).toArray(typeAlternatives.stream()).collect(Collectors.toList());
Can we use method reference here? I think it would be nice if we can do it on instance properties.
For a script that is called from the UI, how do you think about just checking the language language by using the script? It will be more readable when debugging, like "Script language has not been used."
The only difference between the two calls here where the class is private. I don't think we should have another method here where we're not doing anything if we have a new version.
Braces for one-liners.
use Long.valueOf() instead of new Long() - always for performance reasons
the return type shouldn't be restricted in this case.
Can be replaced with functional style Java, as per example given in EpdqStatusGenerator and a.orElse(BaseAuthoriseStatus.ERROR)
Why do we need this?
Use CollectionUtils.isEmpty() here and in the CommandsPlugin
This can be simplified to this: boolean result = true;
Add a newline before the "(" and after "
A flip!= 1
Wouldn't this fail to save the size of the array?
Why shouldprotected be used here?
Please prefer to use static imports for 'true', but this is misleading.
This should be implemented using org.apache.commons.lang3.StringUtils.hasFileNameRange(path.getName()), which makes it much easier to read.
Is there any risk of removing this, because we are not doing the flush here?
what do we need this assert?
It seems like you compute file paths in this method - getErlangModulePathsFromTarget() and getErlangModulePathsDefault() are only called from here. Please, check your code on line 78 and 79. Also you may want to call it in the same method if you want to getErlangModulePathsDefault.
Should we throw an exception if the repo doesn't exist?
Let's rename the field to a more meaningful name.
Please make sure that's there. aren't all possible to build and clear since that's the last concat function.
Parameter annotation is not needed here
since this is a constructor it should be private.
Don't use string concatenation with +.
Have you considered having isHandleRenamedFiles() and handleRenamedFiles()?
I don't see a reason to return an Iterable here instead of the more specific return type Set. The result is very small and a lazy evaluation is not necessary (which could justify returning an Iterable). Returning Iterable instead of a more specific type unnecessarily limits what the caller can do with the return result.
use method reference
.negation =!negation;
I think you mean "Liquid Glass"
This is missing <LINK_0>
not needed (the value is only used once). remove will be called only once, no?
> Use this.removeCallbacksAndMessages(null) instead. Done in Patch set 2
I think we should check for null before accessing the map, since it is possible that the value is not null.
:bulb: we should get a null check before accessing the activity.
You need to check that the uuid are the same, otherwise you will get a NullPointerException.
@vilchik-elena Why not using PsiErrorElement.class.filter(PsiErrorElement.class) and do filter(PsiErrorElement.class)? If there is no error, it could be the generic way to handle PsiErrorElement.class.
Mapper should be created in constructor
Should be longValue()
Should be noopTracerFactory.
Please keep the indentation consistent.
Access is not needed. You need AbstractUndertowSecurityProvider.
bad id.
Could be replaced by Pager.single().
Wouldn't this be better JSONObjects.of(job) so we don't have to check job.getName() for each of the jobs in username?
This method is a public DRCatalogDiffEngine.
You could remove this method and force a second method to update the currentSchemaVersion. The current way it is now, it allows for the new method to upgrade a scripts from a current version. It will also force for updates to the existing version. I'm not sure why it didn't affect the second method.
Duplicated code, please move to static method.
This could be a package protected method.
@krzyk of course. sorry to know if it's ok, but you could also define a constant with the TEST_ROOT_HOST regex as well?
please use loop over the loop if you are iterating through the bundles array
this does not call doOnEach
Consider @Restricted(NoExternalUse.class), I see no reason to make this public.
Why is the change here?
Maybe we can move it to @Before or @AfterClass methods?
Can we reuse the default value for all these properties?
I think we should use ArgChecker.isQuantity() here.
Can you make JsonReader a class-private (no need to instantiate a new object each time)?
I think that makes sense for this part of code. Because when it's being used in a loop I don't think it's needed.
trace?
I suggest to call this method as the other names as well.
+
Can we just check that the customParams is not null?
If the name doesn't match the old name this will throw an NPE.
We can set the variable as final.
numColumnsType would be cleaner. Also, in all other enum types, it'd be better to have a default value (which is true).
@vilchik-elena Why not get the default charset from Readables?
use assertThat instead of assertEquals
Why do we need this line?
This while loop doesn't need to be the loop inside the while condition.
Same as above, you could probably remove the getter and return directly
I think we shouldn't change the existing behavior (from the original).
@xupyprmv I don't think this is necessary
These two constructors should probably delegate to the other constructor.
Is this being used? Doesn't determineTerminalState return a statusFlow.get() instead?
Avoid the use of swtDefaults(). fillDefaults() and explicit alignment makes the layout logic easier for others to read. applyTo() is preferred over create(...) when attaching to a control since it's easy to generate a ClassCastException if the user tries to wrap the swtDefaults in a new layout and omit the'show' method. Change this to: GridDataFactory.fillDefaults().align(SWT.FILL, SWT.BEGINNING).create();
Implicitly possible for theDialogPositionInit parameter to be null
@tsr-thulio I think this should be!MessageValues.isSerializerNatively
s/in/is
... if not set, might as well use an ImmutableList, ImmutableList.copyOf()?
This method should be private.
This and the next tests use assertThat(client.getConfiguration("system_palantir"))
@lautarobock Why this? I think it might be better to use this.print(baos); instead.
I would prefer this to be readSafely instead of check in getFilter
Not sure if this is necessary, but I think it's more readable to leave the default format of the string in context.getString() rather than specifying it with the string.
Sorry for being so over thinking, but I think it is better to implement this method everywhere if the requested address is null. This should do: if (validBuffer && (this.address == null || this.address.equals(this.address)) { messageChanged(); }
do do system.out println rather than System.out
NoSuchElementException is more accurate
Does this create a new lambda at each event?
nit: this method can be private if we keep it as is.
this can be removed, we can just copy the format string to a different value, logged, and then put the error into the pipelineConfigurer.usePlugin method.
Perhaps we can log the exception here?
This should be using createSimpleManagerBlasConfig()
Redundant, sessionInfo.getLiveUrl() can be removed
could be a static constant for this
These local variables are final. If they start with a single value, then these variables are too hard to read.
I think it would be better to show the wizard title.
Nit: We can just use _kafkaProducer.send(..) here to call this (and the one below) from these 2 methods.
Should this be marked @NonNull?
this method should be called in onUnrecoverableError(exception, UserAction.REQUESTED_STREAM, NewPipe.getNameOfService(serviceId), url, errorId);
<LINK_0>
Minor: if you can name the metric name as a static member variable.
static import
Is this method used anywhere?
Not sure it makes much sense to me. The method is already called by upper class, and the method is called isXuthy. So I would rather see the method be inlined.
Iteration 2 / 10 = Actors per thread: [get()] => return (congruth) == 0;
This should be false.
Is it possible for this to be false here? If so, it should probably also throw an exception.
Does this method need to be public?
Same here. It's more readable when part of deserializeValue
You don't need to send this validation.
check the equals method before using it.
Is this line redundant?
Wrong JSR number in validation provider.
!this.fields.isEmpty()
Aren't we supposed to have only 1 element in the DescriptorType?
Remove the public modifier from the class.
return a == null? null : b;
I don't understand why isMainThread() is called onServer() and not in the constructor.
The input is not in the map. The caller can do this validation using validateQualifiers.
no need to check for the type of the variable
I think if publisher doesn't set extras with placement ID, we should probably allow to use Firebase Ads.
This should be public and non-private
remove
Should we remove the clientAwake property from the PresenceStatus?
replace this with the following, but the current implementation: return hasNext()? null : result.create(values);
Don't we need to put a lock for this call?
So...can we have something shorter here? if (strict) { String f = message.replace("{}", "%s"); return String.format(f, args[0], args[1], args[2]); throw new RuntimeException(result); }
missing more-once
same logging here as in perform next operation
The ratio is not used
If the COPEPlugin.getLocalStorage() throws an exception, why not just catch it and let the IOException be thrown?
Can we move this to the first argument?
Could you use a setter for this?
Can this be enclosed in a single line?
I don't think we should use GenericCallback here.
call destroy instead
What about using this as the other way around? Is there a flag in TimerContext that we can state whether we want to transition to standby?
We could return the elementToSelect field, so it will be much easier to read.
Why don't you just pass in the listener?
Is this change?
I do not know if this is the correct method name.
We have a null check in <LINK_0> for an empty call in the test cases so that we don't need to do the null check here
This will work for all fields that aren't texts. You could do this: java this.text = Text.getText(text);
Remove generic Exception
Could you please add a constant for "application/json"
can be final
Why is this public?
@lautarobock Here too, let's declare throws Exception
remove
Does this make sense? If not, you can put the url in the template.
IllegalArgumentException
suggestion DefaultClientMessageTracker(fromActive)
Should this be on Update?
Why the list is mutable? The init() method will never be called, it's possible that the config is created, from the perspective of this.
No need to send equiv on the response if it's already an RuntimeException
Should this propogate logic? Should we use keycloak.util.Map#getSuperCategoryMap?
This is making a gap between the type and the else branch, right?
This should be a constant so we can compare it with the object below and get rid of the + ", " + ", " +...
@variableName
Let's use Array.getLength( array ) > 0 instead to avoid the risk of an overflow check.
We should make a convenience method for such a field.
Map<String, Integer> componentsToScaleDown = new HashMap<>();
Why does this need to be done separately?
I think this should be in a finally block. Otherwise you're violating the contract of decorate() and decorate() with an exception.
Maybe just call QcowCompat.QcowCompat() and verify that it's the correct.
should wrap this with a String to get the URL from the URL to avoid the magic number.
Would be nice to verify all the string concats.
Would it be better to print the generated pattern here?
The Exception should be thrown here.
Instead of checking canLookupSourceEmpty, you can just check if lookupSourceProviderFuture.isDone() before calling this method.
I think that we could have an immutable map and use that instead of map.of("rule", "area", "foo")
Can we make this method package private?
Need to check if the server is an instance of JChannel, not just a proxy.
I think we might want to use stream(Objects.stream(query.spliterator(), false)) to not need the stream to be a list
MePage.go().verifyUsername(...)
Squash into one line? unregisterAndCloseRepository(i.next().getKey(), null)
Should we use.getInstance(properties) instead? I think this could also be an assertion on the properties class.
@vbradnitski why throws Exception?
Why not invoke super.getClassProperty() here?
I don't think this is right, since handleException() is already synchronized.
please use Objects.hash() which simplifies the code
You should declare the method publicly, and use getDbFacade().contains(msg.toString())
Remove this line, and change the logging level to error
currentTimeMillis() instead of re-using the nanoTime implementation
Is it really necessary to change the naming of the method here? As we discussed, this method should be called after the AlarmDeleted event.
could you remove the synchronization and just set the listeners to null?
remove explicit initialization
This is kind of a nitpick but can we make the method private? I prefer to have some methods for this kind of thing.
I think this check should be in the doResolve so it can be null here.
It isn't really a good idea to make a separate map() method that renames the reason and then make a read of the map. The reason being that get() is the reason for this vs. a map lookup is that we don't need a map. So the change should be: return map(identity());
Why can't we get the average lengthAccumulator and then getSearchCounts(field) directly?
Maybe we should test on an API token like this: GET /projects/jenkins_account_CA... add such validation to make sure we don't have to remember the page from DB?
should there be a reason not to walk the list and convert it into a map?
Do you think we need sync control on all the map accesses?
You can drop the check to use m_count and m_count.length() in between the check.
In this case, the setting of unknown service can be stored into a key. Please use that value instead.
I would prefer to avoid the else clause in this case.
I don't think it's necessary to instantiate an instance of this class.
Unnecessary whitespace.
Since this check will be enough to validate that lastCheckBox.getText() is not null, you don't have to check for null before.
Similarly here, exec. should not be necessary.
Is this deliberate?
Since this is public, let's make it private, since it's only used by the builder
While we are at it, I think we should use Collections.emptyList() to prevent the null check.
I would use different names for the ones in.gitattributes: <LINK_0>
I don't think it makes sense to make this protected.
probably not an issue but maybe it makes sense to add a equals instead?
no need for this &
@ivandalbosco what about having a test for isAncestorOf((JavaScriptTree) token).isAncestorOf((JavaScriptTree) token).isAncestorOf((JavaScriptTree) token))?
Do you want to use the new String version here?
I think this logic should be in the Config class. That way it can be configured via environment variables, and if it's not configured, then the default value should be "ORIENTEER_APP_HOME".
suggestion public boolean isLastKilledQueryIsGone() {
Again, use IOUtils.
You should not need to check here that the KeyAlreadyExistsException is not RuntimeException.
Only log the sender's message.
Collections.singletonList
Could you move this log message to the logger?
Constructors can call this()
I think that the lock object is useless as we iterate over the values. The thread could have put the lock on the caller.
you don't need this function, you can use constructor directly
Why not just use literal?
This should be map to the field directly, or do we need the IpAddressExtractor to be able to create an id or something?
no need to check for null again...
I'm not sure we should log this.
This could be filtered out.
You should return checksumName to use conf.get(HConstants.CHECKSUM_TYPE_NAME) and then you won't have to do it for every checksum in the default implementation.
If this is method (without space) you might want to change this to throw an exception
Should this be above "isColorTeamMatch"? For example, on line #755.
Maybe extract locating the VisualizationInternal as a class inStepEngineSettings?
optional style nit: I think this is too long. Can we extract this to a separate method and use a different visibility?
+1, I have some concern with the use of environment variables in the future.
Please return human_Variables here.
I mean throwing an UnsupportedOperationException instead, to be consistent with the existing offer method.
this shouldn't be part of the file. you should have a proper name, or even better named file
This should return true.
Should this have a private method?
Why use refresh here? If you have to see the diffs in compiler, why not adding it in the if statement statement?
you can add here three times instead of res
Did you think about using driver.getCurrentBaseUrl() instead? <LINK_0>
this method is in a different scope than private. we could have both in SwiftParser.CodeBlockContext or even just "this".
It appears that we can incorporate this logic into CommandBase.endWithFailure() The finally block of that method is: if (getCommandCompensationPhase() == CommandCompensationPhase.END_COMMAND) { compensate(); } else { if (getCommandCompensationPhase() == CommandCompensationPhase.END_COMMAND) { compensate(); } } The code can be improved, but this is the direction to go to reduce leaving compensation trace in case of failure during rollback.
... and here we builder the entire class.
could be: return mIsValid? toString() : "0.0.0");
no need for public
suggest using batch.concat()
Just a thought, but the method name is slightly misleading because you could use a method in some context. Maybe something like loadMethodFromSession?
explain this?
maybe just add "accept-spans" to the end of "accept-spans".
You have the first blank line. Also I'm wondering if a "else" is better.
Helix does not provide a factory for it. You assume it is null?
This if statement is not necessary, enums can be used with the same name.
This method should be called in.show()
oh, I see. you are checking for null, and then doing a get() again, because of the above check. Why is it necessary?
This is not required if you replaced it with a public SocketConfig createSocketConfig()
DateTime.now().getDays()
What happens if we have multiple capacity?
We can remove the getter and setter as well.
You should be able to use this method as a for Patient entity and check if it has been removed
Actually for me this would be better with a private static final Map<String, String> putIfAbsent(String key, Map<String, String> value) method. This would allow you to use Map<String, String> and Map<String, String> save(Map<String, String> key) instead.
You could use [Joiner](<LINK_0> for this.
Shouldn't this happen? If a node exists, it will be a String, not a String.
You are using generics so this method can be removed.
I'm wondering why do you use RtForks in MkForksTest tests. We should test MkForks instead
You could have implemented this method private boolean nullOrEmpty(List<?> list) { return list == null || list.isEmpty(); }
I think we should only be writing to the local app if savedInstanceState is not enabled. For example: "A remote app is available from CommCareApplication._().isConsumerApp()"
Oh, I didn't mean to leave it for now, but if we want to simplify the code, could you change the tests to if(oneToOne instanceof Option.Some)?
can be replaced with lamda
shouldn't it be more "if (parentBounds.getFigure().getBounds().contains(absoluteBounds))"?
this is really implementing closeConnection. I would leave it at this point.
Another case where the empty input is not an empty string.
move null check back as first action in the method to not change behaviour
0.4 or or maybe just _pandle_..?
I suggest to break this line.
@super132 to call this one this.threadKeepAliveTime = threadKeepAliveTime;
@HighlightDrawables[0].setColor(mainColor);
Do we need to add Exception to the exception here?
Maybe here you can use rs.getInt()
If you know the Caffeine class, you will be comparing by foneelice with the following code : java public static void buildTranslationCaches() { return Caffeine.newBuilder().maximumSize(10000).build(); }
pls avoid using hard-coding the file "/var/cloud_mount/" + UUID.nameUUIDFromBytes(remoteDir.getBytes())
Empty items or format.
Why is this required?
Should this be a constant?
UnsupportedOperationException seems reasonable here.
I think it is nicer if the list is initialized with properties.stream().map(t -> t.map(mapper)).collect(Collectors.toList())
Can you add another version of getStringContentBuilder and replace the deprecated one?
Use Objects.nonNull(fTopNode, "TopNode cannot be null")
What is the exception parameter for?
ITickable does not make much sense here.
Remove?
What about define BackupEventHandler as static final, then you can check this for example on line 110 and just return else, without setting it on line 110?
ofNullable(result)
Don't call getChangeSets. use added(<LINK_0>
@kritika-singh3 I'm assuming that we are always parsing the name of an existing stream definition?
I'm not sure why this has the 'DEV' feature.
Use faster methods, should not use data processors when possible.
[minor] Could we include the errors here too?
Thinking starter on the full size should do it for the tests. And then is the extra length _3_ to be more precise than the size.
This doesn't need to be related to Yielder, but since it is already done by a service, it would be better to not rely on init() here.
yes, what is the purpose of this ctor?
I would add some special case for false (if not true), and output of checkBlankLineAfterUses() in this case.
This is a good example of behavior. It should be : java assertThat(stats.getLast(), equalTo(tokens.getLast()));
COUNTER_STRING is not used anymore and yet you are not using it in the constructor. Use the getQuarkAbsoluteAndAdd here
is this needed for the test?
Why does this need to be synchronized?
You're doing something kind of wrong here, as the id is a String. I think it's more clear than the UUID in the ignoredPlayers list first.
other tests are very similar - it should be refactored to a method because it is called from testSupport
make this private?
Again, these are hardcoded strings, not sure why they are hardcoded
It would be better to have checkState( object, fieldOffset ) >= maximum number, and update the maximum value after this line.
Remove the public modifier.
Can you re-throw the test instead of catching an exception? That would be ignorant.
Can we change this to return getUserTimeone()?
Similar
why not set the environment directly in the constructor?
Move this method into the "addUser" method. That way, it's more similar to what we do in UserDTO: public UserDTO addUser(UserDTO userResource) { return userResource.createUserEntity(); }
Check whether we have moved the compatibility to Java8, since we have moved the compatibility to Java 7 without any other style.
If we're not using sourceProcessingDetails, you could just do the assignment here and save one line of code.
As there is a test for this class, I think it should be limited to test data types (less than a few lines above).
this is a constant string, why are you using it here?
I think isVariableHeight should be called first here to avoid confusing conditions.
Instead of checking if it is empty, you could have a add(event) method that checks if the event is not present in org.eclipse.jgit.events.NotificationManager.add(Event)
Does this need to be logged at info level?
Should this be ClientConfigurationException?
Remove final.
explicit real ref?
We're missing an assert here, can it?
Same again.
nit: I'd prefer to not write the bloom filter if it is a really common type of the it. If anything it is better than adding a null check to theBloomFilter method.
Should also be Objects.equals(_apiVersion, that._apiVersion)
Think I'm missing the logic here. If the URL is relative, it should return the URL to the URL.
The super() method does not have to be called explicitly.
SourceImpl?
Cast and const please
remove this
Can we log the exception?
I think that the user requested is not to fid the user, but this add() method might be invoked only for the sake of consistency.
We should move this logic to IgniteJoin. @Override public IgniteJoin(RelRelNode cluster, RelNode left, RelNode joinType, Set<CorrelationId> variablesSet, RelType joinType) { super(cluster, traitSet, left, right, left, right, joinType, joinType); } @Override public IgniteJoin(RelNode cluster, RelNode joinType, RelNode joinType) { super(cluster, traitSet, left, right, filter, joinType, joinType); }
I think the cache must be created in the constructor.
I think you can use String.format method here
Needs to be externalized to a constant.
use this constructor
Is this a good idea? Should we throw an exception instead?
Can this be simplified with a map of the string?
Curious why this is not final?
I'd rather use!isAnalyticsActive()
negative logic
This method should be synchronized, right?
How about using the constructor taking in a parameter?
I think we should standardize the waits to see if the Stream is closed.
Do we really need to set the context that is already passed in?
Is this method necessary? As in line 1872, you can just do this: if ( action instanceof SelectAction ) { actionTypeSwitch.caseSelectAction( (SelectAction)action ) action ) { actionTypeSwitch.caseSelectAction( (SelectAction)action ); } else if ( action instanceof ColumnsAction ) { actionTypeSwitch.caseSelectAction( (SelectAction)action ); } }
This is not a testing code.
nit:.flatMap(Schedulers.elastic()).map(zkInstance -> toookeeperServiceInstance(serviceIdToQuery, zkInstance)));
Why don't you initialize this where you are allocated?
This userData variable and initialization is done in the constructor, but here it's set
check for the null and return getVariable if it is null rather than throwing RuntimeException
I would put the String.valueOf() part here since it's a constant object.
I might be wrong, but this could be a lot more readable if cardTypes.stream().anyMatch(CardTypeEntity::isRequires3ds).count() > 0; Also, consider using a helper method to reduce the number of clauses. java private boolean hasAnyAcceptedCardType3dsRequired() { return cardTypes.stream().filter(CardTypeEntity::isRequires3ds).count() > 0; }
I think this could be private.
If the type is not a boolean, why not just use a boolean?
Likewise..
try to simplify this to return toString(" ", " + " | | ", ".Map");
I don't think we need this check, if the thread is already alive. We can't do the cleanup in other methods from the base class so it can be reused by multiple threads.
If you're setting a property I would remove this line (to prevent any unexpected cast).
This should be private.
Nitpicking: does this need to be made for testing?
It is unnecessary to log and throw.
The HTTP standard way to do this is to use the "getConnection" method, or do we need to do it here?
This doesn't seem to be different.
If we have methods that throw exceptions, we should probably do the same.
I think we should do this without the need to pass the Members to init(). That way any subsequent calls to the init() method will do it.
I still think this does not belong here. We should update the internal value of these fields.
Instead of using the context class loader, use the class loader of the first one.
nit: can we create a constructor with ledgerDirsManager and ledgerDirsManager, and have DiskChecker take the disk call as input and expect it to be initialized with empty strings?
Why do we need it here?
Maybe instead of checking for actual.getDeclaredMethods() directly, we can have: java doAssertHasMethods(info, actual, methods);
We definitely need more details about what is invalid about the list of keys, not just the size. This check is not sufficiently clear.
nit: this is not a timeout.. we always need to wait 5 seconds, and maybe use Awaitility instead of a timeout.
The Exception is never thrown.
This looks a bit hard to follow. Maybe we could directly calculate these supportedArenaBlockSize if we are explicitly checking this value?
log.debugf
Should use the logger instead.
action.accept(entry.getKey(), entry.getValue()); seems more readable.
Perhaps it should check that the header is not set?
Instead, start with bot.checkBox("SWT.READ_ONLY").select();
DateTimes will not always work... because of daylight savings time: <LINK_0> doing a toLocaleDate should solve this issue.
Why allow you to run all services in the constructor? That would allow you to add all DiscoveryServicesServicesFactory.createDiscoveryServiceCallbacks(true) to this.discoveryServiceCallbacks and then just call corresponding api.setDiscoveryServiceCallback(true) here.
This wasn't flaky, but it wasn't quite clear to me that all the elements are expected in the list, so you need to re-check that they are contained in the correct method.
nit: can you add a failure message here?
you MUST catch (Throwable) and not Exception, as you do in other parts. Maybe it would be better to have a common utility function to create all the EventLoopGroups in fact running without the native epoll support libraries on the library path make the test fail
I think we should use the old method (or the new method) to ensure the check is done.
return msg.getMsgType().ignoreEpoch? -1 : getCurrentLayout()
Mappers are bumped down to UNKNOWN as well.
No need to return boolean directly.
You should have the ex as an inner throwable to that illegal argument exception, so consumers can understand why that parse failed.
Maybe we should log a error here too, and not just returning null
Why 5?
Unneeded space before )
This is a constant and can be used
This will break existing tests, which is not the respect to configure the VM-wide setup case.
replace the if with checkIndex(toIndex)
Why change this?
that can be null? This means we can no longer support shouldRun anymore. Also accessing all the locks here will cause NPE?
is this method used anywhere? if so, do we need to move it outside of the loop?
@korthout Avoid using static imports for class-level tests.
Can we remove the 'isInodeIndexed' call? Since it is already removed from the 'isInodeIndexed' method you can use the new method addition of the 'isInodeIndexed'
setIcon(android.R.drawable.ic_input_delete) is used multiple times. make it a constant.
Is there a reason we're not adding this to biostoreListenerNotifier?
I wonder if it is better to pass the admin label here in getSystemAdmins(String adminLabel) to getSystemAdmins(String adminLabel)
this method can be private, and at the other two methods in this class
Should be public
how about java if(service.getName().startsWith("eap")) { return service.getName().startsWith("eap"); } else { return false; }
Do you want to keep this? it seems like the caller should be calling the TXOpen method
Please use isEmpty()
Do we need to actually update the QPsDb model?
Hm, I understand that we only handle TimeoutException if we couldn't get any cause. Is it really a better solution?
Superfluous empty line.
Is this null? If yes, it should be default
no need to declare this once the test is done
this.
Not Customer.class.getResource(...) is fine.
Suggest using Dao.findAllBy( adapter.getId()).
This operator should be changed from a bitwise OR to a logical OR.
Is it really necessary to abstract it? it seems like the other methods are either set or set to true?
Why is this method synchronized?
Do we need this? All it does is assert that the message is equal
@tarun0 why don't you use <LINK_0>
If the operation was removed, should this be allowed as well?
Would it be a good idea to wrap the Folder.id in a field so that we can get rid of the duplicated code?
Minor: Would be nice to have a configurable wait method that would block in the SHScheduler thread.
A nitpicking: the if can be omitted here.
Looks like this just declares a variable that's not used?
Why not assertNull and assertNotNull?
This should be named as INVALID_CLASS.
What happens if the parameter is null and the default value is 0? Do we want to allow it to be false, or should we add an assertion for this case?
No assertions here unless you're going to play something else.
The test should validate the error message
This seems unsafe, consider making a private method.
@SuppressWarnings("unchecked") for instanceof ReflectiveStaticInjection, I think
Please remove empty line
Can we use a more descriptive name for the method? Maybe even just " populateBestMatchingMilestones"?
you should use "if (value == null || value.compareTo(column.value.toString()))"
subs is not used
why add this for loop?
loadTemplateMaps() is not necessary here
The cacheNotifier and cacheNotifier are a bit weird, it's called a lot more than once in the callback. Maybe for example through the cacheNotifier. join(cacheNotifier::notifyCacheEntryExpired) method instead?
nit: Might want to log the file name and the file name here as well.
since this is a test and these are not reporting errors, please change to logger.info()
You don't need a refreshHistory function since the new method is called only once.
Should this be warn instead?
This table should not be read by itself. So, it's not a must, but it's a kind of against the current name. Please verify that the expected number is somehow visible.
Please remove System.out.println or replace with log.debug
Since Date instances are mutable, the this.endDate should be a copy of endDate to avoid side-effects.
public? Also, please remove the public modifier from the public class
Creeper does not support adding the classname more than just the name
You need to recheck the message in case it's not null and do an actual null check.
> 0
this can be simplified as return checkAtNewTableRow(line, lineOffset)
can be just: java if (!incompatibilities.isEmpty()) {
This could be null if the tag is not.equals()
equalsIgnoreCase vs. equals?
We can't use Preconditions here. Also, I think the String constructor is wrong; we should be using String.format("NameStandardProjectConfiguration.Name").
Maybe use isBlank instead of 'equals' or reversing?
Is this call necessary?
I'm not sure about this one. We may also want to add a check that the name is not null.
assertFalse(...);
Nit: Maybe we should probably have a ctor for it
This can be moved into the finally block.
I think we should retrieve the key from the kerberos auth store first, then allow for the key to be null.
Why is this just a check?
This should probably be target.
Again, be package-private.
Why not use TextUtils.isEmpty(mEmailInput.getEditText().getText()) here?
I don't think it's possible to use the AuthorizationGroupBean to create an AuthorizationGroupBean.
This should be an exception.
This will need to be bound to the actual max nulls. Otherwise, this method need to be named as a "nullable" method.
"creator" and "lastModifier" should be added to STANDARD_ALIASES instead of creating the aliases here
You should check if disks is not null - the operation has succeeded.
This can be @Override
List<Person> people = cast.getChildElements("actor"); List<Person> people = new ArrayList<>(); for (int i = 0; i < listOf.size(); i++) { people.add(makeActor(actor)); } return people;
Better do this as a constant.
Log.debug
We still need to call to super. partActivated()
Why is this simply returning null?
The method should probably be private.
Minor: you can invert the || and use contains to reduce nesting, as the code was written already
Can we make these constants?
You are missing braces (they will be still needed because of this).
suggestion LOGGER.error("User id, {} returned a NULL media feed from instagram.", userId);
static import HIVE_STORAGE_FORMAT
For a lot of changes in this class, I think there is a class in the base class. It would be better to let the base class be used here in the base class as well.
This is not thread safe.
I think this should use the ITimeEvent and not the ModuleEntryModel.
The switch should be unnecessary, this switch is not needed.
looks like a good candidate for having a static method, setup that takes the common [try {}](<LINK_0> as an argument.
maybe this should be readBytes < readLength, no?
This offset=0; is redundant here
You could remove "this" here.
This method may be unnecessary as the set is not synchronized.
no need for a Boolean here
Shall we throw a runtime exception.
It seems to me that this is unnecessary, I think.
Why are you removing the space at the beginning of the string?
you could use a boolean also and get rid of StringUtils stuff
could you add a second parameter to the log message?
Seems like this class has no static initializer, so this is pretty much the same as the class.
You can use ops.add(address, Values.of("transaction-support", transactions).and("module", module));
Move this to initialize() method.
Could you please remove these debugging output?
needs 2 _arguments_, plural
Should be if (fInputHandler.saveTargetDefinition())
This assertion is not sufficient, you are using the asserts already enabled by JUnit.
I think it is worth to add a log.info in this method?
If you are testing for null, it should also work to cover an empty/empty Admittedly. If there is no _else_ clause, then this method should return all of the stuff. It is not clear what should be used for - if the guy is null, why should we switch to an empty set?
You can use TimeUnit.MILLISECONDS.toLong() here.
Do you really need the.register and.getAuthenticationService()?
Guava Strings#toString(java.lang.String) could simplify this code a little bit.
nit: I'd make the output more clear, something like "Reviewed Reviewed"
As discussed before, rename border to ex.get()
Do we really need to test this as well?
suggestion onLastOp = newOnLastOp;
This whole method is too long. Please change it to java List<String> res = doc.getAdapter(BundleGroup.class); if (bgroup!= null) { res.add(bgroup.getId()); } return res; ----> :smile:
Why not public?
Would you mind making this private? Additionally, I think it should only be called from the AnnotationMetadata constructor.
whitespace
lzSearchExecutor -> lzSearchExecutor
What if it's absent? In my opinion it should be : remove
> When the'mBannerSpot' is null, the'mBannerSpot' is not called. Please do this. :wink:
This should be ether, not Force
should this be more strict? i.e. require at least one character inside the parens?
Same as above, but I think this should be default.
Can you also capture stats on the hit ratio, load time and total weight.
This should only be called if the child has anclass. If that's the case, you can set the attribute to "cellTableSelectedRow" in the HmerritOptions class.
Nit: I would be more explicit.
Why not pass null here instead of empty string?
Use ImmutableSpongeValue.
No need for null check.
Attempt to create an instance of the WorldProvider who has no registered type!
Can we update the code if the current user has been executed on an edit mode?
Please add this to the parserContext so that parsing is consistent with TreeFailoverConfig.
This is effectively a bug, as it is a remote programming error.
This check may cause the ArrayIndexOutOfBoundsException.
Consider writing this as return onStoreProxy(serverStoreProxy::iterator);
do.getValue() on the next line
This test is failing for me, since you are just checking that the message contains out of range. Perhaps we can use assertThat(e.getMessage()).contains("out of range"); instead of contains("out of range");
Should we add a Builder to public TestElasticsearchIntegrationSmokeTest(EmbeddedElasticsearchNode embeddedElasticsearchNode) throws Exception { super(() -> createElasticsearchQueryRunner(embeddedElasticsearchNode,  TpchTable.getTables(), embeddedElasticsearchNode); }
why are you no longer using this method?
debug logging?
You don't need to call this method with the paymentSchedule
Use parameterized logging instead of string concatenation.
@ivanarrizabalaga Maybe we should use a logger here instead of System.out.println?
why else?
It would be better to have this abstract class to get the stream.
Similar
Return value of the method is never used.
Perhaps we could use a more explicit equals here (and in the other tests)? java public static String equals(String name) { return name.equals(name); }
![CRITICAL](<LINK_0> 'Severity: CRITICAL') Either log or rethrow this exception. [![rule](<LINK_1>](<LINK_2>
doStop() should probably be called here to prevent the current task from being cancelled.
Should this be a 'protected' method?
assertThat(first).containsExactly(1, 0, 0).isEqualTo(3); would be more readable
This seems to be a public method in the base class.
Use try-with-resources so you don't need to manually close the session.
I think this can be simplified using get(Thread) which is a bit more readable.
Indentation doesn't seem correct here.
There is a constant defined in VALID_NAME that can be used instead of a hard coded string.
Missing <>, this is a raw type.
Was this change made to the query?
pt should not be a parameter
Please, format this line.
Looks like questionsWithResponses can be added in the for loop
I'd rather use this.parseXMLToRelations instead.
There's a lot going on in this method on the getDeclaredAnnotations() API, because it's a bit verbose and can be removed. Would it be possible to change it to something like this: public List<ASTAnnotation> getDeclaredAnnotations() { List<ASTAnnotation> result = new ArrayList<>((ASTClassOrInterfaceBodyDeclaration) ); for (int i = 0; i < decl.jjtGetNumChildren(); i++) { result.add((ASTAnnotation) decl.jjtGetNumChildren(i)); } } and then here just return List<ASTAnnotation> and break; }
s.a.
If <=="="
assertThat(related).hasSize(0);
Done, it's not needed.
Verifying the variable name is probably redundant now
What if the storage pool was inactive and you moved it to maintenance and failed.
If we are going to add some magic numbers, I would prefer a variable name for the method names.
Does this need to be asserting that snapshots.isEmpty()?
Here also the underlying Collection<GrantedAuthority> is superfluous as the return type of SimpleGrantedAuthority(a.getUserRole(), instanceOf) is already linked to the Right Type, it's also a set, which may be empty and has no membership
possible NPE
This is somewhat sensitive, such as Users typically don't add Unavailable values.
why has this changed?
Should be using the symbolic version here, not the string version
"Collection" is more efficient, as you can see below
This is only needed if we have a Container in the free resources.
This looks like a copy/paste error.
should we have a method on MessageHolder to return a null value instead of doing this casting?
Long.MAX_VALUE nanoseconds
We should use!TextUtils.isEmpty(swipeDismissListener)
Shall we also call verifyResponse(apiCreationResponse.getStatusCode(), "Response Code miss matched when creating the API");
I'd suggest doing the same, but not a big deal, as is it possible that we're not retrieving the CountInputStream from a writer or reading it from the factory. You could also pass a CountInputStream and then the writer to a new CountInputStream.
Add Pagelogging
container can be null, please add s.isEmpty()
Would be good to move this contstant to this file and name it something like WIDGET_ANSWER_STANDARD_MARGIN_MODIFIER.
userRepository and modelMapper invocations are not verified
I prefer this approach is if you think it is a bug. We should prefer something like this: 1. if (tabLayoutId!= MISSING_TAB_LAYOUT_ID) { throw new MissingTabLayoutId(); } else { throw new MissingTabLayoutId(); } 2. }
If this method gets called both build and bootstrap methods, then I think we should make it static.
not public
I think the key of the map is misleading. It's the query mechanism to read the /metacard types, but it may be misleading.
I'd rather use this API to register this. But I guess its uglier to have this as a dependency.
nit: assertFalse(Iterables.isEmpty(adapter.listLocations()));
Shouldn't this be wrapped in a try... finally block?
ReloadRequiredRemoveStepHandler does nothing
this.do not work; you need to set this to false.
I am a little worried that this could cause a lot of issues if the cache could be changed to a map in the future. One should be able to handle synchronization so that it's safe and could be shared across threads.
Maybe log the _sigh_ metrics and/or log the exception for context?
I would prefer to move this check to the removeFromListAndUnlock so that we only have to lock the list of deleted resources, or do we need to lock it for another reason?
I think this should be returning null if there is an error in the currentUserId.
can this be the other way around? String[] indices = request.indices(); if (indices == null || indices.length > 1) { throw new IllegalStateException("Search on audit must include index name: " + request); }
Add final keyword.
So...wrong ;?
These "refs/*" don't exist in the repository group, they are declared as default in the repository group.
As John wrote: **2men4**, you want:**.group(1)) is the match order of time and we can be sure that sorted b is the first one but it is correct. **2x** but 3x is the second one, which is not the case. **2.**
why not use the compareAndSet method in this case?
Can we test whether user is running on a non-admin and have a check on whether application is running?
suggestion throw new IllegalStateException("Unsupported type: " + path.getClass().getName());
Could we use parallelStream here? And below. The JDK promise it may not be more efficient, because it's not the same behavior.
It would be better to have new copy of the list in the new sorted set.
convert to package-private. Also, it's strange that you want it to be public.
I think you should be able to get a User by ID from the authToken object. If the admins are admins, and get a Grouped, when the token is not on the server.
In updateChart(), the collection fModules is updated first, then this method is called. So you don't have anymore the old modules to be able to recreate the old series that need to be deleted. How about getting the series set directly from the SWTChart and delete them one by one using their own id provided by ISeries?
@apc999 This should also be requireNonNull
@lautarobock Here too, let's declare throws Exception.
concatMap(this::listSegmentsForYear) can be replaced by mapMany(s -> listYears()).filter(s -> s.map(this::listSegmentsForYear)).forEach(this::getEventsForSegment);
LOGGER.trace?
I'd prefer to keep this long and collect SystemTime into a Duration directly, because that's a bit difficult to build and maintain
@ngwax, you are not supposed to handle null for an instance of InetSocketAddress
We can refactor this function to throw it out and, in some cases, recreate it.
Can't we pull the connection into a variable?
I would prefer to close on its own.
better to add a known error message like "Session Builder not modify!")
I think this and the one below should be: java public static Credential refreshToken(Credential credential) throws IOException { try { credential.refreshToken(); return credential; } catch (NullPointerException e) { throw new IllegalStateException( "Couldn't refresh the OAuth token. " + "want to use a different file, first clear your stored credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials: " + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials:" + "enomics.readthe credentials
This is pretty dangerous and I don't see how it works and it feels like leases is being created for each request. You should just use the vdsm call and pass it as the second argument.
Keep this counter as a constant, so we don't need to create a new attribute for it.
Should be externalized
Better to catch specific exception like IOException catch.
Why was this removed?
probably better to return totalSize!= 0? (availableDiskSize / totalSize) : 0;
since the ArgUtil.notNull already takes care of this, we're making the code null safe
Shouldn't you return the "" instead? String.join(",", subscription);
This is a good place to make things more stream-like
Should be assert?
Modifying the underlying channel should be done within the refresh(QueryContext) method.
@fanifieiev the same above.
I think it should be failOnMissingField && failOnMissingField.
This is the default case that we don't want to set it to empty strings.
RuntimeException?
Let's make this a precondition, and make the constructor to return precondition.
as you're changing this, replace 'try' with'catch (Exception e)'
You can just add player name as a variable to use player name instead of player.
How about getActionType().isRevisionSupported()?
extract the exception to a constant and reuse it for the log message
why not private static?
Can we have a method like this? public void execInitClipboardForm(ClipboardForm form) {... } Or, better yet, rename the method.
I would suggest to at least log the exception here. Maybe something like "It could not be used to add the druid-datasketches extension to the classpath."
Better revert.
This code base seems to be a lot longer, maybe make it static.
The condition should be replaced with!TextUtils.isEmpty(assignmentId).
I think we could simplify this to if (rowNumbersOut == null) { return; } else if (inputNumbers == null) { int outerIdx = offsets[offsetIndex]; rowNumbersOut[numResults] =...; } else { int outerIdx = inputNumbers[numResults]; inputNumbersOut[numResults] = outerIdx; }
I'd prefer not to use contains() here. Same goes for all of the other fields.
this one is not needed
please move it to an 'else' part - for readability
I think this is a wrong place for this. We don't need this test.
suggestion return convert(Arrays.asList(args));
remove double a valid from test & implementation
Can we move this check back to the top of the method?
instead of creating a new list for each SourceControl.SourceControlBean, the object won't be instantiated by one scope scope.
Instead of comparing to Boolean, you can use == here
use.getUuid instead of getArtId, which will go away
nodeID could be null
Same as above, why do we need the cast?
why not break here?
same here, just use context.setAttribute(TraceContext.class.getName(), currentTraceContext.get())
If fArg1.isNoexcept(overload) && (arg2 is noexcept) && (arg3 is noexcept) then we need to return false
Please, make it private.
nullity check here too :)
config key is kind of a weird way of writing it doesn't mean we have to use it in the config.
@ivandalbosco Is it possible to test tree.parentTree() == null?
Before we always had non-null returns
HashMap should be good here, because the test is running in the server-side.
I would add an IllegalArgException with a message that says "Already closed."
Wouldn't we want to unify these names and pick either onReady or onDataChanged? Other than that, LGTM!
I think this should be synchronized
I'm not sure if the listed can be null.
There is no upper bound on the value of this char, so this may cause problems.
the QQ should return an error dialog, not a user
missing @Override
Can you use the new GnirsGratingOptics(getDirectory(), _grating.get(), _centralName, 1) here?
As above, please do assert on the message message, which will be an aid in tests
Removing this.
This is a test, not a test.
suggestion if (castTargetType.toLowerCase().startsWith(clobCompatibleCastTargetTypes[i]) || (castTargetType.toLowerCase().startsWith(clobCompatibleCastTargetTypes[i]) {
This method feels rather awkward. I think it should be private rather than package-private.
Line length
Would suggest using another MapID for 004 and 005 to break dependency from 001 and 002 to be successful
Remove the extra empty line.
This is the default value. It's allowed to be 0 in the database, but to prevent the risk of being updated on an operator.
rollback this?
Would you mind at least log the exception message here, to match that?
Why is this constructor public?
Need to pass the timeBucketId as a parameter to the store.getTimeBucketFor
nit: I think it would be better to call this method in PageWithPositionComparatorCacheKey
I think you mean (d<=0)
nitpick: can we just move the @Override annotation to a separate line?
Too long?
Can't you get the timezone from the context?
reuse a constant
s/MonitorDomainNames.Rebalancer.name()/clusterName/
Not sure what this name is for. It seems that daemon threads would not be the first worker threads since they shared.
Can you expose the event iterator directly?
This would be better. marshaller = componentRegistry.getComponent(Marshaller.class);
* This is a breaking change, and needs to be reverted. * I suggest to add a new method named isTerminalVdsReturnValue() (which is called before the super call).
@vilchik-elena I think that we could raise issue on the condition of the condition (ConditionCondition.is(Kind.BOOLEAN_LITERAL)).
use getCurrentIndex() method to create index.
suggestion return name.equals(that.name);
So have you considered just client = NioClient(serverAddress, peer, port, connectionTimeout );?
nit: fix spacing
Do we need to break after this line?
Should use the constructor for this.context = builder.sb.length() > 0? builder.sb.toString() : null;
Another bit of safe cast. I would recommend using Integer.toString(byte[]) rather than StandardCharsets.UTF_8.
Why do you need this?
Same as above, why not use try with resources?
We should add a null check for options before invoking this method.
Add parentheses around that one liners.
No.
Is this always safer than using Locale.getDefault()?
Missing final
Can you delete the extra brackets around windowCount++ and the log statement? I don't want to write more than that to log log statements (more than the error log).
Just to be safe, we need to consider the following code. if (obj instanceof ReferenceBindingSetWrapper) { ReferenceBindingSetWrapper other = (ReferenceBindingSetWrapper) obj; return this.referenceBinding.equals(other.referenceBinding); } else { return false; }
what is the point of returning null here?
I think this was an overhead. Won't it make sense to wait until stop() is called?
logLevel == null?
It seems like all this logic related to monitoring could be moved to a helper class since it's really orthogonal to everything else that Worker does.
Why this isn't: @Transactional(propagation = Propagation.REQUIRES_NEW)? Thanks
nit: This is normally called with the expected version, but the second parameter could be removed since it's the same.
I would prefer to throw a RuntimeException here.
Too much whitespace. Consider extracting to a method for readability (and below): public String getCurrentSuiteName( final String fxmlName) {... }
I think that if Entity#setLock is no longer necessary. #Closed
Typo, should be _oe.getAltairConfig().Mode.LGS_P1
method should be static, and non-static, as it is called automatically in class.
Can we squash your commits into one? I mean, if you want to have it as public static, then I would squash your commits
a bit of extra paranoid, but why not use stringbuilder and avoid string concat (or directly use "," as a separator)?
You can use MoreCollectors.joining(", ", value) instead of String.join(", ", value)
@Nonnull?
This is growing an awful lot. I think it might be better to have the top level add method.
With the current implementation, we can omit this line, I think it will work with [this](<LINK_0> and [this](<LINK_1>
Why a array?
Breaks into previous line?
Logging
Squash into one line, so it's not necessary to take care of that
Should we rename this variable to something like deleteResultsCollection?
This is not really a public API, it has no effect on the class. Making it protected or protected is fine.
Just a question.
Should this be <LINK_0>
Instead of copying the PDataType here, you could just pass the conf.getAggregatorExpression().getMaxLength()
The hashCode() implementation of this one assumes that the same equals() implementation is broken. For example, it can be null (when we request a null store id of a different file). As it is the same implementation of equals, then hashCode will be equal and fail on NPE.
This should simply invoke the synchronized block.
log param
Please add a check that value is valid only if it is not null.
we need to log here. Please call getReactorClient()
Can we add a afterPropertiesSet() here?
You can use CacheEntry::new
This can be static
Should this be synchronized?
nit: can we use new TreeSet(Comparator.comparing(EventLogCategoryDto::STANDARD_EVENT_LOG, new DateTime(), new DateTime())?
Did you call isEmpty() instead of checking 'isClosed'?
Missing null check
Add a new method with different params so it will be more clear what the parameter is
Is this really necessary?
Should this be super.dispose() to avoid possible ConcurrentModificationExceptions.
Same here, move this check to the schema scope.
Please make sure the assertion works without if (deployments.size() > 0)
This is not the proper way of parsing the files, it's better to create a util method getSourceName() for this, or something and compare with the getValueType(). The only way to do this is to have the set of properties defined in Environment.
please remove the method modifier
can you please remove it and call it VmDeviceType.VNC, VmDeviceType.VNC
Use Objects.hash()
Why are we adding this null check?
Is this intentional to verify that the content of the expected resource is correct?
curly braces
we have a race condition here and should use the delegate and check for null (in case we try to close two threads), but just in case
Should we log this at the end of the visit method?
The above line should be where the clearOdkDirOnScopedStorage() method is called.
parallelStream()?
Would you mind introducing a helper method to compute the type, e.g., int SUCCESS, int result = 0; and change the reference to by calling it in the deadline?
Collections.unmodifiableSet(new HashSet<>(plugins))
nit: add braces here and on line 186
Is this method needed?
suggestion return requestThrottler.getInflight();
Why did you catch any RuntimeException based class here?
Is this really needed? If it is, then I am wondering if a static final String should be used instead.
These line is proof you don't need QuotaConsumptionParametersWrapper
it's not public, we should stay consistent.
Should we name this thread instead?
why not just skip the SEAT feature?
- should we use pushInlineDeployments here? - use of deployContrib with a test contribution
We should also call super.cleanup() to cleanup the _agsPub and then rename the local variable to targetObsComp.TARGET_ENV_PROP to avoid confusion with the other code calling out the _agsPub.
I prefer "a13c3c354040144..441" and.A13c3c2e6a4e4" to getString instead of getString.
Any reason to not return null? It is semantically better than returning null.
Use StringUtils.isBlank
use Objects.hash() instead of "+"
parentheses please ;) return (number == null)? null : Long.valueOf(number.longValue()));
Let's extract a constant for the timeout value.
Maybe make this throw IllegalArgumentException?
I think this decode method also should throw IOException, which implementations don't care about how the read() method, and also more likely to throw the exception if the file was read.
Do you still need to skillLevel += player.getSurveyByTournament(tournament) here?
Maybe check if batch update exception has nested SQLNonTransientException?
what about combine the if statements into a single line?
Why do you use BigInteger and not int?
I'm not sure it's worth changing either.
The if check is not needed because we have the same uri in two places.
timeoutMsg -> timeoutMsg
This uses a lot of variables to get the url. It's less efficient when you extract this into a variable and then use it.
Are you sure that this method is required?
Shouldn't this be a.time(2) (to keep the first character)
s/verify
Why does this need to be added now-why is it in the cache? Was JENKINS-20398 somehow related?
Please use Option.apply instead of Non-null.
style nit: missing braces
How about LOG.warn("Retry #" + numFailures, " milliseconds.");
If you have a segmentHeaderBuf variables, you could then m_segmentHeaderBuf and m_segmentHeaderBuf to be consistent with the rest of the class. m_segmentHeaderBufs should be renamed to m_segmentHeaderBuf and m_segmentHeaderBuf to avoid confusion
This constructor could be deprecated and removed.
Since we are using sync client, maybe we should keep this method synchronized?
you should check feature support support without bump compatibility version.
I think we should change the message to "must be specified."
Please change to externalSearch =
redundant else
How about logging a message if we log the validation fails?
This should only be checking the editor is enabled if the editor is not open.
Kind of weird to have the same condition multiple times.
This looks like a nitpick. If the lambda above throws an exception, you can use the clause above to simplify this (no need to extract the code).
isSupported() is deprecated, is this intended?
Please consider adding an overridden version of CuratedContentPageObject to avoid formatting issues.
IMHO, these methods should rather throw a RuntimeException, so the user can get a wrong user. That should catch and throw a reasonable exception.
Wow, that's a lot of code. I guess it's better to be longer than 120 characters, this could be better.
When subclassing the builder one might want to subclass the builder as well. Let's make it protected?
I ask myself if we're familiar with this. I think this is the place to flag the spliterator and we need to ask the EnumSelector to be read from the outside. But now, it will be easier to read when debugging. I will ask myself if you're familiar with the operator and we'll forget to read the code.
I'd make it better to move the evaluation code inside the if block to be under a variable so that the code is in the same line as the current assignment.
would you please change all these if to LinkedHashSet?
Better to use ternary operator.
I think you can ignore this exception. It should be test as well.
There's no need to have protected here.
This test should be written to verify that a reason has the reason to be successful.
This is dumb. The problem is that you need to add the following code: - create a method <code>isObject</code> and have your <code>is</code> method, when you only need to add the necessary content. - create a method <code>isObject</code> that will replace this if.
remove this
Should be a check for it.
Why did you not use a loop here to check for null length? The loop body seems to be more efficient than the check for null length.
why not use this.name directly?
this is a breaking change - please remove
should return the 'null' instance.
Please add curly braces for the if statement.
Possible to log only one debug line here?
blank line
I don't think this is needed as this is only called from the UI thread.
I'm a bit confused by this test and shouldFailWitNoSchema test, especially the following part: java AvroItemWriter<PlainOldUser> avroItemWriter = new AvroItemWriter<>(output,plainOldUserSchemaResource, PlainOldUser.class); avroItemWriter.open(new ExecutionContext()); avroItemWriter.close(); avroItemWriter.close(); avroItemWriter.close(); avroItemWriter.close(); avroItemWriter.write(this.plainOldUsers());
Why is that at the top of the method?
.orElseThrow(() -> new IllegalArgumentException("The password is null");
*[x] This is not supposed to be anywhere in the project. It should be declared as private.
if (OS.getCurrent() == OS.WINDOWS) { return; }
If this is a string it can be null rather than an empty string?
You can have you also call getActivityManager.getApiKeyActivity(startDate, end, new Date(end));
Does this method need to be public?
Could be an ImmutableList.of()
If you are going to use this to be package level, you cannot have the following getter public: java public Unit(String symbol) { this.symbol = symbol; this.symbol = symbol; } public static Unit(String symbol) { this(symbol, symbol); }
@CTI777 this is ok.. because it is private.. we shouldn't expose IdentityLinks in our APIs, so no action needed.. just for you to know
Adding this to a field is good manner.
Instead of 3 lines above, queryStateMap should be declared as private.
Why is this public? Should it be static?
rather than you can use the method [createEnoughList()](<LINK_0>,%20java.lang.Iterable<? extends com.google.common.collect.Iterables.list(ArtifactReadable::getResults)](<LINK_1>
Please use assertThat instead of assertEquals, otherwise it gives better error messages if the assertion fails
Are we sure WFieldIndicatorWebElement is always a valid attribute from the outside? It might be safer to limit the usage of the class hierarchy.
OperandTypes.SAME_VARIADIC indicates a parameter for this type of agg function, but it seems this is the default value. Is TRA_VARIADIC being set to PER_VARIADIC? If so, would it make sense to use the existing method name. But maybe this is the default for AIDontUse.
Compare directly
The way I understand here is that the order of retrieveResource is not guaranteed to be called by the user. But this returns the resourceRetriever. If that is not the case, then why do we need to pass it as an argument to the cache?
Why do we need this?
This will throw an exception if the path is not in the map.
This is throwing a non-checked exception. I don't know if this is what we want
This prevents the registerClass() method from being called multiple times. I prefer the registerClass() method to be renamed to the actual class's name (and the name can be revised though).
Maybe we should include the bad version information here, since it will most likely ignore it and not actually warn the user about their issue.
Note that you are missing a backwards compatibility check here.
Why do we need to call initAndFinishButton() if it's not already called?
Can you remove the "this" from the first line? What about your refactoring?
these are public and not public?
Please consider adding an overridden version of the Script(String, int, Logger) constructor that accepts Duration to encapsulate this type conversion.
Please add a space after (
LOG.error("Failed to get note {} of note {}", revId, noteId, subject);
It's a long time to convert from a tombstone attribute, then maybe convert it into a range?
Why is this "protected" method and only "protected" is totally necessary to have it here. The only difference is that I would remove the "protected" method and keep the "protected" as it is not called.
It doesn't seem to me that there is any function in this class that we can only move to this location. I think this logic should be in the same place as I suggested above.
Use NewOperatorEntity.class
getKeyPrefixesForContainer(containerId)
nit: I'd prefer using WrappedBigDecimal.fromDouble(someDouble) for this.
You could do a contains here like you do with the ACCEPTED_ENTRY_FACTORY_PIDS.contains(entry.getFactoryPid()) check.
the stream is used here
can you please explain the reason of this exception?
I think we could avoid isEqualTo(500); as the test is testing the same thing.
Add a space after the if.
nit: omit this.modifiers?
I'm not sure if this is good idea to introduce executors. It is not safe to unblock them as Async.
PS, if what its intended to be, we should just use: java if (matchAcrossLines) { builder.pop(options); } else { builder.pop(options); }
I would move this into the executor, we can have a method like 'createExecutor(eventHandler)'
This method is very complicated. How about making it more descriptive and specific?
As far as I can tell, maybe it would be clearer to skip the loop if the jobBeingChecked.getCategories() contains category.
Just td/td.conf and use td.conf instead of System.getProperty
You can also use.collect(Collectors.toList())
Can you make this a static constant and give it a name?
I don't think we should log at trace level
SA == SERVICE_ACCOUNT? avoid abbreviations
I'd be happy to have assertions. Consider using is(L#30) or similar.
Is this right? When would this happen?
nit: I think we don't need to include these at all. I don't think we can include them at all.
Do we have a very descriptive name for this function? How about make it appear like we're losing the context of a fragment in one of the app?
Minor: you can use diamond operator here.
Can we make the constructors private?
If we do this in the initCommonImages method, this should be in the ctor.
Style-nit: Unnecessary final modifier.
Should we warn the server to crash if the given server was already closed?
return isInit && initException!= null
Need to use the final ByteBuf bb = Unpooled.buffer(4 + 16); bb.writeLong(lid)); bb.writeLong(eid); bb.writeLong(eid); return bb;
use short message
Can we delete this method, as it doesn't return an object, also we should have a test for this.
Was it worth checking that this isn't really true in the test?
Could combine the two calls to setXXX: params.setUseCipherSuitesOrder(useCipherSuitesOrder);
This should probably be public.
static?
Pool is busy (no available connection and the queue has reached its max size %d)?
You should use the class loader of the first parameterResolver instead of the direct class loader.
nit: you can also put TestConfigurationFactory.TEST_CONFIGURATION_URI_KEY on LOCAL.TEST_CONFIGURATION_URI_KEY and TestConfigurationFactory.LOCAL_TEST_CONFIGURATION_URI_KEY
this line should be removed
It may be better to use java.util.HashMap instead of the concrete class.
Duplicated code
You may also want to shutdown the executor, which you can use for the flush method
@njhill after some more digging this actually depends on the exception handling and better to use assertTrue instead of fail() <LINK_0>
suggestion public HdfsSinkConfig() {
Is there any reason why this should be exposed as static? It feels like its only used in one place.
HTTP_HEADER_CSP
You could ensure that stop at zero here.
ins't KEY2STRING_MAPPER missing?
maybe Gonamed.class.getName() should be 'null'?
If you're not using @VisibleForTesting, wouldn't it be better to call context.backoffMs(backOffMs) just in case we want to be sure that the backoff is thread safe?
There is no authorizationRequest anymore. I'd remove this
I'm not sure if we want to use this feature: "beta".equals(newVersion).startsWith("beta");
Seems like you don't need to get a list to find it, and then call getCannedACL()
Instead of adding the same string as a string, the method could just inline the string
Why so complicated? Why not just let the exception bubble up and let the stack trace know what they're catching?
Think this should be a deferent method.
can you add @Override annotation here?
the size is missing. Remove it.
There is a Composite needed here to avoid the unnecessary allocation.
It'd be a bit clearer to declare each switch in the Java operator.
maybe while you're at it, please put the transaction id in a variable
Only catch IOException, is it really necessary?
Probably it'd be better to return an unmodifiable Map here?
if (project instanceof IResourceConstant) {
make nonCountableQutoaVmStatusesMap a Map?
Same here, no need for the throws clause
Please make the method private.
Maybe we can download the image directly here
Why use isEmpty()?
shouldn't this be Optional.ofNullable()?
No formatting change
I think this should be warn
I think we should explain what is the user about sth. Not sure about the advice, as at AbstractTimeManager is the very important. But at the moment we go through AbstractTimeManager so we can assume that the user is in the UI thread or before we decide how to go. But at the very least we should log something to inform user. But at the point that the user is not able to recover from this situation (we want to know if the user logouts brakes in the UI).
This is unnecessary change.
We could add a message in the assertNotBuilt() method like we do for other set* functions.
What is the purpose of this change? We need to be able to call getCachedBytes only once. It would be better to make the change to read the entire buffer, like the following: byte[] getCachedBytes(RevObject obj, RevObject obj) { try { return ldr.getCachedBytes(streamFileThreshold); } catch (LargeObjectException tooBig) { tooBig.setObjectId(obj); throw tooBig; } } or: @Override protected int getCachedBytes(RevObject obj, Object RevObject obj) throws LargeObjectException { if (object instanceof LargeObjectException) { return type; } else { throw new LargeObjectException(obj); } }
Seems like this is a weird place for it. It seems like it would be very weird to have a single constructor with no parameters, and the connectort would create a builder, which internally takes in a list and does not need to pass in the map.
Please use Map.Entry method.
I think this is an purge operation and we should not rely on the fields being null before purging.
Is this change intentional?
This should not be sanitized because HTML is not valid HTML. The unsanitized name only present in the HTML attribute.
what's the point? The method is always false for DefaultDebugExecutor.EXECUTOR_ID without your changes.
LOG.error("Failed to open {}, e)
I think the process process should be called to add a entity to check for a null entity. Users can check the entity for null before adding it to the entity.
Another reason to deal with Iterables.getFirst is that you're using an instanceOf and not just the first element. Not sure but I'd like to see this, but it's very likely that there is a _single_ instance.
why public? Are you using other methods in the class?
return this.count < values.count();
This variable is unnecessary.
Could we get an exception if fBinding is null?
Why do we need this?
Can you move the "_isCurrentUser" string to a constant? Ditto for "_isCurrentUser".
.join() is missing
What about java updateProjecterStateVariable(newState);
Add spaces around =
This should be renamed to PermissionConstants.DEFAULT_APPLICATION_ComponentName_SERVICE_KEY.
we can merge these 2 conditions since the operation is the same in both cases ( result is the same)
We should check if the input is an LiteralPathElement to avoid the cast.
Thoughts on changing this from using withContext and a String constant in Storage Common to making this a helper method in Storage Common?
Suggestion: if you want to add a "for" statement to the exception, you can keep the stack trace and the code of the exception: throw Graph.Exceptions.edgeWithIdAlreadyExists(edge.id()) }
I think it's better to create a separate parameter and then call _updateHandlesWithNewPrefix_
Why do we need to explicitly assert that a format number is zero? that is why it is needed, because some tests use typical formatting style
ofNullable?
The null check will throw a NPE if certificate is null. Can you add a check for that?
Looks like this constructor can be protected and call via super.
This exception is a little odd. We should change this to throw new IllegalArgumentException(new IllegalArgumentException("No enum found for string: " + target));
I would log a more useful error message here.
This looks like it should be private or at least package protected.
Missing {}
super() is unnecessary
this seems wrong. now you keep track of the last one and not the first one.
Could this be changed to just Log.d?
You can use IOUtils.copy(inputStream, outputStream); instead of this.
Coud you rather use long?
Since all the process methods have changedBits, perhaps it's better to have the same logic in terms of maintainability?
Don't set statusCode in this class, just delegate to the appropriate constructor.
I'd say this is an Identity library and the contract we use for other classes.
Use expectNoQuery and get rid of try... catch...
This should be a static logger statement.
directly use assertThat(actual).satisfy(consumers))
Is this needed? Removing it should work as well
Why are you not using the random accessor?
Is there a particular reason that the 3rd case database path is called?
why the string is different but this is a something that we are using here?
this is really a noop. I think a better construct be thrown here and return a new list.
You could use the method that is called Strings.getSimpleClassFactModelTree(Class), which would be a better name than it was before.
@Rikkola why do you define a private method? use java.util.List to make it more readable
Objects.requireNonNull(buf)
TypeCategoryRole.class.isAssignableFrom(categoryName)
Missing @Override
no need for super
suggestion bufferNotFullCondition.await();
use hamcrest matchers
rename to fragment
nit: if we verify that the list is equal to the current number, then we should verify that the value is the same.
Let's keep the boilerplate as it is done in ClusteringServiceConfiguration and ServerSideConfiguration, and only the ServerSideConfiguration objects. Then we have a ServerSideConfiguration with a ServerSideConfiguration.
Nice touch!
The null check is not necessary.
suggestion if (result == null) { throw new NativeException("Failed to stop watch. Reason: " + result.getMessage()); }
I am talking about this one. All progress.split(1) step is require split on 1 second. Most monitors (including SubMonitor) ignore the progress.worked(1) and thus reach all its work on 2nd iteration. If you do this, I would have to add a numberOfObjectsOfChild(1) method to MakeProjectConversion.monitor to save the individual progress on its own. Then the progress.worked(1) call can be removed.
What if name is null?
Perhaps this.cipherInformation = null; could be replaced by: if (this.connectionsByCipher!= null) { this.cipherInformation = cipherInformation; }
Are all server-sides of the client not set it?
I'm in favor of just using the iterator and remove during the iteration..that's unneeded.
I think we need to add a new variable here to make it clear that this list is empty or not.
check for organization.getUuid()
Should make these values configurable?
s/vds/host
I think the constant should be WORKFLOW
I think it's unnecessary.
This is wrong, this is just a constant.
You should make this a class member.
it should be private.
Why have you added this check here? Shouldn't it be removed?
You don't need to call.onClickListener() here. This is what is done in the constructor.
I think we should use cached data structures.
I think it would be better to use Stream<String> here.
It seems like you've lost the validation exception. please check.
Can this be a else if?
You should probably spit out at least the class name otherwise ot won't be really helpful. As far as I remember, other classes to the same.
1. Why must the action added here? 2. Why must this be public? 3. Why must we have this method public?
suggestion return Collections.emptyList();
The purpose of this method is to make the serialization call instead of a field that is not valid (i.e., the post(SCT), but (i.e., a flag), that you can use the field here.
Why is this required? It is only used in getProviderSearchFilter().getEntity() because this method is called only once.
OK, so maybe at least just write it to the log in backend. If we are changing the allocation type in engine and not libvirt so at least logging it should be easy and I guess helpful for users and future debugging.
you're going to get toUpperCase(Locale.US) here, but then you're not calling toUpperCase(Locale.US) which is a bad thing.
use java tmpFile = Files.createTempFile(srcFile, "testData"));
could you please describe why this is needed?
This should not be public.
public void upgradeComplete() {... }
Just check this before you decide the order of the tests.
I would be interested to hear what the scope of the test is from? Does it need to be public?
Please extract the for each loop to a separate old school for each loop, it's better to read
You're testing that the string is not null, but the AssertionError is not given that it is provided by the SQL query.
suggestion return ID_MAP.get(identifier).get();
this.
Is this upper case required?
"A VariantErrorStatus has been added." isn't very useful.
This method is invoked by popAndRedirectMessage(). The current implementation of popAndRedirectMessage() is the method that you want.
![MAJOR](<LINK_1> 'Severity: MAJOR') Call "Optional#isPresent()" before accessing the value. [![rule](<LINK_2>](<LINK_0>
This checks a few lines of code and can be merged into one line.
@fanifieiev the same above.
What happens if there is no more then one line in the log handler?
This is a good place to make static methods. It might be useful to have a util method to construct these from the server and use it directly.
Shouldn't we check here
This method should be named the other way around.
public static
This is a bit hard to follow. Shall we pull this out into a separate method, and call it in CreateTables.createTable?
Please, remove redundant spaces between if and (.
typo? :)
Will be slightly better to have a test method for this.
since this is a default method, I think we should throw an exception in the default case.
![MINOR](<LINK_2> 'Severity: MINOR') Remove the redundant '!unknownSymbol!' thrown exception declaration(s). [![rule](<LINK_1>](<LINK_0>
I think this would be cleaner if you could use the service.call() method here.
It's better to use just GridCache<Integer, String> stopAllGrids();, there is no need to use the annotations here.
For consistency: consider using "final".
Why not just do queueModeHelper.createServer()?
Null check here.
Can we get rid of the containsKey() check?
this.clientEntity = EhcacheClientEntity.clusterCacheIdentifier - shouldn't it be CacheIdentifier?
input is not @Nullable, remove annotation or add null check.
We should probably catch the Exception here and return a Future.error from the method.
This should be just return client.verify(algorithm, digest, signature, context).toUtf8().
don't need to copy the list if you can avoid copy it
Should this method implement toString() to throw an exception, since it shouldn't be throwing anything like logging?
This feels like it should be cleaner if you add a constructor for the ThriftConnectorIndex that takes an Iterable<ColumnHandle>
you can avoid the else block by simply: metadataMap = gson.fromJson(metadataString, "UTF8"); metadataMap = new HashMap<>();
Why not returning app description? return new String(new String(view.getContext()) + " : " + ((LocationPoint)o).getDescription() + desciption)
java return LinuxStateItem linuxStyle!= null? linuxStyle.getHeightFactor() : super.getHeightFactor(event);
Can we add a rateLimiter.create(targetRate / numberOfTasks) for consistency with the other constructor?
Do we want to keep the value eagerly, rather than applying the filter? The idea is that we can get the value from the cache, such as we don't have a value to end up in this case.
Can we have an additional assertion to make sure the other events are non-null? Is that possible to have two different agents?
Why did you move this here?
We could the variable declaration and just use return decoratorClass.newInstance();
this LOG line is unnecessary
Use this.metadataKeys to be consistent with the other variables?
Use readAsString(...) instead
This is not correct, but this will return the version of APP_ENGINE_RUNTIME_VERSION
This method can be declared private
Is it necessary to check if the label is empty?
Is it passing of the log object from the failure logger to the logger?
please, add where the values are in the log
View.isAppLauncherEmpty();
you can make the same optimizations here as you did with the other ones: Counter counter = (Counter) checkCache(classSimpleName, key, metricName).orElseGet(() -> _metricRegistry.counter(classSimpleName, key, metricName));
Shouldn't this be transactional?
I'm not sure if it makes sense to allow this value in values/items but not set in the public API. The check should be done before we convertAltitude on the line above.
bad variable name
remove this as it was already done in the setup method
Please add braces, even if it's a single line statement
This boolean should be moved to an else clause and do the renaming inside it.
use try-with-resources statement
What's the purpose of this line? It doesn't seem to be clicking on another'verify' button. What's the purpose of this method?
add "this" qualifier
I think it would be better to leave the code as it was. Hardcoding the solution to the client might cause it to change the behavior of the CLI.
Why are we returning an immutable map?
I think you should also have if (isUser == null || isLoading)
Add a static import for Assert.notNull()
You need to test if the listener is present at the list before add it.
Not needed, the next statement handles it in the DB, do we really care if we have the status changed in the instance?
why do you need to convert ocList.size() to ocList?
no need for the VM parameter
When this is called, it must be the same as current state of the array.
This method shouldn't be public.
You could use microServiceContext.getService(getClass()) to get the service directory
I don't understand why that is not correct. If you are removing ConsumerPipelineImpl and using that instead of throwing an exception, you are not deleting ConsumerPipelineImpl
type should be List<Integer>
CM is a bit less readable than CM - CM doesn't appear like a function that can be used after them.
Use NLS.bind("{0}/{1}", new Object[] { {1}", name); } instead of String[].
Any reason we are using this class?
What has got a negative duration here?
Why public?
make this a constructor method
this should be in a helper method
suggestion MekHqXmlUtil.writeSimpleXmlTag(pw1, indent + 1, "typeName", type.getInternalName());
Nice. We should think of removing this function.
I think we want to make this constructor a Optimizer method, i.e. have a createWithTimelines() method which takes the compound search logic.
AFAIR this will not work in other tests as the name of the method is used in SqlShuttle
Does it make sense to move the member?
Can we please move this line of code before the if (currentAlias == null) { return currentAlias; } and avoid creating a new attribute for the null case?
You can use @Rule ExpectedException to make the test more robust.
Collections.emptyList()
onCompleted() is called after child.isUnsubscribed()
This should be public
Should add {} around this if part
Is this function called by the base class? Then the setTargetEnum method could be private.
you can use the ImfXmlLocation.EMPTY_SET instead, to avoid warning: return emptySet()
You should say <LINK_0>
we can remove the status variable by calling "return addEndpoint(endpointData);"
verify(fragmentMap.containsKey(id), "fragment id not in map: %s", id);
Same here. I didn't see what you set if it is the default
Why not just make it public?
As a convention, it is typically the responsibility of the refreshSomething() method to extract the style and change the figure. #refreshVisuals() typically calls all #refreshSomething() methods, then each method reads its own style from the notation, and calls #setSomething() on the Figure Also, #refreshSomething() methods are usually protected, so subclasses may adapt the behavior, without having to install their own listeners (Although in that case, I doubt we'll ever have to override the DurationLink EditParts)
nit: use warn instead of warn and add default:
hash = object.hashCode();
Are you sure you can use the hamcrest sand +() here instead of the hardcoded strings?
How about adding one more lambda to a method called something like isVelesPlayerInIncontentSlotDisplayed()?
Maybe we could extract the common logic to a method? What do you think?
This seems more like a reason to not use FusekiEmbeddedServer.
should be public
I'm not sure if this is really a good idea to use a different puncher store with a simple _values_, to avoid changing the way it is being called. A correct implementation would be to use a CountDownLatch(int, String) to avoid running this on the main thread and use that here to avoid having to re-computing the clock time.
We don't align on columns.
To be consistent with the rest of the code, it should be _public_
As this list is specific to the ArrayList, you should be able to use Collections.unmodifiableList().
Please make a space before the return.
the method name is slightly misleading, it's not a test
The new randomGenerator(RANDOM_SEED) should be the last argument.
filters method argument should be passed to isMessageInLogFile as an argument
Maybe DEFAULT_BARRIER_TIMEOUT_MS is a better name for this field?
It's fine to leave it at this point. It's not good to introduce unit tests for this method.
Can we revert this constructor argument change for classes that don't implement ResultBearing?
This test is incorrect. We should do a switch statement before the method.
@slubwama Why log the element and not the selected element? However, I think this method is not supposed to be used (i.e., click on the button and return an element)
@bdragan let's do this.origin = tr.get(); and then call the local variable "newTarget()" here.
I would use CollectionUtils.isNotEmpty() instead of the contains() call.
This is a lot of SimpleDateFormat, and we have SDKs to use it... If we want to have it expose it somewhere?
Nit: this.mChoices = this.mChoices;
Remove entire wrapper finally block
No need for this test
wtf?
Should we use the external ID here instead?
why put?
Could you add "final" here in case the doc is null.
From a previous attempt to fix sequence sequence is not obvious in hashCode.
Nit: You can remove the if here - the expected value is what you have done in the code.
Keep the suggested changes too.
The lists are just a fixed size size but you can use getOrDefault() instead.
Do you think this if the super() is redundant?
return INSTANCE.IOIteratorNext(this);
I think you need to add a connected property like this. While it's not obvious that the value of the enum needs to be hardcoded, I would suggest using a similar property like ACONNECTED and RECONNECTED. And you can think of that better.
Please explain when this change is needed.
AccessControlInfo has an IdentityListener which is used for access controls, so you can add a check here for identity!= null
We should add requireNonNull(parentMemoryContext) to the top of the constructor.
Rename "ann" to "rules", "rulesAnnotation" or something more descriptive.
Missing discard command.
Can we get rid of this, which couples the issues with the constant?
1. I think this is a leftover from the previous code. 2. If configBuilder is null, then we can't do Config.builder().fromConfig(configBuilder.image(NO_IMAGE).build()).image(NO_IMAGE).build()
Why private? Is it private?
Avoid using double check: java if (firstBound.getSymbol().isInterface()) return firstBound;
Can you add external resources to the ExternalResourceConstants.EXTERNAL_RESOURCE_KUBERNETES_CONFIG_KEY_SUFFIX?
same suggestion about static comparator
@vilchik-elena Why this? Is this method used in a few places?
Might be better to have dao.exist() and call it, but OK to do that later.
sorry for saying this change, but there's no real reason to call endDefaultOps with the "active" flag, just a note.
The innerIterator is the base class, where the inner one is the children of the inner one.
this is a noop, as you always send the Playlist messages regardless of whether the Playlist is a fp or not
what is the point of having this line?
An exception without any messages or stack traces.
Wonder if this would work. If you set the maxStrokeDashArray to a constant string, then you can safely use Double.valueOf(tempStrokeDashArray[i].trim()) to make the code work properly.
Extra space after (
This is always true in unscaled.isShortDecimal.
this can be "Host.getStats"
This does not work with java.util.Range.
replace with Preconditions.checkArgument
Actually, it seems this test only passes if the GM page is loaded or an empty <LINK_0>
Remove this.
This check should be removed.
If we add an assertion here, should we throw an exception if the value is null? This will prevent future from happening again if an exception is thrown.
pls use ST_service_ version instead of VERSION
The PaymentWorksVendor class has a [added method](<LINK_0>, therefore you could factor that out by creating a new criteria class for this proper service.
blocking calls inside the SDK are not good. they can cause deadlocks.
As discussed if I run this in my search query with the old result this would get the NPE
I understand that this is a duplicate of the deactivate method, but should this be protected? I mean, it should be like protected.
This already has a function to do the same thing. You can create a local variable here.
you should also process the null case here
Maybe extract this 2 lines into a method?
I would prefer to remove this boolean and move the constructor above it to a default value. That way if the feature is not enabled, it will still be easier to port the feature without having to set it twice.
You already log an error if JNDI log is enabled, as part of getAuditLogger() -- do we need this else statement?
3 return persist(roleSchoolDataIdentifier.setIdentifier(name));
This is redundant in Mockito 2
shouldn't there be a brick status for UP
Same: update to use a static final constant
One more debug logging.
This is not really related to this PR, but I don't think it should be done outside of the lock.
Same here - unresolved merge conflict.
.get() and not isEmptyString()
I know this is not a system but maybe I'm missing something, but I think we should have a test that covers all the fields. i.e. the user can read "No " and" they can be read, but the test can be writed.
Same as above. Also you can use the default ObjectMapper.
instead of info logging just one error message, we could log the exception message.
Should be meanf.
what if this method fails?
Should there be a unit test for isValid()?
Please add space around operators
This should be a static constant, no?
suggestion assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); I suggest following the existing pattern in this file and calling the assert() methods directly. Then the new import also wouldn't be needed.
should be a constant for "IndexingServiceFirehoseModule"
If we're using dockerHostEnv as the default it should be dockerHostEnv instead
Please catch specific exception(InterruptedException) not generic.
@stianst Is it better to replace ws-full-name-" by /ws-3.0?
Please remember the getter for this.
@xurxodev can you please use the constant from LRA_HTTP_ENDED_CONTEXT_HEADER here?
This variable seems like an unused variable.
we should use this(cache.getComponentRegistry().getComponent(EntryRetriever.class)) to keep the line 195
I think this will throw an exception if username is not found.
You're exposing these methods outside of the base class, not the with methods. It's a shame to me.
Can we also validate that elements is equal?
remove private
What happens when queueEvent() is called in the race condition? Maybe this log message should be moved into the if block and not in the middle of the method?
not sure if it makes sense to remove this.
We should also call setActionBarTitle(fieldName) here.
Would it make sense to make this private and remove the public modifier?
it's better to mock the DAO rather than using the getter.
result -> results
This line could use the default constructor of the builder.
Oh! No! You have just introduced the annotation above. :cry:
this can be condensed to if (!chkAuthorization(...)) { return false; }... return true and get rid of haveAccess
Can you add a AccessControlList.isEmpty() method to the base class to avoid the problem?
Why not just make this more efficient by making the map.keySet() mutable and then converting it back to a map? Then you can just get rid of the copying. Same with other methods.
return Boolean.parseBoolean(value);
Why fakeThread-unlockSimple?
Please don't use method names, it makes it clear that you are returning a list of objects anyway.
This EqualsBuilder.reflectionEquals() is not necessary.
I wonder if this should be part of tableName rather than query parameters.
ch is instance of Http2StreamChannel, why do you need to return it?
remove this line
Maybe you can replace all your if conditions with return Optional.ofNullable(activeEditor instanceof SessionEditor)? Optional.of(activeEditor) : Optional.empty();
Won't this throw a NoSuchElementException if the stream is empty?
Maybe extract this code to a method? It is repeated in ChargeChargeMessage and ChargeChargeChargeMessage, maybe even the same for those 3 methods. Also, I think the old method name is not necessary to get a "query" method. Maybe we could use a method there?
either handle cocoa like isSelected and aggregate them in a separate commit, or remove COLUMN_TRIM=24
prefer using the _Assert.fail_ part when throwOrDelay(e, " failed partition " + partitionPath), attempts, attempts);
Reduce the return type by returning a boolean primitive: false in this case
don't need this. You have a null check for the message, and don't instantiate it.
Please use the constants fromRepositoryHelper
Please implement equals() to provide debugging state information for debugging purposes.
declare throws please
What if I have a project with 10v > 11 and higher?
Nit: I think we can do return m.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().toString()))
Combine this with the method signature?
Can you move the By selector to a class constant?
Externalize all strings
nit: If we use this instead of calling it from a method is such a no-op since the onLoadFinished method is called from a parent class.
Can we inline this variable?
does modified need to be called again? I didn't see the purpose of this method. I would say remove it and set it to null.
Did you check that the point is not to be false and requireDrug is not null
This is on the wrong thread, you could just do fsManager.clearPostponedWatchEvents().
If this is not true please copy the code using this interpolator and get rid of this interpolator
currentDate -> now
Not clear why AIDL_LAYERS_PREFIX here
use an overridable getOperationTimeout() method instead
could be replaced with Objects.hashCode(projectUuid, analysisUuid, analysisUuid)
Please revert this change.
JdbiOptionals.firstNonNull(type, config)
You should add the ApiDefinition.POST here too
why do we need a phase tearDown here?
Is there a way to make this more clear and allow the user to set the defaults?
This is repeated more times, could we extract it to a common method?
Remove
We should return request; without the indirection and avoid the method being called in all cases
remove this
Add a new line after the colon so that the test doesn't fail
Please change SetResponse.class to SetResponse.class
please use with.name().
Why not return Collections.emptyList()?
:bug: this should be return Collections.emptyList(); and not return anything.
I would use JenkinsController.getCurrentUrl() instead of 'not(doesn't make sense.
Please handle that with an appropriate error message
I think we should iterate over all elements and collect them to be consistent.
Maybe we should rename this log message to tidKey.
Replace blocks with Block.isLiquid()
This test is redundant, it should just be returned returned
could be a bit clearer as this is a assert message
The options are not needed at this point. I feel we should leave it out as is.
names
The thread is already running in a background thread. I think this change is needed.
please use \n since this is platform specific
This method is only called by default, please remove it.
I would remove the corresponding line
This should be!Constants.INVENTORY_SIE.equals(ctx.inventory.select().size()) to be consistent with the other code.
Just a nit: you can replace this with activity.getApplicationContext()
No tabs please.
this right?
I think that every one should be configurable. maybe we should use the same preference as the one in the file.
When you create a StructuredClass to include the geometries, you don't need to add them to the list.
return block.isNull(position)?
dimValue.length() > 0 is equivalent
There's a method in JUnit 5 that can be used instead of the one above.
This code should not be here. The node queue won't be added to the queue until the node blocks up. So this is probably not the case.
The visibility of this method is more than private.
This currently seems wrong, we need to clone the entire array or the list-level array.
what makes this copy of list of iterator implementations?
Nit: suggestion } else {
s/cachedTables/cachedTableNames
maybe return dateFormat.parse(dateAsString)?
It is more correct to check if the group is null or not. The condition is correct but also it is clearer to write: return blockBuilder == null || (BlockBuilder.getPositionCount() == 0) || (blockBuilder.getPositionCount() == 0);
no need for the outer parentheses
There is something wrong with this check. You will do this in anyway if we have some layout changes.
Can this be done in the other way around? return false;
This should be a constant.
This is a good candidate for a builder.
In all the cases the name "openFLPath" is duplicated... This was caused by the 'openFLPath' being put into the same "openFLPath". Now each time there's a call to setOpenFLPath(moduleSettings.getOpenFLPath()). Makes all the variables part be removed.
don't you need to convert the exception in the response?
Math.<Node> buttons, long term, and also not right (is it enough with not-null?)
We should probably add a link to the ".discussion-dialog.is-visible" string, as it's checkable in the UI, where it is being shown.
WrappingDimensionSelector is already used for wrapping function. Have you considered using this.
How can you make this method activate() so that it only calls it with the name of the export file?
200 seems a fragile default, probably for some reason to set it to 200.
If the VM's compatibility version is set, the cluster compatibility version is different than the cluster that the VM resides in had before, this method would return false. The old cluster's compatibility version is different than the new one. I think the method should be changed to be called. The new one, the cluster's compatibility version is set by the cluster and the VM is ignored.
I would use: super(null, source, currentModel, currentDataObject);
I'd prefer to throw an exception
We are not able to do this.
catch more specific exception? when we get to the most specific one, we should catch it and print the actual exception.
return serialize(createFromEsriGeometry(new Point(x, y), SpatialReference.create(4326)); can be private and used only in this class.
isPermanentFail not deterministic?
For this should be AutoCloseable.
If we're checking forExpressionCacheEnabled, then the constructor in the next one will throw an exception.
The METADATA_KEY_DURATION header is not EVENT_KEY_DURATION
This is the same as AddonDependency now. Try asum.
Why public?
I think we should throw exception here.
suggestion return taskReviewsMap.get(taskUrl);
When cancel is called, it should be the last statement in the null check.
Why does this require the user to init its 'user' if it's not null? what does this do?
Call I18N.getString(String) (there are no parameters in the resource messages).
Parameter shouldn't be mutable.
What would happen if the node is not found?
this test will pass even if we want to use the same name
You could just use java return Optional.ofNullable(start.minusMillis(new long[_fullPeriod.toMillis(), _fullPeriod));
How is this method used?
I found a problem with this. This is the setTrace method, but in fact you need to have a trace with same ID as an annotation for the trace. You could use this: public boolean setTrace(@NonNull ITmfTrace trace) throws TmfAnalysisException { return fCriticalPathModule.setParameter(CriticalPathModule.PARAM_GRAPH, getId()); }
I think this should be going to be a _blank_ list. If so, I'm missing something else.
to make it public, I would prefer to have an public modifier.
Please remove extra brackets.
Make this static
I think that if you're going to update the profile anyway, the status of the update should be checked before getting the profile from the db.
Here, you are re-using the Registry instead of un-created the registry. Why?
There are no usages of this log statement if the below doesn't have any statement.
tracef
Not sure what the locks.Condition is doing. The name(NameCriteria.startsWith("await")).withNoParameterConstraint() is no longer valid. _)_
You should probably use the parameter map instead of calling it multiple times
This will throw NullPointerException if m_recoveredPartitions is null. Better to use.map(Integer::parseInt).
What about assertFalse(DELETE_ATTACHMENTS_STATES.contains(newState.getState()))?
FYI, I think this might be cleaner with a single command line java try {... } catch (Exception ex) { return false; } instead of just returning true, any cleaner way to write this as a single command line method.
This check should also be done in the operator.
A year and years are not required. For a sake of future mistakes.
You're missing a method!
Please add a getStorageId() method, for example: void updateSnapshot() { intent.setSucceeded(true); if (callDao().updateStatus(getParameters().getSnapshot().getId(), Snapshot.SnapshotStatus.OK); } else { updateStatus(getParameters().getSnapshot().getId(), Snapshot.SnapshotStatus.OK); }
I feel free to ignore: I don't think we need this, but the "'";
Nit: I'd suggest "in VisibilityGuard".
getter
This should be debug or trace
return battleState.getUnits(EnumSet.of(side)), getActiveUnits().and(Matches.unitIsNotInfrastructure()));
np: s/LocalApplicationRunner/RemoteApplicationRunner
Could you please use assertThat(checksum, is(empty()))?
You should follow the spec and the simplify of these two methods.
Please use the toString method.
This will fail on ClassCastException too, since you are handling the same event twice.
Does this always run on the same thread? If not, it should just be a standalone Thread.
Let's make all the accessors final.
I think we shouldn't use UndertowOptions directly. This is the only place where the connection is provided by the connection.
I think it's also a good idea to make sure the default is the same as the others.
if (subId > 0) {
This unwrapValue() should be called only if the model is a WFCORE-23: <LINK_0>
Why not have it as an instanceof check?
Maybe you could split this assertion into two?
Do we know that we're not throwing an exception here? If we have a, illegal argumentException, we should probably log and throw.
You should make this final or add methods in the class that can be accessed by more than once.
Maybe a util method that returns an Sd?
This is a nice method of this class. Just call it something like checkUnknownEntryTypes().
You can return the Iterator directly.
Not sure it needs to be public, just remove.
We should also add the default permission checking.
You don't need the true-argument method, the return type is part of the calculation
I would store this in a field
Better to use this. in this case that *null* isn't a valid map, and then it is not in the map.
suggestion for (int i = start; i < length; i++) { characterBuffer.append(i); }
I'd say this should be in FeedDataCenterData.
this method should be implementable
Formatting
Since this block is used twice, perhaps pull it into a private method?
1. I would prefer to use Objects.equals over object equality, since we don't consider equals() method. The reason is that we can't always use object equality, like we do in hashCode, in that case, we also need to check all the fields. 2. If you look at the code of the 7th line, I think that it is better to put null-check first and then the final annotations on the new line.
if this is false, we can write it as: if (offset == 0) { return ""; }
Why have you added these now?
How about logging the exception instead of just swallowing it?
I feel like this should be private.
nit: usually the name of this method is not "system_server"
Here we have a way to hide the active flag (for example, xml <refresh> <active>..> </active> It would be unexpected for the caller to decide what they are testing. Another way to do this is to hide the active flag after the method is declared - - to be sure in the setWithActive(false) - to better log a warning.
Nice cleanup, this was a nice fix for me.
Missing final
if you want to match the current selection, you can use [nextValue](<LINK_0>
instead of orc, 'transactional_properties', you can use if (acidTableKindToUse!= null) {
This should be removed
I would be more explicit about the builder pattern.
you should not compare two Strings with "!=" or "==", use equals methods instead or if both strings can be null use org.apache.commons.lang.StringUtils.equals
Sorry, I suppose I wasn't clear. I meant that using!= checks on the owner to find the unexecutable command would then not be necessary and could be removed. The only case where this check is necessary is to return an unexecutable command.
you don't need use replaceAll, because above you used normalizeJson
method can be called as part of the service, anywhere we are calling a static method can be replaced by a method can be replaced by a method reference
I think this could be removed
The toString() isn't a good practice. If cores is returned in toString(), you'll get 201 and 201.
List<String> temp = Arrays.stream(topics).filter(Objects::nonNull).collect(Collectors.toList())
This can be simplified to: record.put(1, pageView.userId); if (pageView.pageId!= null) { record.put(2, pageView.pageId); } return record;
@albinsureshanaparti In this case, when we write the channel as "refresh" it is done the way we do this remote command. We need to verify the state of what the local channel is in infinispan.log.
What does this loop do?
Please use interfaces where possible.
@vmaletta there is a better way to do it like this: issue.setIssue(new Issue.Smart issue(this.github, xml).get(); issue.ifPresent(error -> issue.getTemplate().post("Closed manually because of rebase mode"));
Another non-checked exception. I don't think it's necessary to catch Exception here.
This is never called, as Items::refreshItem has no effect. And it really matters since Items::refreshItem is private, which is only used in the private method.
@vilchik-elena Why not @Nullable?
Static import
I guess this could be shortened to final byte[] array = new byte[256]; int getUnusedByte(final byte b) {
return streamConsumer.get(stream)
this method should be private as it is only used by trace.getAnalysisModules()
as with the others, need to "remember" the first via, not the last.
it's a good idea to remove this catch block, and rethrow it as a Throwable as it's very wrong. I suggest we wrap the Throwable in the Throwable so we can be sure that it is consistent everywhere.
all these methods can be private
@bxf12315 missing a check to see if the value is null, but I never see why this test failed because it seems to pass null as the second parameter.
I don't see any reason to add the DSL.createFileSizeCount() here. I know the function is too big, but I would have thought that if the function used only in this class is a constant, it would help IMHO.
duplicate regex as above, can we reuse it?
Not sure if this is good. It looks like mLocked is set to boolean anyway.
You're not doing this. Sample here.
Are we sure that we don't use the erer to pass this as a parameter?
Since it's hard to see the expected behavior for this method, consider calling it and passing it to SchoolClassesToEnrolBy.
We should use the existing methods for these if they are deprecated.
Maybe an add to the map?
is this really needed?
This can be replaced with <LINK_0>
This could just be new ArrayList<Locale>(request.getLocales()), if it is not necessary.
Should we just return the references in this method? There is no need to introduce an integration test.
I'd use ImmutableList.of() here.
You're not showing the action here... is this line here on purpose?
Don't use Optional, instead.
add null check
Should be public, same for the other constructor.
user will definitely not need it, it is quite internal exception, which we could track in the logs
you can omit the check if ;) : you should always add enabledFeatures to the return value.
Please put the { (bracket) in the same line.
please add links as well
If this method will be called in client.getAllSources() then the variable will not be null.
if (req == null) { throw new NullPointerException("req cannot be null"); }
Initialize to immutable if present.
we can replace that with findAny/findFirst as we don't really need to know those vms
We don't include the underscores in the field names.
This will throw NullPointerException if type is not a ParameterizedType.
![MAJOR](<LINK_0> 'Severity: MAJOR') Reduce the number of returns of this method 5, down to the maximum allowed 3. [![rule](<LINK_1>](<LINK_2>
use ShellMenuItem.DEFAULT_TEXT_FLAG and use it in tests.
Should we create a descriptive constant for the above check?
This should use the bitwise inclusive OR.
Shall we change this to "Unable to resolve the hostname of the....". there are few other places as well with same error message.
both ejectLabel and ejectLocation are available
Maybe add a dash before this line to make it more readable?
Please use uppercase for the subsequent test.
I would make this property a constant.
We should do this the same way as we did with the other evaluate method
The indentation looks like it should be a space.
It is convenient to use a lambda for this.
This method is throwing an exception. It is also a sign of bad state for the encoder to work on, and that pattern is not very consistent with the rest of the code. Please add a TODO(or PinotLLCRealtimeSegment and maybe the IOException to checkState(e instanceof ResourceHolder) to a method that makes it clear that the byte[] result is immutable.
We don't need to explicitly create the map if we add elements to the or clause of the assert.
Doesn't this have a NPE?
Typo here. should be service_type
Newing it up like this will make it hard for someone to put in their own... The rest of the Nodes use a get() method to take the value and expose a setter so that it can be overloaded, can we do that too?
nit: Since it's not a test, I think below test belongs to: java Assertion.assertTrue(MCFooter.isMcfooterPresent());
null?
i think this is wrong. You're returning the value each time you call.toLowerCase, not the case.
Formatting
If the full path comes from a Java 8+, then we should be using -Dx=\"foo bar\" -version instead of -Dx=\"foo bar\" -version
Fail the test, if this is not what you want.
We need to propagate exception here and invoke super.deleteObjects(deleteObjectsRequest);
nit: since the param name is a default, we could specify the class name here. Also, we could remove the public modifier for this private constructor.
[ ] [<LINK_0>
Seems like this should be externalized, I think.
Could this method be static?
why?
I guess you are on it to be there is a race condition here
Since this is a "this" method, we should use this instead, and the [this](<LINK_0> call in setProgress method.
Is it worth using the.values() method instead of Arrays.asList()?
Just do setCancelable(false) here. Otherwise the group will be really ignored.
this can be null
can use the getter instead
This sounds like a user is wrong; not the annotation is
Aren't the namespace used by the creatableProperties method?
Should use the constant
This isn't the same as the old one, only public constructor
Possible NullPointerException.
return workflowManager.listUserWorkflows().stream().map(WorkflowStateDto::new).collect(Collectors.toList());
Why not use a newExpressionProperties(schema)?
This appendHtmlConstant("<td>").appendHtmlConstant(this.node).appendHtmlConstant(td>").appendHtmlConstant(td>").appendHtmlConstant(td>).appendHtmlConstant(td>").append(this.start.toString()).appendHtmlConstant("</td>").appendHtmlConstant(td>).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant("</td>").appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString()).appendHtmlConstant(td>).append(this.start.toString())
Why public instead of protected?
Can you add a second check that checks hasNext?
if credentials is not available, then execute push fails
@Override should not be public.
Would it be more readable to generate a "dummy" selection in the select statement? This way we could remove some sorts of code.
You should have this be ERROR
Change the name of the parameter to something like "queryParam" to be consistent with the parameter vs the parameter.
c is already UNKNOWN. might be better to have a racing condition here.
what about!selection.isEmpty()?
those two methods should be private
1. do we need a getProcessor() method to do this? If not, we can use FirebaseExceptionUtils.createHandler() instead. 2. do we need any handler implementation to get the exchange info?
please check the point.
Formatting.
I'm missing the call to provision below. :(
Could you please elaborate on why this is necessary?
There is no need for this check in this case - second condition is enough
seems like it can be more useful to catch the Error instead
We probably should have the Guava's Objects.getName() method, so we can get rid of the equals() method.
:+1: Personally I prefer a separate variable.
nit: s/null/null/
Why would the 'buckets' be supported by the server? If yes, it should be considered'region' as param in the method name.
Couldn't we just check that quality is not null?
this log message is too low-level. Maybe DEBUG?
@Happy-Neko Same here, use u == Use.X30.
Remove the InterruptedException from the signature.
Style-nit: No need to explicit close the builder.
If value is not number, just return (value.count.intValue() > 0).
please change log level to debug
suggestion return Objects.equals(value, ombieTypes.VILLAGER)
the only reason a string here is to keep the analysis: so there is no rule to parse a file. Really you don't want to capture a file extension, so you could just add a flag here.
what does getFieldReference do?
if not null, make this a default and make it final
Seems to change from ConfigRenderOptions to ConfigRenderOptions.concise()?
quayanders => quayandgitlab
I would extract "globals" to a constant, in order to avoid unnecessary string comparison.
this.
This should be static.
minor: can be final
Recently, @yingsu00 removed all of the uses of the related form of getUnsetBits to not have an Bits instance. Her change had a good effect on memory pressure, and in some cases increased performance. I suggest we use the pattern she introduced in this new code.
Is this really useful to keep this info? I think the "name" parameter was formated as well.
There's no reason to enforce this. We should use the'synchronized' keyword because of the methods that are called in a synchronized block.
It should be possible to use this.cached.lock().
There's no need to make this public, since it's only used in the master branch.
Too many spaces here, please.
Use with Preconditions.checkArgument
consider adding a logger.error(message, "SQL error while reading results");
This change is not necessary. computeIfAbsent will already map the attribute if value changes.
I'm not sure that's right that this method is calling the non-null version. The null check is redundant, as it's done by the caller and only add the null check.
I would use the logger format of your log message.
You don't need a transaction here
nit: use super(String.format("ERROR: partition column '%s' does not exist in \"%s\".", tableName, tableName));
put(key, value) should be executed from within the future so it doesn't through right away.
How about doing something like: "delete from a read-only table: %s".
you dont need to catch OseeCoreException here.
I wonder how this should be a cause. The Exception message seems to be wrong if the class name was not found. "class" is not the class name.
Can't ServiceHelper.getSelectedService be used? It has the advantage of not relying on the specific format of the url.
This method is a little long, that could be less complicated than it is written in a more compact way.
why not replace it with the constant?
return is not null?
The check for null here could be removed, as it's not used anywhere else.
Looks like the method is static. Can we create method it?
I think DIST or DIST, should be either DIST or REPL, or both
This is an extra-long line, please keep the method empty
Same as above, why not use try with resources?
I think this can be removed if you test this.
:bug: Should use hudson.security.active_privilegedactions.LocalToContainerPermission. Permission check for admin permission only.
nit: you can remove the if here as you return in the if...
@fanifieiev the same above.
Error message should be updated as well
The code of the CompositeReconcilerStrategy constructor should be used here, and in case there's only a single reconciler strategy, it should be returned directly.
If you change this test to using mockito to verify the message is as expected, please use [mock](<LINK_0> and check the message changes
I'm not sure silent catch is good as after that url is null and it will create exceptions
order of operands
This check is too logic... as if the view is not found in the pager it will always return true. Is that what you want? If not, I think your
You can get the status of the snapshot for the snapshot.
Do we need to check for null? equals may throw NPE?
throws
I don't think this is correct. If weakReferencesTolocks.keySet().contains(lockKey) returns null this will return null.
if (buttonEvent.getButton() == null)?
else statement is redundant since you set the first reference on the line.
Probably best to check the File set before and after the contents, so that it is clear to have assertions applied
This is check in the overriden enqueue method. I think this check is extra here.
Why do you want to check for null here? Also, I think you should annotate the fields as @NonNull
These strings should be in constants.
this temp variable is redundant
I think you also need to add the new pair with the quotes to the pair, otherwise the key will be obsolete as it is not a pair with not except the space character.
Please use lowercase as it refers to the argument: disposables is null.
Do we really need the full path for vcr.ssl.port? Can we just use getProperty("vcr.ssl.port", "")?
Please use try-with-resources syntax for close()
should this have a, to match the rest of the string?
Maybe you should synchronize on the entity stores instead of the view and then check if the entity exists.
you can use parameterized logging, no need to log and not just exception
Fix typo
Method name is sad since you are calling setContext here. I would prefer to use setContext() instead of accessing accessing accessing SecurityContextHolder.
We are not able to use the non-red word "secrets" by default, e.g. by "it is non-redundant"
here too, make it return Void, Void.
Wouldn't it be better to use Devfile.AvoidName() instead? Devfile.JAVA_MAVEN, ws, Collections.emptyList() is very much more readable.
subscribe and print the response status
I think we should also return the 'file' (for the user). This way, the user can see that 'file' is hidden when enableDataModelerDocksWhenHidden' is true.
You should check whether the i18n resource is a MongoDBRdfConfiguration or not.
Why this change?
please use "SeleniumWebDriverHelper#waitInFilesNames" method: seleniumWebDriverHelper.waitInAnyOrder(String, boolean) { return LOAD_PAGE_TIMEOUT_SEC; }
Since the constructor doesn't "return" the token, we use a different naming scheme here. Here is a suggestion for this method: public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient("foobar"); Assert.assertEquals(bitreserveClient.getToken(), "foobar"); }
Why do we need to pass this here? I think the setTitle should call the other with the setText method.
for ease of reading can you extract refSeqWalker.getSequenceDictionary().getSequenceIndex(record.getReferenceName()) as a final variable?
you're not testing anything here, but please, use Tv.THREE
can you please rename this method to isImagesAlreadyOnTarget()
Change it to a constant?
Unnecessary string concats
This simply isn't a property of START_SCHEMA; i.e. the alternative is to have: 1. Switch the order 2. Switch the order ("no schema" for alternative") 3. Switch the order ("no schema" for ("no schema". Is this OK?
Why is the check required here? Shouldn't the databindingServiceReference be removed?
This does not seem to be debugging code.
This is a good idea. The user can transfer the image to the parent.
Here you should be creating a new instance of experimentTaskResultRowMapper where you have several parameters, and then each of them will have the same id.
You shouldn't expose AbstractTest. Instead it's better to add a static method in AbstractTest similar to how it's done in timbuctoo-instancev4/src/main/java/nl/knaw/huygens/timbuctoo/security/dto/Login.java
Are we sure we need to do this in the presenter? I think we should use it to ask the connect handler, no?
I'm not sure we want to check for null here. The Intent.ACTION_VIEW should do the trick, no?
s/DbFacade.getInstance().getClusterDao()/clusterId
Shouldn't this be a field so we don't have to create one each time
GENERAL_ERROR_CHANNEL_ID, not the R.string.notification_site_creation_id
I think we should have an interface for the two setTitle methods, just like the old method which automatically takes the title and file name as a parameter.
Should we return BigInteger.ERO here?
This one too
I think we should not make this more readable by creating a variable for the lockInterruptibly() and re-throw the exception directly. That way we don't lose the lockInterruptibly() call.
Typo, SkinnableCharonPortal.CONTACT_US_URL_SUFFIX is also used in the method below
I think that this will be wrong. It just makes addInput(Page page) method, which can be called here. How about adding a boolean taskDataWithInput(Page page) method that returns a Iterable<Aggregator> or a stream?
what about moving this "else" block after line 156?
It seems to me that it would be good to not allow to set the boolean to false here. Would be good to have something like this: java public void stop() { if (this.reader!= null) { this.stoppedDueToParent.set(false); } else { throw new IllegalStateException("Waber stop"); } }
Can't we make it more general?
this method should be private as it was before, see also the other convert() method in this class.
I think this should be final.
This whole method should be refactored to a new method that returns the correct event notification (ie. when the processConcurEventNotifications is called and the mcurEventNotifications aren't null).
Could we remove the else if, it's confusing to read this's default value. Just use the reverse method.
why the change here?
Can you move the transactionService.required() into the try block?
Please add at least of project in order to check that the result is empty because it return an empty list
Note that this method probably isn't the Class Class.getClassLoader().getResource(classFolder) is annotated with @ClassRule, therefore the method name should be loaded directly. Then Class<?> to work around the binary files, and not the class name.
This is why you need the else block. The do you need the if block.
@bgeVam you should add int to EncounterView, to be consistent with the rest of the database.
The implementation of this method is more readable than what's supposed to do.
intents.get( plugin ).getAndIncrement() == 0 is enough for intents.get( plugin ).getAndIncrement() == 0
trackers.computeIfAbsent(destination, k -> new MessageIdTracker(config));
I think this would be better as: if (defaultMtu > IPV6_MIN_MTU) { defaultMtu = (defaultMtu > IPV6_MIN_MTU)? defaultMtu : IPV6_MIN_MTU; }
Why not add the return code? In other files it's easier to read, but not very obvious.
I would suggest returning this.jobName as well.
Why package private?
This should be injected with @Before and within the @After, no need for the afterPropertiesSet() for each spring. Otherwise we could end up with a ContextUtils#getEvaluationContext() delegate to that.
Try to avoid the need for the null check here if we have null.
Or we should not be public
This looks suspicious. It was my fault but I didn't understand the change in this PR. Can you explain it?
Potential NPE if other is null.
I think we should have protected access for the propertyAccessor.
This method can be private.
Exception again
ObaStopRequest returns null when we add to the response.toString(). So, this method would be like: java public ObaStopResponse getStopDetails(String stopId) { return new ObaStopRequest.Builder(stopId).build().call(); }
What about adding a method for getting the default URLDecoder?
What is the use of Preconditions.checkNotNull?
uploadItem1 -> uploadItem1
@bdragan performance-wise I think it would be better to write: java return new MkDocs(this.dir, this.name.replace("[a-z0-9]", "/"), "/");
remove tabs
It looks like this may dump a file if no files exists. Does it make sense to load the entire file just for a second run?
It would be better to stop the last one, for example: if a reaper ran, and you re-run, it's not re-initializing, which means that it will not re-initializing the executor each time.
This is wrong. When loadClass() returns null, this should throw NullPointerException. Exception should be thrown from loadPdx(String className) or throw new JdbcConnectorException( String.format("The name of the class '%s' could not be loaded because " + className + " could not be loaded because " + ex.getMessage()) would be better.
The consumer key should be the consumer name, or Hypervisor
If an exception is caught, should this be caught and handled somewhere?
Use TestPlatform.isBooleanPropertyTrue(System.getenv()) instead?
Can you pull this change into a private method? I know it was not used in the original code, but this pattern is often used for debugging.
Shouldn't it be "./" + absoluteManagedResource.substring( 2 ).split( "/" )[ 0 ] )?
don't need this.
Let's only use DsfDebugOptions... as mentioned above
return APITypeManager.getAPITypeParameters();
nit: remove(true)
This should not call fragment.children(). It should return a String instead of a String
I think it should be return executeCommand.execute(action, resultCallback); else you lose the "good" DispatchRequest in the process.
Why do you need to check for null here?
We could just return ignoreEventSet here
Won't the tests throw a NPE if yearMonth is indeed a year year, so the return value should be null?
Can you remove the + in the log message?
+ ", can contain more than 1 replicas of same partition"
you import ByteBuffer, no need to use the full package path
java.util.Objects.requireNonNull(dependencyResolvers, "dependencyResolvers cannot be null");
You could use Collections.emptyList() here
please just define on the next row.
You can use instanceOf here
style nit: we don't use braces around single line blocks
That statement should work, there's no need to modify the source here. If something is wrong maybe it's the file encoding during the git clone or other editor that changed the encoding. On my clone :  file src/test/java/org/mockitousage/matchers/MatchersTest.java src/test/java/org/mockitousage/matchers/MatchersTest.java: UTF-8 Unicode c program text
Update the method name to set the Bus connection
please add IP address to the end of the string
Maybe extract doesAccountGlobalHaveAccountRestrictionCodeAndNoSubFUndGroupCode() to isTheRestrictionCodeValidForEachAccount?
Why not have this method in the init method since it's not called in any constructor?
use an overridable getOperationTimeout() method instead
create an ImmutableCall and use it when clientAuthenticationMethodAsString is null.
if(StringUtils.isNotEmpty(domainName)) {
Please use brackets with if.
getClients(this, 0, cacheSession.getClientsCount(this))
This is not public
This is hard to read. How about adding a static import for Optional<ColumnHandle> columnHandles = node.getOutputSymbols().stream().map(node -> node.getAssignments()::get).collect(toImmutableSet());
Do you really want to throw an exception here?
Maybe use the constants for the return code?
Please use the locale object here.
What should happen if we use a zero-size list, _before_ we use more than zero?
new QueryResult<>() is redundant here
Does this change belong to the XML support?
So this is actually not needed anymore?
exception does not need to be caught.
Is addToResponseBody() being used from within any other method? Like why have this method at all? Alternatively, why do this single check within write() when you do other checks within addToResponseBody()?
use sprint.getAttributes(AtsAttributeTypes.StartDate).getExactlyOne().getValue()
You already have a click on the list view, so you don't need to use it again.
Nit-pick: like in HostNetworkInterfaceBondedListViewItem.java, the typecast could be inlined here.
Two things here: - It's not a disposed map - you should not call in this method. The proper call to dispose() does nothing.
I don't see why you need to have a loop in this case.
Does the checks are not needed?
nit: add a null check for config.getTableIds().forEach(tableId -> addTable(tableId, config))
Lets use kernal.logRegistry()
This should probably be: return pemFile.isPresent() || Files.isReadable(path) && Files.isReadable(path));
Any reason why this can't be void?
Rather than using a static method here, we should probably use Outcome.INVALID_CLUSTER_ID here.
nit: Replace with this.operationTimeout = Objects.requireNonNull(operationTimeout, "'operationTimeout' cannot be null.");
I understand that this is just left @jglick but I understand the purpose of this fix. Can you please update the config file with the following solution? first one should be there: SshUriProperties sshKeysByHostname.get(hc.getHostName()) -> sshKeys.isStrictHostKeyChecking()
why do we need a new ErrorCodeChecker here?
This should be a logger call.
missing space after =
Just a test method, it's not supported to support SWT.MULTI, cannot make multiple selections. Prefer to use assertTrue(e.getMessage().contains("Tree does not support SWT.MULTI, cannot make multiple selections.", e.getMessage()));
I see what you meant but that's a very confusing name since the collection holds VDSM events. I'd suggest something like: "Failed to process device for host '{}' - skipping VMs monitoring."
The identifier could have a method name like canonicalize(mit.methodSelect()) that would be a bit more readable.
please revert back this change and implement the required method.
Can we add some kind of druid table to the JdbcWraper constructor and use a RowType.toExternal() to avoid a global call to RowType.
'public' is not required.
Isn't it the normal way to do this, where you do this (as it is right now) that this will create a new zoneId if no zoneId is provided?
I am not sure if it's worth to break this into multiple lines. The message will resolve the deserialize and the actual shouldConvertFromMessage.
unused this.operator?
nit: looks like this could be private?
Agreed. It feels thisd be better to be also agnostic to the state of the item type.
This is very fragile, please change the log.debug() to log.debug("Request failed, skipping event sending, status=" + resp.getStatus()); That way you would have the stacktrace displayed in the log, not just the message, and you could add the exception in the log.debug() condition.
This should be a if (disco.includesFeature(NAMESPACE)) no?
Why not initialize all of those fields at the declaration site? This @BeforeClass in my opinion doesn't add much value. (It would make sense if any of these constructors threw exceptions.)
Please fix that
replace with: Mono.when()
Wouldn't a IntegrationTestInitService be better?
This line should be changed to the following if : if (log.isDebugEnabled()) U.error(log, msg, e);
error
This looks the same as the old method, safe side effect
The only thing I see here is that in the lock object layer, if the id has been created and the lease is different than the job that already created the cache, else, will create an entry with the same lease. Instead, do the cacheEntries.get(jobId) first and then use putAll(function) in the finally block.
I'd rather return this on one line and a FBO.get(fboName) at the end.
User can be null. getDistanceUnit() could be used instead.
This is a behaviour change (we now check that there are a few cases I can think of). I think it makes sense to split this out into two steps, one to make sure they are the same (and the other axed ones) the correct behavior.
This is a change of behavior. Some tests might have been relying on a feature that can not be found to provide a specific implementation. Would you mind changing all the tests to use it?
Shouldn't this be a field? It is already a set of bytes. It is possible for it to have to pass the input stream for a single file. It would be more appropriate for now to have a single InputStream implementation rather than a set of bytes.
Seems like the context must be closed in the constructor.
So, for this method, doesLastNRecentBlogActivitiesContain method is deprecated, doesLastNRecentBlogActivitiesWithOptional. Wouldn't this be better? You should refactor it into a method <code>Boolean doesLastNRecentBlogActivitiesContain method
i'd prefer to try to avoid the non-null assignment, even if attribute is null.
Please add a new array.
since it's not used, it's better to print the zone here.
This should be done in a single place, so I know how many times the caller has done it in a single place, but what about splitting a process with the current position?
i'd suggest you to use a more explicit variable name. This will let the reconnect decide which thread to reconnect. As a toRefiner issue, it may be possible that you use a method named reconnect() which could potentially do system call to reconnect() which could be called from within the reconnect() method.
These methods should be public
I'm confused by this line. Shouldn't the Expr.NumericBinding be returned if the value is a Number?
This method should return an Optional<Object>.
You don't need this log.
You don't need to use DelegatingClassLoaderBuilder here, if you want to keep the former, it would be easier to read.
can remove unnecessary checks
Magic number
checkNotNull for this, it is a bit scary and this is probably better.
I would recommend using [Guava's DataTables](<LINK_0> instead.
To be consistent with the other methods, this should be private.
Could you please make this method private? It seems to only be called from within the loop.
Unnecessary, the parent class is already called by super.dispose().
Why does this have to be protected?
We should use the method directly in AccessControlScannerThread. It can be used here to check for a specific condition.
Needs to be rebased on the unsaved commit handler.
call super() not needed
Is there any way toSlice may be a resource? The serialization buffer could be not modified because it may have in the same serialization buffer.
Again, you should use String.format(...)
not sure this is the right place for a String concatenation. If the user adds a space, it would be better to pass the string to the UrlSerializer.serialize method itself
can be static
Same here, use isEmpty().
I'd rather not fail the test at this point: it is a basic problem and a potential bug
This change should be a separate test, it's not re-used in the EX test.
I'm puzzled by this line, is this here to ensure that we check the instance when we get here, instead of just the 'flow'?
can you move that fragment into setADFNameDialog setUp()?
return waitFactor
Unnecessary parentheses.
the JPAMessageId doesn't implement equals() method, but the toObject() method returns a primitive int which could potentially be null. if you want to check to see if the value is null then it will return false.
use java.util.Set instead of using valueOf
new File(tempTestCase, GraphHopperOSM) throws NullPointerException {
same as above, use SINGLETON instance
I expect this will always be null. If there is a possible exception, with a message, would that make things easier to debug with the logs, with a message like "updateInfoButton.subscribe(button -> { button.subscribe(button); }
This is standard procedure in our existing Qualifier class.
A null check is required before using actionContext.getEditingDomain()
Can use validatePrimaryLanguage here and below.
what is this method for? It should be private
content.orNull() should be better.
this(null, ServiceDescriptor. ServiceDescriptor.getIconUrl()) should do this.
Can we not use EventHubProducer#createProducer by itself? It seems a bit unexpected for EventHubProducer to be created and changed by consumers.
I think we can just use Collections.emptyList() here.
Can you make MINIMUM_SDK_VERSION_OF_TESTING_DEVICE a constant?
Same question as above
I'd make it protected instead of public since it's not used in the new class.
Wondering if we should use the singleton pattern here: <LINK_0>
Once we start using placeholders, the getString() API can actually support it via additional parameters; it's pretty cool. suggestion String dialogContent = dialog.getContext().getString(R.string.confirm_deletion_message, " \"" + listName + "\"");
I think we should allow null for the parameter to be non-null. Otherwise we might get an NPE here if configurationMetadata is null.
Use InetAddress.getByAddress(byte[]) instead?
Is there a benefit of this constructor being public?
Please refactor the provider object to a method in ConfigUtils
Curious: don't we need to check for null here?
Thanks for the PR. However, I'm not sure if we want to use the compound filters for expression param or just use the one that wraps in the filter. I would even prefer to have brackets here (and the others)
This should be: assertThat(violations.size(), Matchers.contains( v -> v.getMessage().equals(message))
This should be outside the if statement.
@manuelplazaspalacio I'm not sure that we should have a check for hidden card type when possible.
Formatting. Also, fix the method names.
Once we start editing a space here (and maybe we should rename it _id_ to _id_ or something similar)?
Conditional actions in the table. Please check whether it's a debug debug.
Recommend adding a link in the report to the LBA Wiki that explains what this error is and how to fix it.
Just return mask.covers(entry.getKey()).contains(name);
This check and the calling thread above only.remove() is not needed.
Adding this should probably be done in the constructor, since Arrays.asList already takes a list and a @Singleton, so of calling this from a setter is not needed.
Are we 100% sure this should not replaced tag with the empty string?
You forgot to check [this](<LINK_0>, and [this](<LINK_1> for the [all other places in this class.
allowRetriesWithoutTimestamp * options.maxElaspedRetryOn. (here and below)
Why not use null instead of an empty list?
This is not the same as testDataSource. It seems getDelegate().getLock(), but getDelegate().getBlobStorage() is also a step back from a call. We should be more careful about it.
Not sure how expensive we expect here, but this has actually been package-private so we don't need to be consistent.
You could probably use read(InputStream) method
I think this is even better because it is because of the instanceof check in equals and hashCode are not equal
trace.getAnalysisModuleOfClass(TmfStateSystemAnalysisModule.class, moduleId) will always return null, maybe add a check
This will throw IndexOutOfBoundsException if an empty array is passed as the value of the method.
if (urlIndex+1) < urls.size() || urlIndex+1) > 0) { urlIndex = 0; } else { urlIndex = 0; }
isNotEmpty is not needed here
This function **and** returns true if there is no match. That's why I would change this.
does this not work?
This should be replaced with a guard method.
use of this is a prebrose cast.
Maybe just return an empty string?
This change can be reverted.
why not call the new method with null?
Add the exception as the second argument to LOG.warn(String.format("Could not duplicate entry for UUID: %s, attempt to re-push the record", usageRecord.getUuid())
Why is this necessary?
Is there a reason for logging this message?
You can probably add an assert around the directoryver array.
better to have fail(); in the onSuccess()?
:x: I'd prefer _org.junit.Assert.fail_, because the test will fail if it's not yet thrown.
Just return Collections.emptyList()
Should this be getNonNullRequestParamValue?
text should be defined in Constants.java
Why did you remove this if statement?
Null case maybe log an error or throw
Why the increment may be zero?
Missing super() call?
Can validateLocator be volatile or empty?
Here too, can we just use scheduleDirect(true)?
You should not write the participantStatus string here as it is already a String.
Can we call this method removeSessionOnLogout? That way we don't have to expose a method that is called via sessionOnLogout and only the one set of sessionOnLogout.
I think we should add a constructor like this: public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final int port) { this(host, port, port); }
Why do you need this?
The color should be hardcoded as a constant.
I would suggest to make it consistent with the null check. So if date is not set, it would be returned as an exception
Will this be hardcoded?
Use the existing constructor
Let's use other error messages. We normally have to say LOG.error("Error while creating flux component", e);
equals!
don't we need to guard this? if (numberOfRunningTransactions.get() == 0) { continue; }
@d onJobs one line, the code style looks better.
Nit: We can use producer.send(producerRecord) here
How is this expression different from "this"? I'm not very comfortable with the "todo" case, though, that will make it easier to debug in the future if needed.
Is this supposed to be part of the SDK?
Add a public method to VideoUtil#addRange. suggestion public static void addRange(Map<String,Map<KeyExtent,List<Range>>> currentState) {.... KeyExtent ke = new HashMap<>()); List<Range> tabletsRanges = tablets.computeIfAbsent(ke, k -> new ArrayList<>()); tabletsRanges.add(range); }
again.
Maybe consider moving these strings using a method in the outer class? assertThat(callSequence).containsExactly( "fooPostProcessTestInstance:TestCaseWithTestSpecificTestInstance", "beforeEachMethod", "test", "fooPostProcessTestInstance").containsExactly( "fooPostProcessTestInstance:TestCaseWithTestSpecificTestInstance").containsExactly( "test", "TestSpecificTestInstance:friendlyfriendlyfriendly("Test_subject"));
also check to make sure we only check the non-null values?
I'm pretty sure this message shouldn't be part of the checkInitialized(). At the very least, this should be terminated.
This should be enough to check the path for the current path operation?
warn?
You should use ContinuousTimeRangeCondition
I don't think this is necessary, because bp.parseLocal returns the bp value. Also, is it necessary to do this? I would prefer the construct to avoid a local variable.
Trivial nit: space after if
I'm a bit confused about this method. This method is two defineClass, but the second two defineClass should be renamed to AbstractTtoException or something like that.
I would suggest using now instead.
These two assertions should probably be their own tests, testNullPath and testNullPathWithRoot respectively.
never catch NPE.
finally?
Asserting here if it doesn't match rather than silently ignore errors might save someone some time someday.
Should be gw.destroy() also if the gw parameter is NULL, since the map is not empty.
set this to applicationLayer.addConfig(getUniqueName("override-"), config); and if it throws ProvisionException then get the same cache.
It's a bit confusing to have a builder with a builder. The static methods with the "Builder" appears to be the thing you have here, and there is no need for builder.
This doesn't seem to match the expected behavior, what is it?
nit: suggestion String addressOne = "your-job-id";
Wondering if this is a good place to catch IOException.
nit: space between if and (
TestFilter is not enough to compare instances of this object. You could use equals() method from TestFilter.
You can call this.setTimestamp(timestamp) from here.
Is this necessary?
externalize
These should probably be private.
return Arrays.hashCode(delegate.hashCode());
Shouldn't a cast to int be enough?
This is a final class. Please remove this.
Again, we should use Unneeded braces.
Please move the "protected" modifier to a separate method.
No assertions needed here?
Suggest logging the boolean result of this.vertexName as well.
There is no need to call super.checkIfUsernameCanBeChanged() here.
This is the wrong error reports and that we should return two error reports instead of one. Use a list of errors.
It seems to me that it should be replaced to cloud.removeDynamicTemplate(podTemplate) where removed_Template is called.
I think we could use a different exception than the one returned by the method. That way we could avoid the need to fetch the file if we can.
use getDiskInfoDestinationMap().get(diskImage.getId()) instead of getDiskInfoDestinationMap().get(diskImage.getId())
Is this call related to PreviewImageFragment? If so, then 'view' might be getting deleted before the click.
I'm a little confused, but what's there on this. Does it mean that you're returning an empty list?
Again ;)
please use RuntimeException(e) here and in other places
please make sure you are rebased. this method was renamed on Feb 11.
Is there a reason to use the throws Exception here?
this is deprecated since the RuntimeException in line 59 will use the appropriate exception
So, we need to have this method readAsCsv(String filePath, String fieldDelimiter), why is it needed? I don't think we need to pass the conf to the DataSink constructor if we need.
Please use assertEquals.
How about replacing this with it.
@vilchik-elena > This class is not necessarily a singleton.
Yes, you're right.
I think you will find that there are 1000000L nanoseconds in a millisecond and not 1000L as you suspect
exceptionally is not handled by the function. We do not want to log this error.
super nit: > 1
reduce to debug
Let's use hamcrest matchers here: assertThat(k1, v1, k2, v2)
Might want to call listIncompleteUploads(bucketName, prefix, true, true) to make it consistent with listIncompleteUploads
Please add spaces here and create a new line.
Does it make sense to wrap the exception in a checked exception and wrap it as a checked exception?
On the web, there is three ways to render from the year: 1- someone possibly using a year for the day, would this break too long switch statement? On the web, there should be more than one place to control the difference, would be nice to have a more meaningful error message.
I would suggest using synchronized here just in case inProgressRebalanceOperations is null
Throwing exception is not a good practice.
Check if the instance of the same instance is created in the class, otherwise, java.lang.Objects.equals(addr.getValue(), getValue());
This implementation is going to create a new HashSet with references to every date in the calendar every time this method is called. This seems pretty expensive given that it has to be expensive.
Please use log4j.
You need to close connection as well since you are not closing it in the finally block
This can be simplified to return action.composeAction()? AUDIT : NOT_AUDIT;
Is there any test case in this test method? Not doing anything
nit: try to be consistent with the indentation's: for (Capable result = projectControl.canPushToAtLeastOneRef(); result = MagicBranch.checkMagicBranchRefs(repo, project);
Please revise this statement
nit: Not sure if this is used anywhere.
Because of the changes to supported item types, this item is taken care of in the BindingConfigParseException. This should probably be removed.
no need to cast to Table here
what if newAttributes is empty? The logic should be here to be more explicit.
suggestion long now = System.nanoTime();
Gerritpicking: This is not a bug, as the cache is a Gerrit managed by the service. Use the getter.
useless
it would be better to use append here, otherwise the method name in the old format will be different.
That is not a good practice in Java. You can do.flatMap(Map.Entry::getKey).collect(Collectors.toList());
Is this method threadsafe?
Great, just noticed this is a problem!
You're changing the semantics of a computeIfAbsent call. Why not just call this method directly?
Can you call this(scope, value, value, sampleRate, tag) that matched? You can save the same rule for the same reason.
I think this should be a Mutation instead of a Mutation since its not a Mutation.
you can't do this in a check file but really needed
We need to rename this variable to diagnoses.
Would be nice to have this method private?
same here with being logged-in user
This commit appears to duplicate changes from the one above. Please make sure that nothing is happening via the action bar before sending the entry count.
I would just return int[] here. It would be nice to have an explicit return value in the method. But it would be nice to have this method return void.
are we not going to do this on every request?
This should be synchronized
Why not something like this: checkForAdminPermissions( throws Exception.class, () -> new ("Group", groupId)); instead?
Would be nice to check here that the methods you replaced above are working as expected.
Does this need to be done in pipeline().release()?
why is there a test for the update?
I think you shouldn't need this as we check it also for permissions.
Why not use Preference.APPLICATION_SCOPED.get(BriefcasePreferences.BRIEFCASE_TIME_PROPERTY)?
UncheckedIOException is a good idea, but guava Closer handle that.
Wouldn't it be easier to use the [StringUtils.isNotBlank(topic)](<LINK_0> instead? (note that the other checks for the payload to be!= null, but payload.length > 0) could be applied.)
Try to keep the code more readable, and avoid try/catch. It's just a matter of taste, but the test can be simplified to assertNull(e.getRemoteCause());
I think we should have a Java 8 lambda syntax here instead of multiple loops.
We can remove the StandardCharsets.UTF_8, right?
I think we should pass here and below: java Path of SeLion home directory. Reduces the output of this function and the following layers are required
do we have to add a method its own page object?
Can you use an actual list to verify the returned list?
Code style: result = interval == null? interval.hashCode() : 0; * result = 31 * result + (condition!= null? condition.hashCode() : 0);
Is it possible to inline this variable? java String api_creds = "<LINK_0>", api_creds=" + creds + "Basic " + creds.getBytes("UTF-8"));
We probably need a finally block here if rollback() is called.
Separate @VisibleForTesting and readAnalysisJob() are not thread-safe but it seems you're exposing the same configuration outside the class. Then it would be better to have a single method readAnalysisJob(final InputStream analysisJobXmlHdfsResource) that would be capturing the dataCleaner.
increase to selector
you can just change this to endpointRegistry.deleteEndpointRegistry("abc1");
Can we change the default to commitOffsetsQueue > 0?
Any particular reason that you published an event instead of publishing an event?
IllegalArgumentException is possible here. I see it is not handled
Check for equality of the json mapper.valueToTree(Collections.singletonMap(...), or better yet, of course.
Yeah, we should have a explicit transport type.
I don't think FileOutputStream has a _really_ used anywhere. I'd prefer this isn't just a single file.
Optional
IIRC, 3.4 already had a discussion with @alzimmermsft, could you please add a TODO here?
nicer to have a method IncrementableEntryVersion.incrementVersion()::IncrementableEntryVersion to take care of this. Would drop the not-so-nice instanceof.
Should this be "getContainerId"?
As setInstalledLineNumber, I think the setCurrentLineNumber method should also set RESET_INSTALLED_LOCATION
suggestion int fileStateSizeThreshold = 1024;
suggestion this.distanceTolerance = MIN_DISTANCE_TOLERANCE;
Hardcoded xD
nit: not sure if the list could be empty, as it is a list instead.
I suggest using Iterables.all(tail, tail).
nit: not sure if'subFields' can be empty
use java.util.Objects.hashCode(helper, Object)
lowercase for character names.
to be consistent, maybe use Objects.requireNonNull?
verify that fixedLifespanScheduleGroupedExecution is not null
Is this necessary?
I think a generic type returned should be removed (and a field declaration).
This isn't thread safe, so you could use'synchronized'.
Let's use different naming variables for each method? Maybe we could use [this](<LINK_0>
please add metrics to this log
why doesn't tags have a CDATA section?
java String courseName1 = SanitizationHelper.desanitizeFromHtml(courseName2); String courseName2 = SanitizationHelper.desanitizeFromHtml(courseName2); return courseName1.compareTo(courseName2);
one small nit, for local variables please
This method can be written more simply: java this.metadatas.stream().filter(metadata -> meta.getKey().equals(metadataName)).findFirst().orElse(null);
Consider using the Busy API here as well to support an immutable version of the other public API.
it should be renamed to applyStereotype
typo " shoud"
this is a breaking change, while we are working on a OpenShiftExplorerContentProvider code
now that we have some permissions in common in ImportVmCommand and ImportVmFromExternalProviderCommand, we should probably move the code that currently exists in ImportVmCommandBase#getPermissionCheckSubjects to ImportVmCommand and have the permission check on the destination cluster only in ImportVmCommandBase as it is common to all import commands, what do you think?
can be replaced by: return Objects.equals(other.sender_id, other.recipient_id);
This is mostly wrong. From the transform method, it basically returns null, which will cause a NPE.
You can set the label test in the ui binder file for both versionLabel and userNameLabel now.
I removed this line, it gives the button to have enabled="true" and this also gets used in the first place. I suggest that you could just make this a switch statement or a.equalsIgnoreCase()
Is this really needed? Maybe you could just do: long dueTime = getNextAlarmDueElapsedTime() * MILLISECONDS_IN_SECOND; long newDueTime = 0; long newDueTime = 0; long newDueTime = 0; /// suggestion + (getBoundIntervalInSeconds() * MILLISECONDS_IN_SECOND) * SystemClock.get();
I think we should log a WARN and include cost function name in the logging.
I think this is where you should be using the non-FileFilter implementation.
Dangerous assertions here
Minor: Might be better to make it final.
This is not right, it can't be stopped.
this does seem to cover some people who might have a legit reason. but some do "gc/runFinalization/gc".
Can we use Objects.hashCode() instead?
do not forget to use setDeleted() method and use "setDeleted()". Use method appointments (it should return id to you)
Can this be public?
Shouldn't this method return Flux<Message>?
Why is this method required?
what if data is null?
This nobody is using the default.function etc. I think it is a good idea to create a private constructor that takes the timeoutMs as a parameter. (Or better yet, create a Builder.)
This test is not testing NormalizeUserName, but should assert that input is non-null
This is called way too many times, would you like to consider reverting this method? It's very easy to forget to add a new equals for the trigger.
extract this to static field.requirement
I think this should be more clear: java String actual = null; if (lastError!= null) { description.appendText("AssertionError with message: "); description.appendText(text); } description.appendText(reason);
spaces in (boolean) and tab
I think you can replace this.peek().forEach() with this.iterator.hasNext()
neither of these need to be a concurrent data structure. if you just make the addTriggerChangeListener method use an atomic write, you can avoid a double read.
you can use assertFalse() instead?
negative logic
return segmentsNeeded?
nit: I think we can write this as return "value == null? "" : value.toString();
Needs a null check.
suggestion throw new InvalidSettingsException("No Files selected.");
Why are you catching the exception and then catch it?
There is no need to catch Throwable here, just let it throw.
It's not lower-case, but how about this constant in for segments?
setTimeBoundsAndIntExact(data, minorFraction)
Shouldn't this be checkEntityTypePermission as well? I mean, action == Action.CREATE || action == Action.UPDATE?
note that the locationListing field is removed later. I'm not sure the newScope is really used for finding the SnapshottableDirListing. I think this deserves a separate issue.
Here we want to be checking whether the files with the commit text is what we want to create. Also, we should probably check that the files are valid.
This could be the way it was before, but this is only used in the field declaration.
Could this be an Class field?
It would probably be helpful to cover a test case with an assertion here that you expect selectAll to be null when creating a new activity with a null reference.
remove the one again
Can you use isEmpty()?
@erimerturk let's rename this to Folder
@pefernan here the message should be: KieServerMode.DEVELOPMENT.name()
Can this be public?
How come we call a method called scheduleMessageForRetry?
can we use DetailAST.class.getSimpleName() instead of hard-coding the same name?
There's no need to check for null.
redundant newline
nit: add braces around this statement
This is better than Assert.assertEquals(), since there are only 2 entries in the left.
are we OK with null? If not, please remove check. (sorry for the PR)
firstNonNull doesn't sound better.
Here you should probably do a List<String> geocodes = new ArrayList<String>(); --> it is only used in tests
nit: Maybe add the default value to the DistributedQueryRunner constructor and call this one with different name values.
using java.util.byte[(int) Math.ceil(source.length / (double) chunkSize) will simplify this code a lot.
I'm not sure this is necessary, if you switch the order of running '/' from the main UI, it should be something like this: LOGGER.info("Is this value anymore? Although this will make the code more readable, it's not much different.
I believe it would be more understandable to do the following: // Throws a GitLabApiException if format is invalid format = checkFormat(format); Form formData = new GitLabApiForm().withParam("sha", sha); Response response = getWithAccepts(Response.Status.OK, formData.asMap(), MediaType.MEDIA_TYPE_WILDCARD, "projects", projectId, "repository", "archive", ".", format);
Missing this.
Add "this" qualifier
can be shortened to: ILogData loadedVal = fetch(address); data = readCache.asMap().computeIfAbsent(address, k -> loadedVal);
We might want to add a set method in the RenderingHints constructor that calls set(hints) for consistency?
I don't think we should use lazySet here. It is possible to use lazySet for other threads, but it still can't be modified concurrently.
If these objects can be added to the map, the remove will get called more times.
Not sure if this is the right place for this method. Why don't you just call model.getProcessFormModel().getProperties()?
Why is this better than return "null"?
This constructor should be public. No need to instantiate a new list if it's not needed.
Here should be the above method
Should probably have an "else" statement since it's more a one-liner
Should be a assertFalse(succeed) test, with the message if it fails.
Seems like you could use computeIfAbsent() here.
Any reason why this condition is not?
Enforce immutability.
Maybe we should extract this as a constant.
This can be made more compact.
There are no race conditions here. Do you want to store this in the cache?
We should use a different exception handling than catch(ReflectiveOperationException e).
Just an observation that in the case the null is passed as "null" to the map, it will force the reader to handle nulls.
Can you please remove redundant package modifier?
Remove unnecessary public static void hideKeyboard(Activity activity) { if (activity == null) { return; } else { if (focusView!= null) { return; } }
Is this a valid name for? Should it be 'org.eclipse.ptp.remote.internal.terminal'?
Why do we need this?
this.
return PROVIDER_MAP.computeIfAbsent(provider, p -> new SegmentStoreTableDataProvider(trace, p));
change to var name
Collections.emptyList()
This may not be a problem with self-contained.
This should be public
Work is generic, so addPage method can be used directly.
Use base64.trim().split("\\t\\r ]", "")
Sorry for the PR, but for future refactoring, you could do this: java return decode? new Text(Base64.getDecoder().decode(text)) : new Text(text);
Might want to go with using this.name
Why do you need to reset the gc()?
what about this? I think this is in line with the method below.
I think this if block is especially duplicated as the logic in QueueImpl. I can see that simpler solution but it also makes the code more readable. Since the classes are not static then we can implement it in a single place. I have a question. However, I wonder if it is not a big issue here because I can think of it more readable.
trim it to make it more clear that if the feature is not present then you can just do: return!Boolean.parseBoolean(get(feature).trim());
static
externalize "Actions"
The Task class uses a Task.Builder as well for this task.
I would check for null.
Is this call blocking?
This should be declared as private static final.
If we add a metric, we don't register it.
Now that looking for this method, let's change the log messages a bit Let's have instead these two log messages logger.info("Skipping file: {} ", source); <- remains unchanged logger.info("Not skipping file: {} ", source); <- just before the return;
...and add "throws IndexOutOfBoundsException" to these methods
I'm not sure i'm following on this method. Why do you want to split PR out into two? It seems more complicated than one way.
Can you please put spaces before and after if?
Should also be catalog?
Does this have to be public? I think you can't think of a public method.
This should not be necessary because it is a way to escape the owned iterator.
We should also compare with the same size as we have in equals().
same here. Please add a new constructor
Should we use!dataFile.getMissingRunTypes().isEmpty() here instead of checking size > 0?
I think this should return an immutable list. We should throw an UnsupportedOperationException when a method is not implemented.
this field name is confusing since the parameter passed to the constructor is a File but this is a File.
public
The concern here is that recipeFileContentProvider equals to RecipeFormatException
Formatting
This test checks topic creation. Why do you call replyTopicStubs?
@m-g-sonar you can get rid of this.
Last thing I think this is actually easier to follow
Could we better use basePath.isEmpty() instead of list().length > 0?
LinkedList is not needed here.
Can we add a space after the {
Did you take a look at this? <LINK_0>
Ternary operator is easier to read.
This method is probably invoked by the caller of this method. Should it be synchronized?
@ekondrashev let's use Tv.TEN instead of String literal
Should be 'if (progressState == SWT.INDETERMINATE) return;'
this is not necessary, the test for the existence of the instance should fail if it was removed.
shouldn't the test throw the exception, it will be marked as a failure too, with complete stack?
This is not a good idea to return an enum here to have it look at the shape of the security level
This could be a bit performance-wise as we used in more than one place. Maybe we should add a method to RStateObject to avoid this awkward check.
use guava for equal and hashcode... reduces code a lot
This method doesn't seem to be used anywhere.
Are we sure that this path separator is always correct?
Duplicated logic, shall we move it to a single method?
we probably want to say something like this: "Traced a call to {} that {} to{}. It will appear in system_traces with UUID={}",
Move this validation to PluginProperties.
Why do we need to cleanup this?
Why is this hard coded? Can't we use the static variables defined in Constants.java?
Instead of having a rootObject here, we could just make it final.
so we are changing the signature here to be a public AutobatchingAutobatcher<Map.Entry<Client, LeadershipEvent>, Void> leadershipEventProcessor; We should be able to make the factory a ConfigValue that returns this map instead of a concrete class.
The client can call getFromValue() here, right?
Don't we need to return true here?
Format the code, I'd probably put it in a.properties file.
Maybe we should just set requestInProgress = false here. Since the message is an instance of ERROR during network operations, it should be done in.log(String, Object[]).
Looks like this is missing a case for the DELETE and INSERT....
Are we sure we need keyStorePassVersion?
Missing braces.
please move checkName = ast.getParent().getType() == TokenTypes.LITERAL_CATCH; to the if
This is also backwards compatible with java 9, so there is a WARN here.
Is this exception verifying that the cause of the exception is the correct way to do the exception?
add an error message
suggestion
I am concerned that this change doesn't solve the problem. From what I can tell, it's only a single thread calling cancel(long val) method, right? I am sure that canceled is always null, but cancel is always true
Wouldn't it be better to initialize this with Collections.emptyMap() instead of new HashMap<>()?
please remove System.out
By composition, do we need this?
You can replace this with j.createOnlineSlave(new LabelAtom("test"), env);
Maybe return null?
again I think you can use to stream here instead of the for loop.
Let's take this into account. Separately, this method is hard to read.
:+1: But I guess we want to use a special case here.
This seems redundant, because the break below will always end.
you could remove the first {}.
can we do it in the constructor?
This would be another place to check that we're not already existent block.
Should this be "Float value encountered in query " + value + " in query"?
Actually, can we just return mObjectIdMapper.getObjectForId(id) or even return null?
Use newHashSet()?
wrong formatting - every parameter should be in new line
This block can be moved into the synchronized block.
An unescaped.newAccount works for clarity
Why this change? It seems to be checking the fact that addItems can be called with a boolean.
Don't swap the two lines before it?
nit: this is Optional.ofNullable(metricName.safeTags().get(ADMN.TAG_CURRENT_SUSPECTED_LEADER)).filter(x -> x.equals(String.valueOf(currentLeader))).isPresent(); though I'll leave this as personal preference
Shouldn't this be private? Or should it be private?
Can call the method directly, like f.getPopulatedErrorMessage(...);
you added synchronized to the method here, wanted?
@vilchik-elena There is a verification in the test method that ensures that the session exists as part of a test. Let's remove the verification from here and just let the test method only get a single session with one session.
I think it would be better to have this method return a Nullable Long instead of a Long.
Another suggestion here, to make sure it's a no-op.
nit: jut call super.setForceCloseTimeoutMillis(...) this will also ensure we do the correct thing if we ever change the super method content and will allow to make forceCloseTimeMillis private
This assertion is redundant, since the get(0) checks the first element of the list.
I think this can be simplified to: if (visitedUnknown || thrownExceptions.isEmpty()) {
It's using + and/or + to build an Point, that's using territory.add(new Point(0, 0)..
Please move the try catch to a separate method and remove the catch clause for RuntimeException
unused
please replace the second part of if with: if (!Guid.isNullOrEmpty(clusterId)) { performActionForServicesOfCluster(); }
private
Is there a particular reason that you only use this one for the first question in selectQuestionNumberDropdown?
This is valid.
Should be more meaningful, you can use the method directly
I don't think we need to clean this up. It looks like the temporary directory is stored as a temp directory.
please export this method to a function to improve readability
If we call this constructor in all cases, it can be called with null parameters.
deleteFilePath(jobExecution)
I think it is confusing when startCount = Finalizers.INSTANCE.finalizingObject!= null when the Finalizers are created by other threads.
minor: this could use a constant like EMPTY_CACHE_ID
This should also be res = ToolRunner.run(new JobClient(), args);
Use Guava Streams.stream(entityTypes.spliterator(), false) instead of StreamSupport.stream(entityTypes.spliterator(), false)
Shouldn't this logic be moved into simplificationInternalClient.getConvoKeyAsJsonString() method and referenced here as it is not just a static method as it is used in more places?
We should also hide the search view here.
I assume the path separator is enough: /.+
You can remove this check if you set a default locale.
Please remove "my://" and "port parts" as we discussed.
Spring Security builders are not typically additive - instead they replace. This allows Spring Security to gracefully load any data. What that means here is that if the application has configured any XML file (which it it is). In that case, what we could do is to ensure that the value is fully loaded.
please remove this statement or enhance it to something more context/meaningful
You can remove the IF here and just let the guard below be removed.
This can be a boolean, I guess
From <LINK_0> I still think that a declarative programming approach with streams is a much more elegant implementation than Stream.
[Checkstyle] INFO: '200' is a magic number.
( Usually upsertMode == null, I think we should have less than 1 field in the enum.)
I would use an 'else' clause: java if (CollectionUtils.isNotEmpty(sourceFormat)) {... }
returning List<WebElement> from here is redundant.
Why do you need this check?
This should be 'Delete'.
As we are moving implementations to the private method, it would be nice to make the method private.
Why 5?
you could return false here and move the if into the waitForSegmentStoreCompletion method.
Unused
This should be super(new MockVaadinServlet(deploymentConfiguration), deploymentConfiguration);
"While trying to perform POST: Unsupported operation for Admin service - OK"
>byte
We should not use the model-command ID in the message. We use the ID of the default value in the properties file. Please change the name of the property and use it in the message.
return boolean.
Can we move this to tearDown?
I'm not sure this is the right thing to do. Why is this called a public method, and not a public one?
Annotations on the wrong line
requireNonNull
[minor] Space before :
why 'key:'?
Is this needed? I think that "" is of the name when running in the future
MinecartHooks.COLLISION_EXPANSION, 0?
nit: PRT support -> PRT support
List<String>
You can refactor this into a method and use it in all places.
(!rootDir.relativize(filePath).toString().replace("\\", "/");)?
You could use Double.valueOf(0) instead of Double.valueOf(0) to make it clear that you are using "sum", not an empty object.
Nit: we should assert the name, it makes it clear that it's not empty when it's empty.
instead of calling into this method, i suggest to remove the call to notifyOnSubscriptionsChangedListener, then call it like: notifyOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
nit, deeply nested functional chain. Consider using a CollectionUtils.getMatches method.
please insert the error here, since this is for the users, there's no reason to catch it now.
Is it possible to just call Frontend.setFilterQueries(filterFrontendQueries()); here? And that might be a more functional approach, where we would need to add the FrontendConfiguration of this listener.
this test should be executed when the merge is invoked, you should not call the new method with num().
why not keep the reset methods in the test?
suggestion this.endpoint = endpoint;
If there's no exception to be thrown, we can remove this line.
You've added a bunch of methods in between the two overloaded versions of initializeAppResources. Please move the initializeAppResources definitions next to each other, it will make the code easier to read.
I think this should be replaced with articleContent.clear().
The exception message could be simplified to "The parameter named 'type' is null or empty or empty".
This could be replaced by default to new HashMap<>()
@marchof I'd prefer to keep this line generic, so that we have one or more subclass of AnnotationNode.
This looks like a duplication of code, instead of calling getSaveButtonDisabled() twice, would that be simpler to: public boolean isSaveButtonEnabled() { if (Existence.existsImmediately(driver, getSaveButtonDisabled()) { return false; } else if (Existence.existsImmediately(driver, getSaveButton())) { return true; } }
The locale should be logged here.
"execute is null"
why do we need this equals?
What about moving this test to a helper method?
This should be implemented such that this method is called on the GTK level.
delete empty line
Can we change this to be logger.debug?
Why make this a _last_ partition? Isn't it because the previous_partition was true or not?
_minor_ I would have a dedicated method for this.
Make "Kafka" a constant.
The simpler way to create a feature is: AdditionalFeature feature = new AdditionalFeature(Guid.newGuid(), "libgfapi_supported", Version.v4_1, null, null);
No, this method should be called setter.
It looks like an error is reported in the log, not that it has a format string. I'm also adding the result of the constructor with a name like "createUsingAnnotation".
A space after the =
the name of the method is misleading. getItems() is not the default Collection, and the predicate is the same.
I think "search operator requires a String" is a better error message.
This is wrong. We should not use Stream.range(2, max + 1) here. It is only used for anything else.
Why public?
suggestion throw new IllegalArgumentException("Serialization strategy can't be null");
What if we have a Version of this configuration? What if we don't want to change this?
This is a breaking change I guess.
If the owner is deleted, does this mean, the API will be deleted?
remove public
just call.put(pid, arg) here
API breakage errors. You should declare another method and mark for deprecation this one.
this looks like a different behavior as I think it should be sufficient
Maybe add a constructor to BaseRealm with a current name?
else clause can be removed
This line should be executed on failedContext.getParentContext()
Prefer using assertThat instead of assertTrue
new executeUpdate -> new AllOpInfo() will do
We should add a new constructor here for errorHandlers and options.
Why is this call needed? You could just call updateActionAvailability() and save the code
Please replace String.format with %s
Nullable
Shall we move this logic to SOURCE_OF_REPLICATION to keep it as a constant?
Are the options nulls guaranteed to be non-null?
This seems brittle, as the test is now taking care of deleting the dictionary.
Extra line
This should return false.
I'm wondering whether we should cache the object in memory as well?
I think this can be removed as well
wdyt about adding init() and the following if statement to the finally block to make it clear you don't have to do if (loading_ == null) { // do nothing }
hardcore ftrace.trace....
same question
From dataGeneratorListMap.get(topic): Maybe the code may be simplified by using the AmbryHelper.emitData() method and this could be called here.
Those two should be equals (and even ==) rather than going through FQN
this appears to be unused
This would be pretty nice if the size was replaced with 1 to avoid that.
Where do we handle exceptions?
- this code is a duplicate of previous ephemeralPath. - It could be broken if we use data.length() - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length - ephemeralPath.length == 0
can you make this return a getGroupedJobInitializer(which you have defined), and then use that as a constant?
The compareAndSet should be called after the set, right?
What is the reason for the brackets around boolean success?
Is this thread safe?
same opinion here :) (though break logic here seems correct)
i'd prefer to return List<Order>, and remove public
why this?
java return!tickets.isEmpty()? false : new Vec3d(pos)
can't you use constants.empty() here as well?
Here you can wrap the findAny call, it will be much more performant.
It's an extra parameter.
@weisebrazil There should be a test that verifies that remove-ups release is removed first.
![MAJOR](<LINK_1> Remove this unused method parameter "input". [![rule](<LINK_2>](<LINK_0>
No need to add spaces around arguments.
return?
Please check also left content, in order to be sure that left model has not been modified.Please verify all other tests that present the same problem.
why is getParent() called directly?
Could you please remove this line?
I would prefer to push all of the commits into the commit message, as it is more obvious from the context that it is a param in the ctor.
Since this method seems like a huge object, consider making it a method in the model that returns the ArticleIdentity.
You cannot do this, it will lead to the first data that has been read. If you want the view to be cleared, you could put the received data to the parent ITimeGraphDataProvider and do a data iteration.
Same remark as for the other concrete class.
Missing final.
Should we still delete the user if the user is already deleting the data?
the public modifier is not needed here since the class is public.
ENABLED.equals(getStatus())
I think this can be ACL.impersonate(ACL.SYSTEM) like in AbstractACL.run()
Same issue as with trace
Please add braces to if and clause.
nit: Does this need to be a separate PR? IIRC, Java won't be able to construct  with user.home.
the return type should be M
We need to set a flag internally on this listener. Then, if in this block, we don't need any new logic, right?
The lines 69-83 are duplicating what you intend on using equals(). But here you're duplicating the label and equals()-(..) for the same reasons. Please use NetworkUtils.isLabeled(getOldNetwork()) && NetworkUtils.isLabeled(getOldNetwork()) && NetworkUtils.isLabeled(getOldNetwork().getLabel()) &&...).equals(getOldNetwork().getLabel())
Minor: can use Objects.hashCode(key) here
Take the look at the getContentResolver() method, this should be useful for usage.
These two lines probably can be combined into one.
Can we rename this variable to memberValue?
find a better name for this method.
Do you want to enable what the error is?
Check if credential and registryUrl are null before creating the serializer.
We should be able to use instanceof comparison where possible. Please find all of these methods more complicated and understandable.
You should just use 'randomIntInRange()' here and pass to the validation exception.
I see onsesetAnnotatedType(AnnotatedTypeWrapper.class) being called on the declaration of the annotation on line AnnotatedTypeWrapper.setAnnotatedType(wrapper); in the else block. I wonder if it should be moved after adding the following annotation to the beginning of the method: java private static Collection<AnnotatedType> AnnotatedTypeWrapper<NoAnnotationBean>> AnnotatedTypeWrapper<NoAnnotationBean> runnerOverride { Scanner consumer = new AnnotatedTypeWrapper<>(bean); if (logger.isDebugEnabled()) { logger.debug("AnnotatedType is not a proper package"); } }
This one should be private.
Wouldn't it be more obvious to have this method public?
do we need to.set(true) here?
testK and v2 are not guaranteed to be the same.
Parameter validation should be done in ruleConfigs map.
Not sure if this is supposed to be shell, however the test is failing if it is not enabled (as in line 148). TimePeriod.VERY_TEXT_UN).click();
A lot of this logic seems to be reused for each name. Is there a way we can generify it to save some code duplication?
I'm not sure this is correct. In fact I'm worried that we're retrieving stuff from the template, but in other places where I'd like to see things like this.
[minor] Is this code the same as the app loading receiver? It looks like in a different way, it currently doesn't use the Application context.
CancellationException is used
You have a list of methods for this except the ones in the SDKs. Maybe we can make the method static?
suggestion protected static void addFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {
I wonder if we should be adding an own method like: public void submitFirewallConfiguration(final KuraConfigService configurationService, final KuraConfigService jutlityService) {... } Then we can call it from here: <LINK_0>
can you please replace this with: return StringUtils.join(mTopic, mTopic.length() > 0? element.toString() : "");
why is this?
Just to be sure that there are no padding, consider switching to the XML file, in the.xml file just to use the new method XmlStringBuilder(XmlEnvironment xmlEnvironment).
Would it make sense to call checkLatitude( latitude, MIN_LATITUDE) first? If so, it would be better to call checkLatitude( latitude, MAX_LATITUDE) and throw an exception in the else case.
nit: I think it's easier to just have a nanoTime() function
could we make a constant and use it here?
This visits several methods. How are you clarifying what's driving the analysis? We could also make it more convenient as well.
I'm not sure this check is necessary. If we decide to go from the _last_ value to the iterator of the alreadyAdded (or in the set, right?) we are already sure that the list is not empty.
suggestion EMPTY_VALUE);
try with StringBuilder
Shouldn't the TradeDate/tradeDate be null here?
return candidateService.getCandidate(candidateId)
Why does this method need to be public?
You can push this directly to the frame so you don't have to worry about it.
Also keep the stacktrace in the log
The helper method here can be private.
why is this noncompliant?
This should probably be removed since the mainMenu is the mods reference.
not sure why this synchronized block is needed here?
s/fileContent/with-\u00F6/
To avoid code duplication, I suggest to follow pattern from the "getHostId" method: Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId).withoutRefresh(), aQuery);" and the "getHostId" method would be more simple: public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) { final String query = "query dataCenterId"; if (query instanceof IChannelState) { query = ((DQuery) source).withoutRefresh(); } else { query = "query dataCenterId" + query.withoutRefresh(); } }
calling this command will not move the host to up. need to think of a way to activate the host and keep a flag it already been attested i thought using the method just above
This doesn't need to be public. It's private for this class, because we're not using it outside of the class.
tableScanPlanNodeId
This is also used in the other resolveProjectedDimensions. I'd suggest to inline this: java private Set<ColumnProjection> resolveProjectedDimensions( Table table) { return resolveProjectedDimensions(groupByDimensions, table).stream().map(column -> resolveProjectedDimensions(table, column.getName())).collect(Collectors.toCollection(LinkedHashSet::new)); }
Please add "autoteleportenabled" to the config key.
you could use the super constructor here
Should this be in the constructor?
vanilla generator has no world type, right? This will throw an exception. LightProcessor should use WorldWorldType.ipulfiller.
This variable is useless. Please just use return in your if/ branches.
Is this still needed?
suggestion void performCheck() throws Exception {
Maybe skip the null check?
Should we introduce a method which is used to create the Text object?
Take a look at ResponseData.Builder.
Can we check if the path exists and createDirectory() return true?
Can you move this Assert.assertNull into the assert method?
Should be public
This should have a static logger method with a code
You can use the ECApi.postLog overload as well.
Type is not used.
isn't there any default exception that might be thrown here?
Is this still needed?
Why public?
this should be in a try-with-resource block, right?
I don't think it's necessary to instantiate the Message object here. The static way to do this is to pass the correct compatibility version.
Why Pausable check?
Maybe we should check it is actually necessary to suppress the warning.
Missing @Override
Same as above, assert that message is non-null?
nit: missing space after =
I don't think you need this if.
can be simplified as java private static String startAppiumServer() { final String port; try { InetAddress inetAddress = inetAddress.build(); } catch (InterruptedException e) { fail("Network local machine doesn't have a port 'null'"); } }
You can use a stream here to simplify this: return untrackedFolders.stream().filter(folder -> untrackedFolders.stream().filter(folder::startsWith).collect(Collectors.toSet());
Use for-statement instead of 11
The validation is on the TraceCollection Port and not the one that checks it. So, this is a duplicate of the code in the "validate" method. Can you put the check for single port in the method above?
I think we should add a INFO log here.
final?
If I understand correctly, getPlanNodes will fail if planNodeCosts are empty.
It's the default value of the property to set in the constructor?
Doesn't this duplicate duplicate the logic in the if (deckName.charAt(index-1) == ':') { return null; }
you need call addColorSettingsListener on the new instance.
Can we maybe call this(id, Id,  queryParams) instead?
what if processFuture.isDone() is true?
This is not correct. You should be able to use [HttpHeaders constant](<LINK_0>
why not deletePodDeployments?
This will include the proxy-generated value for the hash code.
There is a typo in the error message.
I'm not sure if there is a need to keep this if, because it is already done in the save method.
We do not unpack it for all the inequality operators. Because of that i assume that the assumption is that the higher bits are always zero (or the same). Therefore i don't think the downcast to int is needed here.
declare failFilter inline
I don't think this is necessary. It can be simply an empty map.
Argument name
The checkstyle param isn't on the right. checkstyle will complain about that.
Since we have a service with the same name, I wouldn't like to use that personally.
I think you meant to use SalesforceHybridSDKManager.getInstance().getLoginServerManager().getSelectedLoginServer().url()
We should also add @since one_ID to the private static final int ONE_ID = oneId.of(Calendar.getInstance().getTimeone().getID()); return ONE_ID;
you can check the empty list here
Who else uses this? Instead of running this, can we just cancel the running countdown?
It's not good to use final
I'd say this should be 'aria_scan_enabled'
By removing the return value of this method, it is not clear that this method is returning a null value. This is returning null if this line is reached, but the function is empty and returning null.
Is this better than using Opcodes.ISTORE?
return ((Number) val).longValue();
Why not using the image object instead of creating a new one?
Let's not change the name of this method to "finishColumn". Also, the test is quiet hard to tell what the value is.
Use templateFileName
Consider the CollectionUtils.isEmpty(this.applicationDefinitions) instead
Do you want this to be nullable?
Change the commit title to say "Fix potential overflow in Bing tile functions". Also, for better readability, add parenthesis around (long) tileCount.
please don't use thread-safe Closer here, it will prevent the test from terminating.
This also seems to be a negative if we check in the max uniticipation limit, not just the number of unsued items. Would it be more clear to assert in the end here?
I don't think we need this test.
What's the purpose of this init method?
missing check that vm exists.. (getVm()!= null)
if (configuration == null) { return new RemoteTouch(this.getExecuteMethod()); } return this;
Don't log the exception as it causes it to be re-thrown as it's "caused by" rather than swallowing it.
If disabledAdministrativeMonitors is empty, could we not add the new one? Otherwise, you're not touching the disabledAdministrativeMonitors variable.
Could you explain why this is no longer necessary and rename the logOrProcess() method? The message should be something like: "Cannot rename folder"
should use equals
I'd propose to change the string "j-" to "Pool management process started (id: %s)"
Is it necessary to remove this method? When baseName is null I think it is.
why not have this(storagePoolId, vmId, vmName, null); in the ctor
spacing (s/b/c/dk)
This is a debug statement and should be removed.
Is this method used anywhere?
please check if docker connector is started with property "die", not sure this is good.
It should be & 0xFFFF + 1
Consider making a check for null check.
Can you correct the name of the enum here? "Final '" + this.beanName + "' channel";
You need also to call configureConsumer(answer); also as well.
Should be ceilingKey().
outClosed == null is redundant.
Looks like everything in the toString() can handle this.
Do you need a mock here?
The int result should be primitive int
I'm worried this is the same as the expiration time. When 'getExpirationTimer' is called, the systemerr will be always success.
Do you want RulesProcessor to have a RulesProcessor? Also, is it possible to pass this in null or empty RulesProcessor?
[65][index](<LINK_0>
.filter(mbeanPredicate, configPrefix)
Static import
this is not really a service at all, please use private void notifyViewpointIfNecessary()
I wonder what this is doing. What it does it mean?
to remove, just use new ArrayList<>() in the constructor, two lines below
new Double is redundant here
return Uri.EMPTY
We can use type-safe stream here instead of the raw type. if (dataService.findAll(DYNAMIC_DECORATOR).map(Entity::getIdValue).collect(toSet()) { return dataService.findAll(DYNAMIC_DECORATOR).map(Entity::getIdValue).collect(toSet()); }
use instanceof instead of PrivateKey
Can't we use the constructor that takes in a String?
add StringUtils.hasText(exTypes)
Even if it's already visible, I'd leave this up to the base class as it is.
you are always returning true here?
would it be easy to interleave a bad operation with a bad future as well?
@m-g-sonar I don't like the indentation here.
An IllegalArgumentException can be thrown here to avoid a NPE.
How about using a compareAndSet?
this lookup for clarity, I think it would be great to have a contributor named something like contributors.
Nit: This could be called in a lot of places.
in case closing one grouper throws ex, we would still want to close the remaining?
If we are using the assert, we should have a NO_OP implementation for the DownloadBatchStatusCallback
What we are waiting here on?
Can this test be a little more descriptive name? Could you please tell me where this line is used?
qry -> query
The exception is never thrown.
Too long and nesting. Please consider refactoring into more lines.
This keySet is an immutable object. You can change it to be: this.keySet = Arrays.asList(key);
why not use paramsMap.compute?
I think this method is a bad practice. What do you think about adding clearAlarmRegisterRequestDto to the clearAlarmRegisterRequestDto here?
Is there any reason why the beans are added to the listableBeanFactory. Notice?
Should the getIdentity() method be moved to the SyncSessionSession class?
When you will use I18N.tr with _non-null_ and try to use I18N.tr with _I18N.tr. Is that correct? java final String bDont = new JRadioButton(I18N.tr("")); bDont = new JRadioButton(I18N.tr("");
Why don't you just pass the InterruptedException to the constructor?
Same here, this check on the scale and should be done with other objects.
no need to explicitly create an empty map for var args
if you make the method private, it doesn't need to be public
requireNonNull
What about?
isAvailable is technically true, so can be removed
Is there a reason to use start  threads in multiple threads? If not, I usually write the [initialized variable](<LINK_0> as a possible compromise.
prop: For consistency, consider calling assignedState(tp).preferredReadReplica = null instead of setting it to null.
I don't think this method needs to be protected, it should be private.
return uploadingPost.hasPendingMedia(PostModel.getId()) instead of null since we are at it with a null check.
Adding this to a field is good manner.
does this need to be public?
can simplify the code like this: java return Arrays.stream(partitionRangeList).map(x -> toFeedRange(xRange));
Should probably be gc.setTimeInMillis(System.currentTimeMillis()) as you are going to have the lowest priority.
I would suggest name this 'is not "feedback-copy-modal-status". [link](<LINK_0>
Maybe we could just call index.drop() and then delete() the index.addSuppressed()?
style-nit: we don't use curly braces around single line blocks
Static import
Why are we throwing an exception here?
new Boolean() instead of.toString()
I think this should be package private (to avoid the class)
I think it would be better to look for ParsingUtils.appendToPath(filename, extension) because it's used a lot of times within the file.
it seems we could do it by creating a new class or calling it from the util class.
If the storedAccount is already non-null, then we can just return true. We can remove the check if storedAccount is null.
Same here, return ImmutableSet.of(this.resultStream);
this is exactly the same as the next line
Hey @0nkovs, we are returning -1 for dates unknown in the method signature. I think that it is necessary and we should use that from the PR too. If you do want to have a test for that, maybe it is necessary to change _date_ to _date_?
I think this method should return null (ie that it exists), and to not return null.
assertFalse(...);
This is the same as the old line of code. We should use String.format() instead.
This is a bit hard to follow, but why do we need to return an ListenableFuture here?
"data" is in a plural noun.
As the selection is done in the HttpService.java, I think this is not needed.
I think you can use Lists.newArrayList( getOffsetString(name)) to avoid the need for the local variable.
I would have used warn instead of warn.
nit: it's easier to read if you inline.anyMatch(c -> coverageId.equals(c.getCoverageId())));
if requests are null, don't we want to return null?
I think GENERATING_CONTENT is better to have a flag that checks whether the event is in the model and not whether it is in the model. The current logic can apply to the events of the model as well, so that we can ensure that it's valid in the model to send the correct image.
Why not use trim() for trim, as above?
Don't forget to remove this println.
You could use [Guava's AreaEvent](<LINK_0>
Although AsyncClient is deprecated retrieving event loop has some additional checks. Could you please check AsyncClient.get() for an example.
debug?
Here and below: I would prefer to write if (insideTryStatement &&!isResourceResolver(tree)) {
Again, this is not the right approach. We should always create a Response with one element.
This method should not be public
if the log message is going to be printed, log would be nice
This breaks backward compatibility, why is this needed? Can't we move this code to a separate class?
should this be synchronized?
I don't think this is right. The method scheduleTick(worldIn) is already protected by super and already super if it is used. The following is nice to avoid having to use super to avoid call super
We do not use this. on Alpha() but it is a common common method. I would skip this and use Color.RGBA()
(nit) You can change this to a ConcurrentHashMap.putIfAbsent: synchronized (_partitionMetadataManager map) { if (map.get(partitionId) == null) { _partitionMetadataManagerMap.put(partitionId, new PartitionUpsertMetadataManager(partitionId)); return _partitionMetadataManagerMap.computeIfAbsent(partitionId, k -> new PartitionUpsertMetadataManager(partitionId)); } return _partitionMetadataManagerMap.get(partitionId); }
Do we need to check this every time? I think a cast is needed.
suggestion: super.getAllContacts(1, new, User.Error>() {
is the default timeout really needed?
Let's remove this check and just call the extractor to saveAuthorizedClient?
This is returning the student that was created in the database. That means that the user can't actually see the client from the study cache.
Why not using LogicalWindow#isHelpAvailable() here?
init is called in the init() method of this class.
Can be rewritten with Arrays.asList().
> list.size()==0 [](start = 30, length = 7) can you put.isEmpty() in a variable to avoid the need for the "list" call? Also what do you think about using isEmpty() instead of.size()==0?
@antonini please name it user
should we add in the log message as well?
I'd use 1 here.
This ctor can be spared, no need for super()
This line will not work when the cluster is null, and the cluster is null. The cluster will be set to null when the parameter is not found.
Maybe add "this" to other metric names instead of "tokens". We usually try to keep the same convention when metrics are being added to the metrics map.
This method is too hidden. It should be private
Why not return new HashMap<>(result)?
return;
Could you use mpinput with mpinput?
I think this condition should be: if (arg.is(Kind.REGULAR_STRING_LITERAL) && ((LiteralTree)arg).value().length() - 1 >= MIN_LENGTH_OF_HARDCODED_PASSWORD)
This should be minimum
- please remove TODO - please use file handles, like RuntimeException - Error while trying to serialize ActorMapping. - should be RuntimeException
nit: could just use numBytes == 3)
LOCK_NAME is what I meant here.
Not atomic. Two threads can reach line 100.
In this case this method should return a List<Encounter>, so the caller knows what to do with an arraylist is actually going to be using the Encounter classes.
Nit: Is there a reason we use this task instead of just 200 status?
static import SECONDS
don't you want to check if the status is not null?
Use logger please
Looks like the spacing got messed up here
NetUtil is imported statically, so could be removed.
@krivera-pentaho Kris, is this OK?
Need to handle 'win32'. It's better to return the statemask for all OS.
You shouldn't call onError with onComplete.
I think we should use a constant for this, WDYT?
why is the monitor needed here?
Wouldn't it make sense to replace the putIfAbsent call with a a synchronized function?
There is already a forEach statement which can be used here.
Can we please use PAID.getCaptureId() here?
negative logic
How about checking result.mStatus.mCode == 0 (the previous code was there, but won't it)?
return streamConsumer;
assertThat(map).hasSize(0);
I think we need to also check the email is not null
HttpServletResponse.SC_NOT_FOUND
Do we want to return null?
You don't need to check that this is mutable, and you can't do an atomic operation on the whole array.
nit: this can be replaced with this: java return parser.readValue(parserType, AutomationCommand.SUCCESS, parserType);
please return new OkHttpClient().connectTimeout(0, TimeUnit.MILLISECONDS).writeTimeout(0, TimeUnit.MILLISECONDS).build();
Our coding style is to have a single line: if (getConstantLength() == -1) { return; }
Suggest setting the default to null.
you're not asserting on null here: ByteBufferAccessor byteBufferAccessor = message.write(byteBufferAccessor, cache, version);
Shouldn't you clear the type here?
What if we are using deprecated bridge instead of the deprecated bridge? old code was the new one..
nit: for readability, rename variable to scanScreenAdapter or something better name.
I'm concerned about this change. Any reason to make it synchronized?
Should be EXPERIMENT, fExperiment.getIndexer().buildIndex(0, TmfTimeRange.ETERNITY, true));
Should this be initialized in the first place? Or is there a reason to null check?
Why first the file, then the check and disconnect?
This is not necessary, the control is disposed when the control is disposed.
queue.offer(p)
Is this a little more readable? Maybe use NumberUtil.getMaxStackSize here instead?
&&
Could you make the string a constant and use it here?
Replace with String.format() or use Objects.toStringHelper()
This should be moved to the beginning of the for loop.
You can remove the call to super() with no arguments
Should there be some default value here?
We should log the error using logger from the data provided in the constructor
nitpick: I would prefer to have Assertions.assertThat(response).containsExactlyInAnyOrder(list).containsOnly(containers())
This should probably be 'if (!Boolean.TRUE.equals(option.observable.getValue())) return option.value;'
Minor: you can use Objects.equals for comparing the objects.
We should be able to test whether it is private, because we can have a test using multiple MixClassClassClass instance in different modules, and this code is is duplicated in different tests.
This method should be private
Change this to return heartbeatInterval + heartbeatInterval / 5;
Would it be more efficient to do: if ( services.isEmpty()) { services = internalClassLoaderService.loadJavaServices( serviceContract ); } return services; or even: return services;
<LINK_0>
should this be public?
if we know that the workspace has the right permission, then we can get a warning and break right away if there is no module request.
nit: You can probably extract this into a constant.
Ok, I see only one new master is changing from 0444 to be returned from normalization. But I'm not sure why it's necessary.
I think this is broken. It should be the same.
Same here? It is always number or null?
Use InvalidArgumentException instead
This is not unit tested.
Why is this method needed? It is only used in the first place, so I would remove it and have the method be private.
Make it public
can't you have the VM's name as "setImagesIllegalIfNotInDb"?
I think 06_ID should be 64 for consistency.
I would use com.google.common.base.Strings.isNullOrEmpty here.
Make this as a graph, not a graph.
minor: please use toString() instead of +
IMPORTANT isEmpty() && events.isEmpty() * 2
I am thinking if not better to get init parameter of form: schemes.* instead of split into 2 lines.
We still need to check the type when creating a policy. Why don't you just return the result?
Remove this selector and use the constant instead.
Formatting... suggestion OptionsHelper optionsHelper = new OptionsHelper(operatorHelper);
Could you wrap these in a try/catch? I don't think it's a good idea to catch and rethrow.
In this case it's going to throw an exception if the iteration is empty. In that case it's possible that the unknown symbol is not set.
This should be logged at info level.
validateCursorAsNulls().
No reason to return null, throw an exception instead.
This is unnecessary, just return the result of getAlternatePrincipal(certificate)
just a thought, but you could just use the same UI logic as the other fields, so that you could use the enum's name to make it clear.
What about comparing className and class name to compare?
You should return a copy of the internal collection
You can use this(parentShell, fChartViewer); instead
Not sure how this info is useful for this one, this could be at the debug level
Should be an IllegalStateException.
I think the CosemDateTime constructor should be private, and as such there is no need to create a new one to protect the field in this class from changes from outside.
nit: it could be a bit cleaner with some line breaks, but maybe we can move the warning to the end of the method.
We should add a method removeCommandIfNeeded(String key, long explicitFlags) to the InvocationContextBuilder, and have the helper methods do that.
nit: you can use 0 if the line above throws the exception.
We can remove this empty line.
this will only set the min length of the array size. The listener should be setting the min length of the array size.
I think you want to pass the size of the buffer as the first param to the method.
if (failNext > 0) throw new NoSuchElementException("Expected an exception to be thrown");
Unnecessary, can be @NonNull.
If we're changing this line, it would be ideal to update the returned set to 1. and then assert that it's the!= 0, as in the other tests. Using _getOnlyElement()_ or the _getOnlyElement()_ as a way to make sure it's only the expected one.
_force_ to use a configured name for fqdn and not fqdn. The logic is the same as the one in line 73 above. Can you refactor it?
This can also use covariant return types
Can we use a standard URL scheme here?
Please add braces.
Why is this method public?
I think we should check the test cases. Do we need to throw exception here?
This makes no sense. If 'getLazyDataView()' or 'getListDataView()', it would be better to use the object type name as a parameter to indicate what is secondary.
@garydgregory Please use Args.notNull for consistency with the rest of the code base.
can we remove: declare-response, useless-assign and just return the object from the method-call?
Minor readability suggestion suggestion alarmCounter.addPropertyChangeListener("alarmCount", (old alarmCounter.getCount() + 1) == 0);
rename to methods
Do we need to make input file name EOL, DEF, EOL, DEF?
Should the signature be protected?
whitespace
The equals check should check arch == null.
Should be new NonNullableException("StandardRealmObjectSchema.NONE")
shouldn't we also save the disk alias after the call to super.endAction()?
I don't think it's a good idea to print out the System.out here. It may be better to print out the CacheDistributionTask object.
It seems like this could be private.
Better to get the bytes with StandardCharsets.UTF_8 (that's what will be used to read the file).
currentImport.getImportGroup() method can be used here.
Why is this calling this before the check above? The leaseDuration now is a long, so can this be moved outside of the if statement?
Why the change to syncExec()? It is not synchronized method.
we don't need a builder for a builder
Why are we passing in the fatalErrorHandler or dispatcherBootstrap which is a bit confusing.
Please make this a method is called after the restart.
I think that's a better way to test this: 1. create a new instance of the bios type 2. check for null && (biosType == null || cluster.getBiosType() == null)) So the condition in the || is redundant.
The AzureObjectId belongs in the UmsGroup super class, not the Group itself. We use it only here. I think that the equality of the group is accurate to make the store Group consistent.
Add a null check since the parameter is null.
Please add a check here: if (index < array.size()) { return; }...
Why send this to serverError().build()?
Spelling:
why sometimes super.emitContent() == false, also other places here like '{' and \0)
To follow code style, could you please make it consistent?
Are you sure that appUrl is only used?
should be synchronized
Why do you need this change?
Can we make it final?
do we also have a window where we're still viewing?
Can we check if they are passed in the parameters? The extension manager is set at startup, so the extension manager can be skipped.
If this is not true, should it be missing?
Is it worth doing that to propagate AutoCloseable to the try-catch?
Please change to DruidMetrics.ID.equals(value)
You should also check the exception message here.
rename suggestion } else { published = true;
Redundant brackets suggestion return tryActivateAndGet(e, item)!= null;
I'm not sure we should also change the digestId based on the hash type of the pipeline. So this is a  chars.
We build the StringBuilder and then use it on line URN_OASIS_NAMES to be replaced with String.format()
These two calls to super() are redundant.
please remove checks here.
rename to targetPath, as we have no guarantees for PlanPathType.
java authCardDetails.getAddress().flatMap(northAmericanRegionMapper::getNorthAmericanRegionForCountry).map(NorthAmericaRegion::getAbbreviation).ifPresent(stateOrProvince -> worldpayTemplateData.setState(stateOrProvince));
Why did you remove the final modifier?
why is this necessary?
The position parameter is in NatTable coordinates and could be out of range in the scrollableLayer. Ideally the scrollableColumn should be underlying scrollable layer column that is already found at the specified NatTable position, so that it does change after scrolling. I think you can get it like this: Position viewportPosition = new Position(position); ViewportLayer viewportLayer = getViewportLayer(viewportPosition); if (viewportLayer == null) { throw new IllegalArgumentException("No viewport layer found at position " + position); } int scrollableColumn = viewportLayer.localToUnderlyingColumnPosition(viewportPosition.row, column);
These two properties should be consistent. The default value should be greater than the current default.
Why not use the getMap() method, rather than doing this check here?
Recently someone told me that there is no way to specify an explicit argument. [this](<LINK_0> is the list of fileIds. So we should change the fileInfo to be an immutable list and pass it to the constructor.
this will need to be nullable.
nitpick... this should be renamed to simply gammaId, it's not necessarily gammaId anymore.
Let's set the default value to constant and use it here.
assertFalse(...);
It feels like there is a lot of code duplication here that would be nice to have a method for checking the cache state, that's already passed in
Thanks for the cleanup!
Is it really needed to create a new instance of this class?
What are you trying to do here? It seems to me that we check non-empty strings.
Mussuranteed that we need to use this practice, especially since other people don't have a RegisteredPersons (and that's the case right now).
We can remove this log line
This should be return schema.numColumns();
Why is the toString on the left side?
Can we please keep this call to dbManager.destroy()?
I prefer: return handle*Handler(targetObject, targetMethodName).stream().filter(e ->!StringUtils.hasText(targetMethodName)).collect(Collectors.toList());
We need to be able to remove RTSideAffixedPortDisplay, and the resulting simplification is needed to ensure that RTCustomDiagramDragDropEditPolicy is always used.
Please use Utils.isBooleanObject(cls)
The same as above using this.strategy.
I don't think this will work as long as Axony has a tada / tada, so I think you should use StringUtils.join(criteriaNumbers, " or ";
requireNonNull
This does not seem necessary.
Any reason for this?
Format: new JSONArray().add(Pair.create(EventStrings.CRYPTOGRAPHY_STATUS, status));
This should be inflight. It is a local variable to key, and it is only accessed from a synchronized block.
Hmmmm. I just noticed this change and it isn't good: from a human perspective having the fbo id alone in the logger output is of limited use. Having the name printed out is quite important. I can imagine a couple of solution: 1. we pass the fbo's URN on construction, solely for the purpose of printing it out in the log alongside the fboId 2. we store the URN in the FBO, but I'm not sure if this is going to come and bite us in the future.
Why use apache-commons, when you have java.util.Collections.unmodifiableSet(Collections.emptyList())
If you need to have this method public, you could use private.
you don't need to use List, as you can use new ArrayList<>(diff.getNewComments())
Why it's here? Please try to avoid these defaults. If you don't want to have them here.
This test is missing an assert-statement.
assertThat(e).hasMessageContaining(...)) is a bit confusing, especially when there are no assertTrue()s in this test.
Hi @stevenschlansker, I think the recommended way to do this is to call Arrays.hashCode() on a byte[]. For example, if bytes is null then the method equals returns false but has a different hash code for the two fields which the field can be removed.
We should also return the screen height as before: return templateData.getAuthCardDetails().getJsScreenHeight().orElse(DEFAULT_BROWSER_SCREEN_HEIGHT_RANGE.contains(parseInt(screenHeight)). Probably better to just remove the else statement, but this one can be a bit shorter (Thx)
We should be checking if ownerProductCurator is empty here, and only save the ownerProductCollection.
log lvl rather to trace here?
I think un-needed cast.
Why does this need to be static?
I think we could have a check here - the values() may be null.
suggestion public boolean logTransactionMergeFailure() {
I would add the code to the else block to avoid duplication.
is this line necessary?
is empty()?
return model.get(i).size();
We should add deviceList=%s to the toString, also deviceList=%s
formatting
Missing curly braces for this if.
nit: you could use "resultStr".equals(resultStr)
this can be moved to the constant.
I think the attribute "create=true" should not be put in the test case, it is used the very first time to create the schema.
Let's move this to the update() method above, so that the state of the FBO is attached to the FBO.
Should this function handle the case where a parent is a child?
Why not make this return true?
So you aren't renaming the _ret.
No need to check this but simply mock an ImmutableMap.Builder()
Should we use a logger?
Please add try/catch: public void test() { }
couldn't / shouldn't getTenant() return the tenantAware and not throw exception? As it stands we use a different method with an invalidTenant key.
use parquet.Ints.checkedCast or you could get a negative value out of this column chunk.
'envVblesAsString' does not need to be in an if, so you can just do this: envVblesAsString = envVbles.entrySet().stream().map(Map.Entry::getKey, envVblegetValue()).collect(Collectors.joining("|"));
Could this be simplified to have'return parsed;' inside the synchronized block?
Why use apache-commons, when you have java.util.Collections.unmodifiableMap(Maps.values(), new UnmodifiableMap.decorate());
Add a null check for ignoreInterfaceOverrides
I don't know that this is the right message... It's the ID for the files.
@FDSExonRangesRanges(GeneChromosomePosition gromPos, CDS) instead of that check.
Is there a reason to remove the winner?
How about printing the stack trace to the log?
remote installations
This is returning a number of digits (like cognitive complexity) to determine the number of digits it is.
mvcccced members can be replaced with isMvccReadAll()
exiting, so STDERR
Can we have a test case for this?
Lowering should be fine here, because otherwise the elevator control will be displayed to the user.
I think we should do this in the constructor.
You can filter on the value of the first element.
I'm not sure if you want to depend on the exception being logged. I would prefer to see this protected method and let the subclasses provide the exception to the caller.
I would have used 'prevBuffer' to keep the zero-byte array
Instead of identifying the line in the formatter, why not use a junit logger (which is [this](<LINK_0>
Typo: cannot contain -> cannot
minor typo: SEPARATOR
I think this should be public
This cast is no longer necessary. You are cast to ViewPager().getAdapter() and ViewPager().getAdapter() directly.
Take care of the case where this can happen, I believe the'manager' is not being created, so I prefer to keep it.
You can just valueOf(uniqueName.replace('-', '_').toUpperCase(Locale.ENGLISH) here
/s/returned/changes
nit: consider adding a functionHandle for the name of the function to avoid the double function call.
let's move this line to the top of the method
You may want to set the status to null and update it to null to avoid an NPE
Possibly unnecessary to check it's not null or empty
hostname can be null?
I think this is too: public Set<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> inputStreams = inStreams.values(); for (InputStreamInputStream stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs); } return operatorSpecs; }
throws
If this is the case, you should have a test stream.
Typo: "id"
Why use this instead of calcAreaAspectRatioScaleMeasure?
Do you really need this set to 100? Magic numbers are very similar too.
So if the controller is null, it's not enough to compare the database with the value from the properties.. For example, in the import com.google.common.base.Objects.equals and Objects.equals, the result is the same but with different impls.. So, you have to change to return getNetworkInterface()!= null && (getNetworkInterface()!= null) && getHostAddress()!= null)
Should the signature here be void?
Is there some particular reason for checking this vs. using a dedicated Map interface here?
@erimerturk let's add info on who subscribed to the blast
do we need this here?
I thought the first test would fail, because it wasn't otherwise obvious why we had this test failed.
This call will lead to an NPE if no thing is found for the thing.
Why not use Arrays.asList(Const.ParamsNames.USER_ID, COMPACTED_USER_ID)?
See above, it would be better to initialize s to title and then assign to s in the if else block.
Please follow the style guide in CONTRIBUTING.md to add final for local variables.
This constructor should have no logic to enforce username and password.
This is a minor constructor but it seems a bit odd to have a public constructor that takes ServerSideConfiguration and a ServerSideConfiguration. If that's the case, could it make sense to have a ServerSideConfiguration constructor that takes ServerSideConfiguration and a ServerSideConfiguration like this?
This method should be called only once, not at the end of the loop.
looks like we should add an MetricsInterceptor so we can test it
This method is private, should not be public
since this is called from canDoAction, there is no need to check getParameters().isGlusterPeerProbeNeeded() since i'd expect the return value to be null
This test is a little weird, the previous test just failed.
Why is the java.sql.Timestamp needed?
Shouldn't this be: getLatestManifest()?
It is never null, you should change to @Nullable
If resolveNodeToBinding() can return null, why do you need to check for null?
The constructor should take care of the initialization.
As we discussed, the dependency on this is a little confusing. We should have a separate dependency for the subscription that we are using now. This dependency should be taken out by the consumer too, and the existing dependency should be already provided by the consumer.
Shouldn't the id be the new MusicFragment object?
What is the purpose of this change?
Can be simplified to: java return entityTypeIds.stream().findFirst().orElseThrow(() -> new IllegalStateException("There are no entities available!");
is public enough? Please don't change visibility.
equals?
This needs to be {X}{B}{X}{B}{A} {X}{B}{A} {B}
Shouldn't the query bar be closed in a finally block?
Is this missing a method declared? Or you can just call the other method with a null password
typo:rael Standard Timeone
please make this call out of the @Before method.
I think if (DefaultDisplayVsync) is enough this will do: if (defaultDisplayVsync) { addDisplayListener(this); }
I don't think this is right. You are printing the stack trace, but what is the point of printing the stack trace?
Please use one assertion to check whether the workspace has a tag with a name "workspace".
Please use {} even for one-line if statements.
I know it's not your code, but would it be better to check the last testTextSize.endsWith("localhost") to have a test assert that the last testTextSize is three different differents?
Suggestion: If getBinaryName() returns null, then return the String.format("%s %s", this.typeWrapper.getBinaryName(element))
Should we rename it to View.View to global
What do you think about using a CountDownLatch instead of a simple Thread? It will be easier to maintain if the previous latch is added.
Formatting issues. please use spaces from ianged of line length
maybe just call this.addUpdateTask(operation, key, value) and remove the overload in BoxMetadataUpdateTask
The ParameterService has a version of the getParameterValueAsBoolean() method that accepts a default Boolean value as input, which will be returned if the parameter value could not be found. If you can modify this code to use that particular method, then you don't need the manual null-value checks below.
I think you meant to pass true for the second parameter to be false.
I remember this method should return true in case of a port. It is not isNumeric.
As we have the [FileListFilter](<LINK_0>, IOExceptions.propagate so you could use the throws Exception check here.
return CurveInfoType.DAY_COUNT
These should use the constants, no?
Can you use DateUtils.getCurrentTime() and avoid creating a new Date(0)?
Why do we need to catch all exceptions? Can't we just throw something?
Throw an exception, as we are not returning 0
I think this should be changed to String.class
[ -> ]
By default, this is no longer needed. There are no public methods in System which can be called by our browser.
I suggest to add a check on the repository is really an instance of the directory name instead of a string if it contains the root slash.
I do not think this is appropriate.
Pull Item first, and use the static final
This could be shortened to: java return delegate.getBaseUriBuilder().scheme(scheme).host(scheme).port(port).replacePath(contextPath).build();
This warn message is a bit strange. We are doing a toString() on the case above so it might be better to warn directly and do the log.warn(String msg, Object ign, String format)
You could use && Objects.equal(maxChangesOptionByVersion, maxOption.getValue()) to check whether the version is positive or not.
this method should be in the storage layer (take advantage of the "ConsoleDeviceEnabled" parameter)
method name could be improved, since it's not quite clear what it is.
public?
Should be debug level
Let's remove the public modifier and just let the annotation fail on this method.
Maybe just using string concatenation would be cleaner?
I would remove this while, or use an if.
The view type should be JSON and not JSON. The view type should be JSON only
This looks kind of a check.
Timeout may be better than Thread.sleep. It's recommended to use a timeout.
nit: I would extract "-F -n 99999999" into a constant, like the other ones.
Shall we add the call to setMsgId(id) before the initStat()?
Maybe we could just do if (action == null ||!action.equals("Already created") in the method?
This is becoming a recurring pattern, maybe a good time to refactor this if statement into a method?
typo
rename to delta
@aljoscha We're moving the import of the non-AbstractBlobStoreStore class to the parent class. Why don't we remove it from here?
You should change the error message here to be about AWS rather than GCR.
should be a.register(input)
this line can be removed
Why do you need this? Is it just doing something like getIndexManager().refresh()?
I think we should just use  checkState here since we have a timeout in the ServerObject
if the select() doesn't exist, doesn't that make sense here?
nit: I would create a private method which takes the version as a CassandraVersion and returns the version, so we can do return Strings.isNullOrEmpty(version)? new Cassandra22XVersion() : new Cassandra22XVersion();
Nitpick: would you mind using assertQuery(1 + 2, 3 + 4", "SELECT 1 + 4", " + 3 + 4");() to make it clear that we are testing with a manual test.
Throwing an exception without any logging is an antipattern. We should log the exception stack trace.
Nit: if you invert the condition and then use Boolean.parseBoolean(apolloFlag)
I think your pull request should be in the AddActionMessages file, if you are sure it will not be admin, also not be able to provide the command to set the role.
This should use a constant, please.
Can we put this at the top of the method as well?
Why is the need to make this constructor public?
This could be private and protected.
Is there a particular reason to wait for element removal of the page? It looks like we can get a element from the page.
Could just make lambdas here since getAge isn't used elsewhere
This is backwards.
maybe change this to debug?
.equals()
If this is the smallestReadPoint value, why the smallestReadPoint is always the smallestReadPoint?
Typo: Unable
I believe you need to be able to work correctly here: java if (this.anyRequestConfigured) { Assert.state(!anyRequestConfigured, "Can't configure anyRequest after itself"); }
This test is wrong. It should be testing the existence of the URL.
I think it would be better to use Long.compare(x, y) in this case since Long.compareTo(x) does the same thing.
This doesn't need to have the string "Illrgand-wense" here, just the fact that you're adding this coughness is odd... just a bought
hell no
I know it's not your code, but why can you make the ctor private?
shouldn't you convert the value to millis?
Check the env variable before returning true.
This method (and other places) could be extracted to a separate class whose name is a bit confusing.
Do you have a test that peeks the next sequence number?
Maybe TIME_WEIGHTING_FOR_DIRECT_UNIT_TESTS should be >= 0?
Can be simplified to java return css.stream().anyMatch(this::isEmpty);
the name of this method is not clear (pun not intended...) because the word 'clear' is usually used when some collection is being emptied. actually looking at the code in the 'bondsToRemove.add' but all 'destAttachmentsToRemove' is named 'bondsToRemove.add' is not needed.
this is a config problem and should be logged at trace level, not info.
it is more readable if you use String.format(Date.from(instant)), then use Tl's format, etc. then you can avoid the else branch
if you use the nullable id in the client side, this will skip the test.
The return value of the method is not used.
Should we just report this event in the log?
lambda
This is unnecessary, the method is already public.
return delegate.hashCode();
acquisition of all locks should always come outside (just before) entering the try-catch. Because if something goes wrong, the finally block is going to try to unlock a lock you have not acquired. So swap lines 89-90. Do the same for the others.
What about Arrays.equals? Also possibly an intrinsic in JDK9.
@Nullable
Prefer LazyValueBuilder.of(String.class, String.class)
setSteam()?
This is not thread safe. Ideally the order of fields should be changed to read from the field declaration, rather than in the getter.
What about Comparator.comparing(Number::compareTo)?
Please use urls.length()
These will add the sort as a constant, so that we can use key.get()[key.getOffset()] instead of key.get()
How about using [StringBuilder](<LINK_0> instead?
I think this could be replaced with:.computeIfAbsent(DMNContext.class, clazz -> DMNFactory.newContext()); dmnContext.set(name, value);
I don't think we should catch throwable instead, since that would let the test throw the exception instead.
Same change here. And this one can be private.
This is a lot of code duplication, I would have a method for *any* of this section. The main file is my main concern.
minor: add StatsManager to StatsManager
As the operator is only used in this method, I suggest to rename it to operatorImplGraph.close().
Also called twice here.
The injector!= null check is still needed.
As per offline conversation, to be consistent, if we're logically deleting, it's fine if we don't check logically deleted authorization statistics (the response can be undeleted).
The logging message is a little confusing, it doesn't include the class name. I would just log the message: LOGGER.warn(String.format("Error when revoking all access tokens on auth-server %s: %s", authServerHome, e.getMessage()))
why not just out the try-catch?
(nit) Typo in log message
Buffer to current size is confusing.
The commit message is incomplete as it is not a change of this language :(
I am unsure about the one in this method. Will DLNAThumbnailInputStream.toThumbnailInputStream still get the url if it is not a URL?
nit: would it be safer to check the prefixedTimestampTableName only once? This way we can guarantee that the table to read is always the same.
Shouldn't this be: if (!misoProperties.get("miso.autoGenerateIdentificationBarcodes")) { } too?
why we are not throwing exception?
I think we should also rename this to we are going to use a different mechanism.
Why is this needed, this seems like a side effect, i would suggest splitting it of to a separate method/service if needed at all.
Null-ptr check, please.
we can use ReflectionUtils.makeColumnValueSelector()
This is rather complicated than the previous check. How about returning early here?
I think this logic should be replace with return getFilesSkipped() == 0
why not use assertFalse?
Formatting.
mMap is used by the method name in the activity. Can it be final?
please use #isEmpty()
double ;?
All three lines should be done in a single place.
This is not correct. If the numeral part of the variable name is "expected number of entries in the returned Map, not the number of entries in the range range. This is the case that this number is already reasonable, but can be confusing.
Do you want to set the message text as a generic message?
This is fine. A DeployVirtualMachineOptions that corresponds to the beans passed to this method. It also means that that the REST API will not necessarily use the REST API.
This should be more obvious
Oops
if it is a warning then just return null.
I'm not sure if this is the correct place. In general, would be to return false and throw an exception if the file doesn't exist.
Nit: add(new ObjectNode(node).set(field, value));
You're return Optional.empty() here, which means there's no need for an explicit null check.
I guess the empty list is just a reference, so you don't need to do this.
Wrong method name in the error message.
huh this is creative, I've never thought to use the.service() by default per Ap.
Initialize this to new ArrayList<>()
getLabel
Use Logger instead of System.out.println
Style inconsistency: space after if
It looks like a lot of these log messages are missing the squashed at the end
Nit: You could get rid of the second check: if (!getMainAst.getParent().getText().equals(ASSIGNMENT)) { return new IndentLevel(result, getIndentCheck().getLineWrappingIndentation()); } else { result = new IndentLevel(getLineStart(getMainAst)); }
Let's inline this into the previous line.
rather than checking for the literal (and LOGGER.isDebugEnabled()), it could be better to just use a boolean rather than a string.
You don't need to play a file here. You can just play it in the playFile method.
The check is not needed, if it is a directory.
You can just iterate on proposalProviders.stream().filter( proposalProvider::getProposals).forEach( proposals::add); If you do so, you can also return  proposals directly and avoid extra need for loop.
To keep relying on a deprecated method, it can be deprecated to use the base class or a way to start using the current method.
Will this test fail if the name is not valid?
Same remark as above, use this pattern: java return iterateUrlTemplates(target, urlTemplate -> { try { getRouteModel().getRouteTarget(urlTemplate, parameters); } catch (IllegalArgumentException e) { return null; } };
I think this is fine as it's unrelated to the PR.
Check whether this parsing works, but probably it's a bit funny to use.
Same here. sourceVariableDescriptor should be the same as sourceVariableDescriptor.
Here I would prefer to implement the hashCode() method to be consistent with equals().
/si/.
Should this be a Map<AnyObjectId, List<T>> - - otherwise it will be a ruft, which the retriable data could be modified while the REST app changes?
This may not be the right place to handle this.
Can this method be private?
Is this a test?
log time only once.
I don't think the second part of the "if" is redundant - we already know that the disk storage type that was being checked.
this seems like a significant change in behavior if we keep this class and log the event as debug instead of using the toString below.
Why is this catch block? Are you sure this is fine?
StandardCharsets.UTF_8
Is this needed?
This is better with a static KeycloakUserRemover class that needs to be registered by both the KeycloakUserListener and the corresponding KeycloakUserListener.
Don't need to call initMocks(this) since it is not needed
Change to as the next assertion
Maybe a bit more work to simplify this constructor and pass an empty leaderRetrievalDriverFactory
The same as in the method before.
Can we just throw the exception here?
I think you can safely re-raise the exception to the last catch block instead of having no log here.
You can use assertEquals here
Please wrap this if statement in {}
get reportedConfigurations == null ||!getAttached
It would be good to use Map<String, String> data = new HashMap<>();
The settings should be a static field
super(String.valueOf("Noop"));
Indentation is off here.
Did you mean to remove the doubles? I'm not sure if it's worth logging.
This should be /random.yml.
Do we really want to use the defensiveness of this? As far as I can tell, the caller is not supposed to be able to tell if we should be using a file or a binary plus a file, and given that the file is oversized?
You can use the org.apache.commons.lang3.StringUtils.isBlank method for better error message.
I would remove "Did not find any plugins to load"
Actually, how does this line work?
You could add a null check here
Could use a hash function here.
What is this variable for? It is never used in the remainder of the code block.
Is this correct then?
Add a failure case here, this goes against 'NeverEntropyect' but move up to 'final' (see below): final EmpiricalEntropyEstimator.EXPERIIED_BACKATOR.equalsIgnoreCase(type)
nitpick: you can use == here
Put this check to a static method
What's the purpose of this?
This loop is duplicated -- we could have a single method "rewriteGitSendBundleActivity(IActivity)" that would then work to remove the implementation.
still need to print the stack trace.
Please name this in the message for debugging: "Failed waiter timeout due to waiter timeout"
I think this can be turned into a method reference.
Are you sure this is correct?
Can we test this with some sort of poll? I see it's called in two places in this file
nit: No need to print out organizationDiscoveryIntervalMillis.
Should you also test the no-arg SSLFactory from the test?
Is this the correct usage of compareAnnotationValue or av2, so this method can be very generic?
@ivanarrizabalaga why not catching exception and wrap it in a RuntimeException?
@Nullable
Add some space after the comma.
Should this method check motor.checkMCException()?
I would delegate to the new method directly
You can do this instead. proxyPorts.stream().map(stripe -> "localhost:" + proxyPort);
Please close this line, if possible
Can be simplified to new ArrayList<>(kryoCompatibilityMap.values())
why public?
This should use System.err.
See ByteByReference.java
I think we should make it private.
suggestion List<byte[]> actualArgs = whereClauses.getArguments();
i think we had talked about swapping the order of these so we can short-circuit?
I feel like this behavior is not enough. sealed is either true or set to true. On the other hand, the setIndexInMemory flag isn't set to true. Won't the caller just pass the index to the config if the index is already set?
add: import org.ovirt.engine.core.common.utils.Pair;
This should be merged into the SurfaceGenerator constructor
i think this is a common place for InjectionHelper.inject(screen). onOpened()?
Should we throw an exception if the tenantDomain doesn't exist?
nit: Root query in the exception message
This anyMatch() should be noneMatch( )
For testability, consider extracting it to a constant.
Doesn't this need to be conditional on the terminator list? I would expect the terminator to be present.
I would log the remote peer address being set.
this method can be private
The exception should be caught and changed to throw the same exception.
I assume this function must only be called if the service is activated. EventPublisher is a mandatory reference, so no need to check for nullness.
This should be "Failed to filter log with "+f, e".
CHANGE it to TypeConstants.JAVA_LANG_RECORD
Why is this called 'displayDensity'?
What does this init means?
ShadowActivity.getNextStartedActivity() already checks if you're testing on ShadowActivity.setInstance(new ShadowActivity());
Mind fixing the copy and paste error, %d%n
I don't think we should assume that the Version.compareTo(new Version(2, 1) is safe here, right?
Also, in the @After method, this should be deleted. If it's not needed to fetch the primaryKeyName from the criteria below it will throw an exception
Should we include organization here too?
Again, I think this should evaluate against the standard special path info, not the stuff for the maven package
can be replaced with for (E iterator = endpointProvider.take()) { iterator.next(); }
IMO, we don't need to pass connectionIsOpen() as the callback shouldn't be called from the Handler. handle( ) -> error == null && connection!= null && connection.isOpen() );
OuiaConstants has a constant for "qe-dmn-grid-context-menu-item", so you are using it only once.
This is weird, we create another CompletionStage and don't want to publish events with the sync anyway. We want to have async tasks as the worklist, not just to the async one.
Wow, nice catch there. :+1:
Incorrect message. Should be "This is not null."
I know you said this PR but I think it would be handy to also verify that it is correct by the parser.
This is breaking change-sensitive. You should use IndexModule.NAME here.
You're right. here I don't think you need to do anything more than using a double check and a return statement.
We should have a method for this. That is the same.
@Override is not required.
I think we should log this also in debug, otherwise this would be hard to debug if we pull the log back to other classes.
Just use the keyword "super()"
Inject the thread. And let's call them as printStackTrace() method. That way you will have a high chance of fixing this issue.
one more method can be used: - PageFactory.initElements(driver, this);
Please use StringBuilder here.
It's also use Vector2d.equals for comparison.
Does this method need to be public?
can you please add a helper method for performing it? this code is repeating itself in all of this patch edited classes.
I am not sure if this works because vdsm would be a problem when this happens?
This method is synchronized. But it doesn't really matter but still structures used in the application thread. I wonder if this is a problem that it is not thread safe.
can we maybe call it this(nameOrKeyQuery, null, null) here?
returning boolean type is useless here because it can only return **true**, or throw timeout exception.
This is a breaking change. The caller can call this method, but the client doesn't know, if it needs to be.
please remove this line.
Should be protected.
I'd rather return PluginUploadResponse.create(fileName, filename); here.
Is this important? Should we throw UnsupportedOperationException instead? Or just make it very specific to not fail the app. This is probably a broad idea for us.
Why this method can't be imported?
you need to catch Exception here too.
can we remove the parentheses around return parent!= null? ExtractionType.MANY_TO_ONE : ExtractionType.MANY_TO_ONE
This might as well become if (log.error()), since the context might be null.
This can be moved to the method.
Please add braces.
chProfiles.isEmpty()
change to return String.valueOf(fromReturn).getGuid();
If m_segments.firstEntry() is null, we should still be checking m_segments.firstEntry().
nit: I don't think you need fully qualified path name. it can just be CompletableFuture<LedgerEntries>.
This can be package private.
Can we make it static?
You may not need to check if appender is null.
This if branch can be merged
I don't think this is needed. The next constructor will call this one passing null.
![INFO](<LINK_0> 'Severity: INFO') Do not forget to remove this deprecated code someday. [![rule](<LINK_1>](<LINK_2>
Maybe I worked to much with the old constructor via Objects.requireNotNull() instead.
I think we should throw an exception if the method doesn't match the interface
These are the wrong way to get the data, this is to call db.getData("/key", stat, null); If the data is a blob, or the one that is returned is null?
no need for else and else
StringUtils.isEmpty
Is there any reason to select this into the scenarioGridPanel.getScenarioGrid().setContent?
Change this to a static boolean isBPMNFile(final String fileName) { return fileName.endsWith("." + FormsMigrationConstants.BPMN2_EXTENSION); }
Do we need to pass 0.6f as an argument to this function?
Throw a RuntimeException like this: java Objects.requireNonNull(result, "'result' must not be null");
The name of the free vars in the hierarchy is a bit confusing. It is not a free variable-name and it is named free vars from the rest of the hierarchy. Thus, if you want to change it, I would write it like this: freeVars.remove(varName); freeVars.add(inExpr.getFreeVariables());
Missing "this" qualifier.
why not Boolean.valueOf(type)?
@tumijacob Rather invert this logic and throw the exception like you had returned the client. You'd need to remove the public methods and let the client know better.
Maybe add a check on the type of recoveryProblems?
Use a null guard here instead
A very minor thing. How about adding a this. in the tear down method?
nit: please use Collections.emptyMap() instead of creating a new one every time.
Please use the information from CircuitBreaker. It will be nice to use a map.
Add and offer are the same thing for Nodes.
nit: This could be a collapsed lambda.
return ImmutableList.of();
Should be Log.e(e, "Error while building Pending _Oppinion_.",t);
SecurityException?
s/.LightboxHeader/.css('.LightboxHeader').css('.LightboxHeader').css('equalTo('));
this should be a IllegalArgumentException
s/ CustomSpeedControllers/SpeedController
Simplify this to call super();
Could be replaced with while( warnings.size() <= warnings.size())
You could use Objects.equals for equals
This seems a bit redundant, it is already done by the super constructor.
this logging statement should be removed since it is in the lamda
Given that you have a RowRanges visit(Not) and an RowRanges. visit(Not) statement, you could de-duplicate this message and just use that instead.
Could be replaced with registryURLObservable.setValue(ret);
For a simple test case, I think the logic is slightly clearer with letting the transition user opted in. It is better for this situation to be: java if (isInTransition) { return true; } //Transition is transition inTransition = isGenotypeInTransition(g, transition); return isGenotypeInTransition(g, transitionComplement);
You should need to clear the cache in the use case where the model is coming from the cache.
I wonder if we should also delete the provider and then add it to the provider
This should not be public. 'public' is not required.
Strange check. Why there is no empty string?
I would rename the variable to imagesInDb
Why use try-with-resources ( (T) rs.getObject()) instead? Maybe you can also use try-with-resources to close it.
Make this private.
I know this is the only place where we do this, but why not make this private like the AggressiveHandover() method in the AggressiveHandover() class, and have it return a local variable to getAggressiveHandover() (which is final for the other methods in this class)?
Ok, but in case you need to use a placeholder or something similar for all your code. Try this: suggestion if (myLocation!= null) {
**USB**
ArrayList should be constructed with fixed capacity.
This method is not executed for all workspaces. You should be able to get the DRepresentation FamilyDescriptor from the context.
It looks like you're doing page.getChannelCount() here but then, why is it a method, and not just call page.getChannelCount()?
I'd recommend using setDiscussions here since it makes it more efficient (one time) but also reads a bit weird for setting the status to be treated as a utility method.
Exception's should be logged at least
Here it's "selectByElementByElement(tablePropertiesInputs.get(2));".
@dmzaytsev similar thing here, could you please use link().set(something) here?
Windup/Discover/Java?
It seems Math.abs() is missed. What about negative values? And also please, add {} arround the procedure.apply(...)
No tspace.index.commit property anymore ;)
Fantastic coverage, thank you!
style nit: no braces around single line blocks
might want to consider throwing DiagnosticHandlingExceptions here
we really need 1024 * 1024?
You could use Session.of(EObject)
Should't we call incrementInvalidationEvents() here? Same question for updateEntry and updateEntry.
The disabled image is set inside the actionbar, so it is not necessarily a URL (e.g. _Ui_ display_distance_on_x_axis_disabled).
you can use string.format() here
Same here. Add the @Override annotation.
foreach
This method doesn't make much sense to me. If we need to make it public, it would be nice to have a way to do this without this method.
@ekondrashev Here too, let's declare this variable outside the class
Are these functions used?
Lets remove this
Assigning the computed value in the constructor is redundant. We probably want an additional method overload that accepts a PartitionKey, and returns a PartitionKey.
the put will remove the previous mapping
This one too
Might be worth replacing the isActive() call with a catch (IllegalStateException | IllegalStateException e)
We should make this more efficient: - store the array of connectionlessProtocolList in a list. - If we want to avoid any crash, set it to something else.
why there is no value in the first place?
With this API, char[] matcher = pattern.split("[\u0000-\u001f]"); I think it's better to use the same encoding instead of the default.
no need to break long strings... check that it contains "try" with the ",statement" for the field names
you can make this a static final and make it a class level constant
Could you add a deferredRecords.clear() method in this class?
Not 100% sure about the condition. If you have the token_type and the value, it will be set only if it is a valid request.
Add a space before the {
just return'super.offer( retval);' would do.
You should not use one assignment, consider two statements: return (getUrlForWiki(wikiName).getHost + wikiPath;
s/test message/test message/
I think you should return the'ServiceConfigTypeAmbariToOriginalPattern' object, to be consistent with the rest of the code base.
replace with fType.add(DescriptorType.NUMERICAL, DescriptorType.TIMESTAMP); the idea with EnumSet is that as you see values you just add() them to the set, without having to care for the current contents. Then when reading you can check things like contains(), or the utility methods like isNumer() proposed above.
Is this method used?
nit: This method does not seem to be used.
Please use something like: assertEquals("abc", list.toString());
Why do we need a try/catch block here? I mean, we can log the exception directly from the call to handler.handle.
package visible only
You could remove this to avoid reading the content if it is not needed.
@since 3.13 missing
I don't think you need this.
Would prefer to use a tighter check here. As-is, setting to "druid.coordinator" or "port" is a tighter check and is not a Boolean.
Nitpicking, but why not use JExpr.R.R?
It would be nice to instantly see this exception type in the log message.
This is probably unnecessary, you need to directly test this.
for these tests to pass with an exception or something.
May be we should add a message to the exception.
Since the transport provider is closeable, and should be closed in a finally block.
Same as above.. I would prefer to not introduce softly.assertThat(query.getParameterBindings()).hasSize(1)
If this was at the Payment  validator level it would use Set<ConstraintViolation<ChargeCreateRequest>> constraintViolations = validator.validate(telephoneChargeCreateRequest); and then it could be passesValidationForNullCardExpiry. If that's not the case, then it should use Set<ConstraintViolation<ChargeCreateRequest>> constraintViolations = validator.validate(telephoneChargeCreateRequest); and then it could be passesValidationForNullCardExpiry.
You should update the hashCode() method since this class is using the default equals() method.
Let the user pass invalid versions! This will crash if the user passes without a crash suggestion return false;
you could write this shorter: java return isBinary(buffer, 0, buffer.length);
it would probably be more appropriate for all these commands to take here, since this is an abstract class that can be called by other places and in other places
In success response you return json, but when fail - trying to return plain-text. It is not an good idea
Consider using a method reference here
These should be info level too.
Why is this not a constant?
you could add "public TmfTimeRange getCurrentRange();" to the constructor
The G.allGrids() method is not necessary.
I believe we can use Boolean.parseBoolean(value, "true")
this isn't needed
You can use Value.of(getTenant().getId()).getString() and remove the ugly Value.of.
return Objects.requireNonNull(context, "context is null");
Could probably be private instead of protected, which if so, would be preferred.
if you use assertEquals(restTemplate.nonNull(name), () -> new AxonConfigurationException(..., name)));
consider moving this into a static final constant.
throws RestApiException not necessary.
could call this externalSearchEngine
Instead of having the instanceof EditorPartPresenter, can you use the EditorPartPresenter from the Activity thus provide the list of handlers?
(HunkHeader[, VmfHeader](<LINK_0> ). It might be nice to add some labels to the StringBuilder, such as Text, etc..append(' ', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(', ').append(',
A MultiMap will return an ITInterface.
please replace with verify(adminDAO, never()).executeSQL(null, true);
Please, move the check after the map.
I think you can call isEmpty()
Nice! I would have expected that if the option is not set, the error message is misleading. It makes the code easier to understand
Vered - Good catch. s/proceed/processed endAction is being handled only when all tasks for the entity were completed (actually, the usage of the word "all" here is not 100% correct, but let's not discard the entity. End action should be completed.
s/notAvailable - count/isAvailable
Same question as above
Please use CanDoActionAssertUtils.
Allow the null byte array to be the case, if it is, then use the default charset (the default is UTF-8).
I'm not sure about the method name though. Why not "buildAnalysisSegments" like in the state system analysis? Or "buildAnalysisSegments" for more clarity. After all, it is called only if it was not previously saved on disk.
Maybe this will already be immutable. And a list.
Please use only one return statement
This should probably be a List, not a List.
Return type here: java @Override public void cloneSnapshot(String s, TableName tableName, boolean b) throws IOException, RestoreSnapshotException and the method names that are more specific.
I think this is invalid, check this method?
Why this change?
![MAJOR](<LINK_0> 'Severity: MAJOR') Either log or rethrow this exception. [![rule](<LINK_1>](<LINK_2>
@k-distribution is not expected to be called, so you can skip this method. If you decide to test it, don't you want to test it in the main test method?
not sure how this works, me me. Shouldn't the StageControl receive the main notification, instead of the post-release check?
is there a reason why you use 11 here?
This syntax seems way more clunky
Why add this?
minor: would it be good to include a message for each of these exceptions?
Shouldn't we check if (tag.length() > MAX_TAG_LENGTH)?
Can be simplified: return hasWindowOrJoins || (spec -> spec.getOpCode() == OperatorSpec.WINDOW || spec.getOpCode() == OperatorSpec.Mb.JOIN).collect(Collectors.toSet());
What about adding the owner to the message?
contains() is redundant if the input is null.
I don't like the naming, but for example, when you have multiple lines, it would be nice to have a single line like: public static boolean isShowingEntireContents(StyledText widget) { if (widget.getTopPixel()!= 0) // more efficient shortcut return false; int bottom= widget.getLineIndex(lastVisiblePixel); if (bottom + 1 < widget.getLineCount()) { return bottom + 1 < widget.getLineCount(); } return bottom + 1 < widget.getLineCount(); } private static boolean getLinePixel(StyledText widget) { if (widget.getTopPixel()!= 0) { return false; } int bottom= widget.getLinePixel(widget, bottom + 1) - 1; return bottom + bottom + 1 < widget.getLineCount(); }
You can use assertNull here.
Is this cast needed? (CouchbaseLoadGeneratorDriver)getDriver() is package private
Shall we throw a proper exception?
Same as above, please move this line under the SetViewport line and add an empty line after it.
the session no longer exists... if not, please remove.
This is not related to the changes in this PR, but I think that we should have a separate thread for each event sent to the event instead of a new one.
It's better to move this method to PagedIterable as it used in other places
nit: make this final
Last name of variable is unused
log.debug("Parent task {} failed", fromChild, ex);
@paulodamaso the braces and return are not needed here
Could you please move the "os.name" declaration to the initialization? I.e.: private static String removeDeviceFromPathOnWindows(String path) { String fixedPath = System.getProperty("os.name", "Unix")); return fixedPath; }
This seems to be unused.
I don't think this method is necessary. string.substring( startIndex, endIndex); would work fine, and we would do a straight return method, as the method is already public.
Use the checkDataSizeLimit method instead
why not set it in the constructor?
Please remove this explicit property and instead use {true}. The test will fail if I set the system property to not be cleared.
static?
I'd make it clear that it's only test param without setting it.
We should be applying #merge here, not this method.
This isn't the right place to replace the "this" with this.
same with the return code here, you could return a boolean to indicate success/failure. the user doesn't have to use it, but the API should provide this info. Res: Done, a return type of boolean to indicate success or not
The test should cover both cases.
Still, with 10s, one failure is done at a time, not an exception. To avoid multiple Travissing the problem, please define and use that instead. Nice to have a look at what checkstyle rules will complain about this.
Why the change?
I think you need to provide protected otherwise this class is being used by other places.
This should be using curly braces.
Calling getOffscreenPageLimit() will do the same thing but it still take care of the call to setOffscreenPageLimit. I think we need to do the same for all the new calls in the if block below and call to setOffscreenPageLimit.
This log message is incorrect, please remove.
why not use Objects.equal()?
It's better to make it simply match, e.g., String.format("IP address '%s' is not in the correct format.", WrongAttributeAssignmentException, "IP address '%s' is not correct.", WrongAttributeAssignmentException, "WrongAttributeAssignmentException", WrongAttributeAssignmentException, "WrongAttributeAssignmentException", WrongAttributeAssignmentException.
Could you replace the sole use of HadoopDruidIndexerConfig.JSON_MAPPER.writeValue with try-with-resources for hadoopJobId file?
This will generate a call to inspect _every_ instance. I think you want: private static final Predicate<InstanceInone> InstanceInone = new Predicate<InstanceInone>() { @Override public boolean apply(InstanceInone instance) { return instance.get().getName().equalsIgnoreCase(InstanceInone.class); } };
I don't think we need this public.
We can cache the result of this.wait(INITIALIATION_TIMEOUT_MS, TimeUnit.MILLISECONDS); and avoid using the double hash lookup.
I missed this before, but I think you should at least log the error if the input was not present (ie. if it was not present it should be there).
Have we seen this case where we would be origining, and this might be a good idea
You should find a better name for this.
Should this be package private?
Can you please remove this change from the configSource name? This would sound like the one I have: private static final Map<String, Boolean> configSource = Exec.newConfigSource(); configSource.set("guess_sample_buffer_bytes", GUESS_BUFFER_SIE);
can you please add it as a separate method for this class?
Wouldn't it be better to return List<Property>?
I think it would be better to use Integer and not Integer here
I am not sure that this would work in compatibility with older versions of Spidb's. Perhaps we should have an internal method to explicitly pass the sorted FSFDB_NAME to this class.
As an aside, you can pass a boolean here. Also in content values. They get converted correctly. No need to change it though
Does this need to be protected?
delay is already completed.
Would it be possible to call put on the envelope? It appears that this method will be called after put
since we always use interid variables, please remove the "s".
please use StandardCharsets.UTF_8 instead of Charsets.UTF_8
I would rather throw an exception in the constructor, and silently fail to enforce the expected behavior. If we do throw an exception, then we should fail the test and keep the assumption on the broken side.
Why do you want to close the stream?
Would it be better to use simple.single(timeoutInSeconds) here? I think that the less the scope of this PR is by design and we can avoid it with the change of the prefetching methods.
If you want to ensure that the FsckError is thrown, you could set a different ERROR status.
Same suggestion about using Object StoreMap.equals(id)
also check that checks are non-null.
It looks like this exception is thrown by the test - the exception gets thrown in the previous stmt.
this is still required
should be "eduPersonEntitlement"
seems like this can be extractedType to a toString() method.
We could use the variable name in the test to provide a better name
This should be returning an existing collection.
Should the DataFileStream be logged here?
Since validate.size() > 0 are a negative, this test is not testing the case.
s/bookie-shell/
You're missing the @Override annotation.
I would call eraseEntityDescriptions() here, since the subclasses of the public API don't have to make things public.
I think it is cleaner to do this in a private method like you did in SyncCreateCallback.
make this package private, since it's only used in this class.
put the select statement inside the "+"
instanceof?
Is it possible to inline the string to be more descriptive?
Use [return null](<LINK_0> instead
s/filter(s)/isBitmap/
Is it still needed to add the token/token to the toString?
could you add the payloadType restriction (as before) and remove the first import?
Please don't expose common methods.
why the need for printing out the inventoryId? it doesn't return the object.
log.trace
Why you not do the next() after loading all data?
this variable is unused - can be removed
How can this be private?
Remove throws Exception.
Why not check isLocal()?
better to use File.class.getName() to get the name of the exception.
You should use private static final Method obtainMessage(String message, Throwable state) which hides the object instance.
Just use the logger?
probably better to return totalSize!= 0? (availableDiskSize / totalSize) : 0;
this is probably not what we want. You could at least log why this is called for every event.
Shouldn't this return void. We don't want to handle this case.
It doesn't have to be public
log or remove this
This should be private
This is making the change in behavior. Should this return 0 or -1?
I think we should rather return a RestView<TopLevelResource>.
Is this for 'key'? What if value is undefined?
bearing on the bearing (only if we have two updated)
There is a method called start() that you can use.
getResultMessage(exchange).... is not a required variable.
Don't make SpongeAPIMod a public class.
Please use Parsing html to parse the string and use SafeHtmlUtils.htmlEscape( "<li>", Const.FeedbackQuestionTypeNames.CONTRIB + "</a></li>";
Is this really needed? If not, it should be a constant.
To be consistent with the rest of the code, please add a static import for Preconditions.checkNotNull(domain, "domain cannot be null");.
suggestion assertMessageEventExecutionSet(emptySubprocess.getExecutionSet(), EMPTY_VALUE, NON_INTERRUPTING, EMPTY_VALUE);
UnsupportedOperationException seems reasonable here.
What do you think to have a name like fn? It will help in future refactorings.
You probably want to use Collections.unmodifiableList here (and in other similar places).
I see it is not that hard to check if the serviceRef is null. I think it is in a different way to check if the object is null.
static import
Looks like it should be public, no?
Wrong method name. Also StringDimension is called automatically. Isn't it always empty instead of empty string? java if (distributionTarget == null) { builder.setDimension( "distributionTarget", distributionTarget); } else { return new DataSourceUtil.getMetricName(distributionTarget.getDataSource()) }
As I said in the whole PR, I think this method should be private. The reason why it's needed is that we only call prepareSearchCodeSystem() in the prepareSearchCodeSystem method.
Is this used anywhere?
Should we log here too?
Please bring the braces back.
Why does the assertion need to be changed here?
Again, this condition is wrong. If this is a host-level table, it should be fixed instead.
If you re-purpose the method, you should change that to a our internal utility.
I would use isrt.getTypeNameForGetter() here
The dispose methods should be done in the model provider.
this method should be private
imho this is a useful method that is not thread safe (the synchronized should happen in the class).
![MINOR](<LINK_1> 'Severity: MINOR') Remove this use of "org.springframework.security.util.ProtocolAdapter.close()". [![rule](<LINK_0>](http://sonar-s4/coding_rules#rule_key=squid%3AS1192)
space after =
Nit: Deadline is used by requestTimeoutMs.
replace this with a provider: import javax.enterprise.inject.Instance @Inject private Instance<ConcurrentChildCommandsExecutionCallback> callbackProvider;... callBackProvider.get()
remove
@vilchik-elena why?
you can use stripedExecSvc.activeStripesCount()
why is this else block?
Info is too verbose
What is the Gerrit? Perhaps it should be a Gerrit or something.
I think this is necessary. Since we are not scanning, we can do the data collect inside doGcEntryLogs().
Should this return null to avoid issues?
nit: this can be a separate lock file so that it doesn't need to be repeated with the block ID above.
Assuming the if is redundant, you can always set it to true.
my question is this for loop really all the entry points at once, i can see why the name check did not come out of the structures list, but not there there.
Note: The configuredByUrl parameter can be used instead of the call to this().setRepositoryUrl(repositoryUrl);.
How about checking that 0 == TimeoutException or just just checking for null?
Why don't you want the entire string to be gc friendly?
This is pretty odd, I think we should be attempting to create the job with the start token, just to have it return a token? It looks like the job happens to have no start token, which is more understandable than the default retry strategy.
uriHost is already a Text. Why not just call the String constructor for it?
or just create the single purpose geospatial threads in constructor?
Same as above in these methods
It's not clear to me what it means, but can we rename it to checkForResponse?
The code here is the same as readMinShiftAndBinDepth above. I think you want to move this method inside the constructor.
why? how can you have resourceSetHooks? why? it should be list of boolean and not equals?
suggestion return Objects.copyOf(RuleAttributeWidget.getAttributesList());
#createAssociationRow already does this this.rows = new LinkedHashMap<>( wrapped.size() );
Please use brackets for consistency: for (DiskImage t : NUM_OF_SNAPSHOTS_TO_CREATE) {
delegate to resolveParams()
Consider using the test builder for this instead: java public static Collection<Object[]> data() { return Arrays.asList(new Object[]{ "production", Config.EncryptionLevel.NONE ); }, Config.EncryptionLevel.REQUIRED ); return Config.build().withEncryptionLevel( Config.EncryptionLevel.REQUIRED ); }
There is no need to do synchronized here, given that it is an instance method.
This is not really a public API. You should be careful not change the accessibility of the method.
i don't think this is correct. If i change the name of the feature to not be part of the cluster, i would suggest to use "getSupportedFeaturesByClusterId(clusterId)" instead.
I'd suggest doing the same filtering as in the other convertObject. You could add a CountInputStream constructor that takes a CountInputStream and a Iterator<ObjectNode> as argument.
This [line](<LINK_0> should be java if (satisfied == null) { if (log.isTraceEnabled()) { log.trace(toString() + " " + satisfied); } else { return metaData; } } The toString() + " " + satisfied is actually " + satisfied; we'll need to do the same, no?
I know this is not part of your pull request, but can we call setWaterMarks(DEFAULT_LOW_LINES_WATER_MARK) here?
Please remove the @To annotations and put the annotation into. @Override public void configureServlets() { filter("login").through(OAuthWebFilter.class); }
Should take a look at the caller that's not found, instead of a more specific exception.
Add the @Override annotations?
In this case, we need to perform shutdown of the started connector task.
Please do *not* leave authorization turned off across test methods. This can result in unexpected behavior. It should only be temporarily turned off to create (or delete) test content.
Maybe we can use the log message as the second parameter.
The only issue I see is that the list of tickets contains a username. The only issue I think is that the method should return a list of tickets.
Why to add this to the command if the task hasn't been created in the DB?
Oh. Oh.
Maybe just call this "return newApps".
Sync container, but the module object is still there.
This should be made into a generic try-with-resources block.
Are you sure that this is safe?
can use compatibility version.getLeaseStorageDomainId() == null
if you make this a private method, it should be appropriate to keep the Java 8 way as possible.
please remove the synchronized
This is too complicated... you can simply call the method handleAll(context) and then do all the logic inside handleAll()
I am sorry, I don't think we need to support this. If you can declare a Map here, it's pretty straightforward to do it.
why not using vdsnparateException..
If you go to the final method, the log statement will be correct.
Can we use assertEquals(0, service.countTotalNumberOfVariants())?
if you want to log an error as this has no data, you should probably log.warn and add the actual message format as well.
what is the reason for this to call this constructor? I think we should simply invoke the super() method to enforce the parameters being null.
what about case clearK = true and clearK = false
That's not the contract of this method.
If you know how many callers are testing this, I would write something like java if (state.getGeometry() == null) { GeometryType.GEOMETRY.writeSlice(out, GeometrySerde.serialize(state.getGeometry); } else { GeometryType.GEOMETRY.writeSlice(out, envelope.serialize(state.getGeometry); }
return childMethods.isEmpty() || (childMethods.size() == 1) && isSingleAbstractMethodOverride(childMethods.get(0), parentType));
I would add a check that the new method is empty
Probably instanceof?
Please use DtoConverter from commons-lang
You should not explicitly raise this.
You can do this more simply: if (s.equals("true") || s.equals("0") || s.equals("1")){ return "null"; }
Use Objects.firstNonNull for this, you can also replace it with orElseThrow
you can extract two methods for protocol, one for single protocol and one for the entire class, and then use the code reference: String protocol = AnnotationUtils.PROTOCOL_AWS_S3.equalsIgnoreCase(protocol); if (PushPublisher.PROTOCOL_AWS_S3.equalsIgnoreCase(protocol)) { return new PushPublishingEndPoint(); } else if (PushPublisher.PROTOCOL_AWS_S3.equalsIgnoreCase(protocol)) { return new StaticPublishingEndPoint(); } return null;
I think this method should be moved to UserDao class as you are reusing the same code in getOwnerId().
Assertion seems to be missing?
This should also be a VaadinConfiguration class.
info?
please use StringUtil.isEmpty(value) instead.
Can we move this wait up to the waitForElementToBePresentInElementsAttributeByCss method?
Nit: I'd suggest to make this private.
:question: Could you add some information to this log message? Maybe it's better to include the param in the log message?
if (really!= null && remoteRate.isValidEstimate() &&!remoteRate.isValidEstimate()) { return false; }
Can't we use a lambda here?
Please, inline these methods
You need to add synchronized here, otherwise this method will be called multiple times per queryStarted event.
- this should be the process selected. - the user might have a selected OSType (no need to check the selected OSs here). - this should work, no?
@xupyprmv I think it's better to use some kind of [StringUtils](<LINK_0> here
I'm assuming this is combining the two maps? If so, didn't we just get the jobCoordinatorkBasePath from config? Do we need to add it back again?
return false?
<LINK_0>
It would be better to parse it into a dateRangeFile exception and have the callers use that in parseIgnoreCase
To improve readability, should be "if (exemptedPaths.contains(request)) {".
Should we also check that the value arrived?
return request.getAttributes().get(PRESERVE_AUTHORIATION_KEY)!= TRUE
Please check if this parameter is null.
Do not compare strings directly.
Cool that seems like a good solution
I suggest to replace.toString() with.getValue(), which is also more correct
Feel free to ignore: Do we really want these this there?
Check if it is done.
Why is this constructor public?
The line above this could be moved to the LayoutEditorElementSelectEvent with a more descriptive name.
We could re-throw the exception instead of catching it here.
getMessage() and debug trace?
I prefer fail-fastso first == null, but not strong feelings
Can you remove the second {} here?
Is... depends from on these?
I'd push that condition to an assertion on the last line: LOGGER.warn( "artifact {} already attached, remove previous instance and add again" );
Not sure it's worth changing this. If the path is not a Path, it's possible to change the implementation to Path.fromPath(String).
This is a good idea.
Same as above:.getAllOfType(VDSType.forValue(-1)
No need for this
You can't use shift here, but instead use ((c & 0x7f) << shift).
Is there a better solution to this? Maybe throw a new NoOpNameFoundException? It auto skips in the first place when you do that.
the selected doc is not a good name.
What's the purpose of making it protected? Does it make sense to return a new object?
this seems like it should be a partition column?
What is the StepRegistry supposed to be set here?
I'd move this just after the public methods: public PasswordBasedEncryptionUtil(Cipher cipher, AlgorithmParameters algorithmParameters,AlphabetEncryptionUtil::jdbc)
try-with-resource?
This should be made final
It might be more readable to use ByteStringBuilder.doubleToSortedString(dir, size).forEach(Unchecked.function(dir -> directoryCleaner.deleteOldestOnlyLarge(Collections.singletonList(dir), size, true, null)).collect(toList());
was this used in the scope of the patch?
this is wrong. the port is an older port (which should never be >=).
Set to null.
valueOf(illegalChar) is not necessary here (the valueOf() calls will compare any Strings) to the string.
this needs to be done before startAndAttachTimingContext
java this.encoding = encoding;
Why not ImmutableList.of(values)?
@carl-mastrangelo I think this method should be as follows: java if (inputStream instanceof BlockCompressedInputStream) { return new AsciiLineReaderIterator(new AsciiLineReader(inputStream)); } else if (inputStream instanceof PositionalBufferedStream) { return new AsciiLineReaderIterator(new AsciiLineReader(inputStream)); } return new AsciiLineReaderIterator(new AsciiLineReader(inputStream));
If there is no monitoring for the negative condition, this will return false.
I wonder why this is necessary. What is the state of the first component that is checked for State.PING?
scheduleTime => scheduleTime?
This should also be public?
Would it be simpler to return Collections.emptyList() to avoid creating an empty list?
isHidden()
Please name the variable 2.
Double-checked locking, but this could cause problems when a new location is created. Check out other checkstyles for this.
nit: it is a matter of personal preference, but I think it would be more readable to use static imports for matchers.
Should we use the long here?
Why do we need to return 10?
Should we move this lock to the leaseId? In the constructor, unlock() should just return the lease, so we can cleanup the lock.
Why do we have this?
Typo.
I would not have a hard time understanding the internals and have no opinion on this.
I'm not sure this is right. It's only ever used for Haxe if you've got a VarInit variable. I'm not sure if it's worth making that final.
Should this be set to true?
Since the CompositeDisposable is not really used anywhere else, I'd suggest to use the dispose() pattern here.
Can you cover me a bit?
Looking at the code, it seems like we can simplify this method to: java public boolean existsTable(String databaseName, String tableName) throws TDClientHttpException { // TODO:, TDClientHttpException it = null; }
Is it possible to make the BinomialDistribution be a local variable? Because this function is called after the betaPrior.
Unnecessary; the constructor would be called directly on line 69
This is not supported anymore.
extract to a method for better readability
The status of the pre-defined hook in fixtures.xml is already ENABLED. So maybe you should update it to DISABLED and verify the same. What I do to make such tests easier to read is, first fetch the current status and verify (assert) it, then update it to a different value, fetch again and verify the new value.
If the user does not have aid, can we pass this URI to the constructor? If we are not doing this, then the class should be immutable.
Do you know if m.isRemote is true but the cast is unneeded?
I like the approach; but I'd recommend to have a utility method for most of the kinds of operations (or the ones, and the assert to check the resulting data, or the java doc string).
Cosmetic: Could you please, follow the project's coding convention and keep it?
Please add spaces before and after the < <>. < layout
Instead of declaring the field directly, could you create a static final field for this?
Why doesn't this have an explicit size?
shouldThrottle() is not overridable.
Should log the threadContextFactory
Minor: we can use Objects.equals()
Exception is never thrown
typo: "per node"
return (splitTime < fTime + fDuration? new TimeEvent(fEntry, Math.max(fTime, splitTime), fDuration - Math.max(0, splitTime - fTime)) : null);
i'd just call enabledForMultipleContexts and move the method that sets the list to the default.
nit: I would prefer to have the consumerGroupName as a parameter, and instead add it to the constructor.
this is redundant, the method will already return null
Seems like you're setting the initial capacity to zero here.
oldValue should never be null; otherwise the merge function wouldn't be called.
This is an improvement. You could combine the map() and the collect() into a single line.
what if valueOf is null?
nit: this is probably an int, and it would be clearer to use a constant (like getMaxSnapshotID_BIT_WIDTH).
Can you make this method final?
Contract also says that "Cannot close" is not accepted.
I don't think we need the toString() method. Perhaps it is because we already have the log message as ad-hoc.
Try string.format() instead of string.format()
Is the method used in this class that could be removed?
redundant assertion
Why always true for the first time?
Personally I'd rather this method using getChildren and getChildren?
It's better to have a test that verifies that the exception was thrown, in case of an exception, and then just have case Assertions.assertThatThrownBy.
the name "select a from staff a where a.admin = true" actually means the query is not data.
Is this possible? Should there be a read-only version of the file that needs to be read?
Should this be done by a refresh or clear?
s/vfToPfMap/responseMap
I think this should be StringUtils.EMPTY
You might want to return defaultValue!= null? defaultValue.trim() : defaultValue;
I think we should have a better abstraction here for the getPropertyStrings(Resource) an operation.
nit: you don't need to pass the backend's validation. The validation should be enough.
Could we append a line number of the nodes as well? That would give the user a meaningful name like "group some." and "group some." so we can append "group some.group" and give the same result.
I think we should send request on a server with a Permission. In this case we are not interested in the operation.
Not sure that this is needed. redirecting to {1} is the end result of the test.
I think it would be better to obtain the number of attempts with the same size as the param of the airlift QualityUtil.getPhredScoreFromErrorFragmentActivity I guess. The base class would have a more generic name as well.
[minor] Static import
This is not assertions correctly right?
Shall we add a more descriptive error message.
This adds the caps a second time.
public?
Can you please add final here?
fQuark = quark;
I'm not sure if we want to change this. The idea is that if a plugin is using the old api and this class is not installed, this will break. For example, if an application uses the new API, it will get stuck in a new instance anyway. If that's not the case, then we should change the behavior.
This is redundant. Collections.emptyMap() will work just as well.
This should be public.
log.info message is too general. When you have multiple bundles this statement may confuse you when trying to troubleshoot OSGi related issues. Instead, your message should ideally be "All required capabilities for web component component is available."
We should remove previous call to setOnPageChangeListener a few lines above as it will be re-set here as well.
Check the length : String[] credentials = credentialsString.split(":", credentials); if (credentialsString.length > 2) throw new BadCredentialsException("Authorization required");
There is no need to do this here.
This could be made into one line
This method could be called for a form of getContinue
I think it should return Array here.
check that the string is valid
I think you can use "assertTrue(mock.getCacheManager())" instead
a constant for "kie-deployment-descriptor.xml" could be useful to have a constant for this.
If these methods are final, this method should be package private
This test should verify something like "my param param / timestamp". The param is "some-table".
Why public? Can it be removed?
Please, make "setVlanId" a constant, and use it in the vdsId variable.
This should be synchronized
Just curious: why we want to rerun container with id?
A little bit more compact: String location = provider.getDisplayText(); if (location == null) { return ""; }
Please add identifying about the exception to assist with operational debugging.
"stageTaskRecoveryCallback should only be registered once (of not registered once)"
Shall we move this to a private method -> createUsersAndGroups(um) and call it from the private method?
Consider adding a "%" and spec spec to the ruleText object
Change this constructor to call this()
Instead of loading the entire FeatureFinderMetabo file in the File, it is better to create a local variable for it and assign it to OPENMS_FEATURE_FINDER_METABO_LIBRARY_NAME, and then fetch the static list of FeatureFinderMetaboUtils.findFeatureFinderMetabo()
Are you sure you need to convert this to the following? :) return maybeGameProfile.getName();
Should be "Security service is closed."
You can use FiltersHelper.Constants.HEADER_AUTHORIATION here.
Since you are adding Gender.valueOf(this.message, student.shortName) will always be true, is there a need for that check?
This needs to be implemented to implement this method.
In general, I'd suggest to check getRepository()!= null, and doing a complete getter on the interface.
This return value is not used.
Please remove the public modifier as well and use other methods in the api if possible.
Is there a reason to use MetricsLogger.LOGGER here?
if the counter is incremented at the end of the method, you'll wait for it to be updated.
Synchronization is needed
Please remove this line
Should we log the potential error?
I would inline this method: ICdtVariable var = fEnvironmentMacroSupplier.getVariable(variable.getName(), info);
These changes should be reverted, right?
You're getting the same value twice, what if I remove the field intValue & (INT_CACHE_SIE-1);
If this is returning to be correct, the error message should be something like "could not find location matching pattern with pattern " + pattern + " is not found in provided list \"%s\" in provided list \"%s\"", pattern, discoveredLocation);
suggestion /** * @param ignoreFailure the associated state of the Builder. */ public @NonNull String  ignoreFailure() { ignoreFailure = true; return this; }
I think it's better to return an empty string instead of null.
nit: static import of Matchers.of
Redundant extra empty line.
You can make use of DateData using DateData.now() instead of DateData.now().
why is this necessary for initialization? shouldn't it be done in getStudio?
The file name should be "tdat".
Please check the previous value is "passthroughProfileContainsSupportedProperties".
let's do it using lambda approach
You are not closing the file
Better to do an "if / else if /else" style
Seems like this line should also be moved to the if method.
What do you think about to move this to a private method?
This is a duplicate of what is being called in line 297.
Change to "return no group" to strip the "valid" from the timezone. The new Status(IStatus.ERROR, BugzillaCorePlugin.ID_PLUGIN, timeWithTimezone + " is not a valid e time")
@since 9.3 setProperties(endpoint, parameters);
Please keep using EnvUtil.splitAtCommasAndTrim() here
similar issue here. remove validation in client
username + "/xxx/" + DockerClient.getClient()
used by Listener#init(registers) to avoid duplicated code.
Cleanup?
Please have a constant for this
onError and dismissing these two objects?
You should probably check the addressesJoined before using getLocalHost() to avoid problems.
Doesn't this need to be public?
Name it "ForceText"?
CacheMode.NONE is not thread-safe, so that it should be accessed directly.
this class is not allowed to have an i18n version of Dashboard. Use a constant for this.
Replace the null check with.equals(typeName)
no need to check if it's a Class?
Consider overriding toString() instead of relying on the model.
Instead of doing this, can we do a VideosModuleComponentObject object?
you can add a WARN level of this exception
add null check
Is this a public constructor or the other? If it's private, then I would remove this public.
if the message is not correct, we should also verify that the label is the expected value.
The variant returned by replaceNote is a deprecated method, so we should add a check on it and do it in one private method.
Move to a local variable
Check for null and validate params.
SystemMemoryContext#setBytes is the same as SystemMemoryContext#setBytes. Is this needed?
getActiveColor(String colorChar) is deprecated, use the same code in Slice
I don't think we need to set hidden to true here, since it's defined in the API
use getGlusterVolume() instead of DbFacade.getInstance().getGlusterVolumeDao()
Should be some kind of assert?
Was this needed? I don't think we should just set it to a+0000 or any other chars not quoted.
remove
This is not time zone id file?
Use Assert.assertTrue().
Missing whiteListedAgencies.
Is there a WebDriverWait necessary here? Can we please simply use new WebDriverWait(driver, 10000)?
Can't we move the /Name classes into a private static final constant?
Is this sample with all the other output with numbers?
we should have a initalizer of File(progressFilePath, PrintStream error) and pass the error to the constructor.
please dont remove explicit initialization
I would prefer to use null to be OK for NPEs.
Make this an assertion?
s/container/container/
this looks like an error. If there are multiple devices with the same id, we'll get a different one in the case of failure. Should we be throwing a generic Exception? Or is that handled in a different way?
This constructor should call the more general one.
This method should not return a null. it is an error in the user code. Always add a null session deduplication!
Did you mean to use java.util.Objects.nonNull(String)
I almost want to say that the SkullOwner in the first place is necessary, since this is a key in the JSON object.
decorator.onError(....) is not required to call these methods.
I think this can be moved inside the else if statement.
remove this line
Why do we need this?
In the original code, the docUpdateSentinel_.setFocus(sourceOnSave); is a no-op and should be adjusted to support the null argument, I think.
It's better to id("session" + rowId
I think this should be capabilityRegistry.clear().
Missing final
Why? RequestBodyDeserializer exists = null; if (contentType == null) { n = ACL.copyOf(contentType); }
I would use "Add \"security-constraint\" elements to this descriptor."
possible NPE
maybe it's better to check the directory exists and exist in the transformer?
Same argument as with the DeadlineJob.
Can we please explain this a bit?
[minor] This should be initialized to null?
Please, rename the variable to hasHammer for clarity.
It may causes two consecutive calls of onTracksChanged due to MediaPlayer L3008 in the same patch set.
you can move this to the first line of the try: try { binarySysPrep = strSysPrepContent.getBytes(UTF8_CHARSET_ENCODING)); } catch (UnsupportedEncodingException e) { throw new RuntimeException("Unsupported charset", e); }
I think the first argument should be for the method, so that the user knows what the directory directory cleanup is.
Should we verify that we can also set the external ID on the study?
This is an implementation of the interface.
Make this PrestoException.
java mapperReferencesForConstructor.add( (AnnotationMapperReference) mapperReference )
Not needed as part of the ticket description.
why not keep the method static?
again, I don't think it is very important to log an error here
you should use 'instanceof()' here
I would prefer to have this fixed the issue for several files
I'd prefer a NullPointerException with a message, as Objects.requireNonNull(value, "value cannot be null");
Why not throw new SnapshotImpl(x.getLocalizedMessage(), x);
I don't think we need the order of these, right?
Does the constructor need to be public?
you can use method getUrlForWiki (so you don't need to add empty string for article path)
Can we compute this only once? (i -> i % 2 == 0? createValue() : null)
Extra space.
@garydgregory Please use [StringUtils](<LINK_0>
Can we use 'U' in here?
Use org.atlasapi.entity.Series instead of the fully qualified name
iirc it's initialized in the ctor, check that it's not empty.
You're not using the developerId here, so this line should be deleted
Should also add new commands that call [remove_subkeys](<LINK_0>
why not tracking it in computeIfAbsent?
Why remove this?
Can you simplify this if statement by using return statementProperties(DunningCampaign.class, ArConstants.DEFAULT_DUHEARTAIGN_PARAMETER).
bad error message
why the cast to an int here?
Let's make this more readable and remove the map if needed
As written: java test/resources/examples/dataWithHeader1.tsv = () -> { File dataFile = new File(src/test/resources/examples/dataWithHeader1.tsv); TsvFileParser().withHeader(true); outputFile.delete() call }
feedback session's course ID -> feedback question?
backspace (bracket should be one tab back)
==
Should we take in a look at this.download() method in Mono<ByteBuffer> instead?
Is this safer? Can it be safer to clear the fields and close in the kvm class?
You're not checking the result here, it's going to be more performant. suggestion data.getExtras().getStringArrayList(RecognizerIntent.EXTRA_RESULTS)
This method should be private as well. Also, use the other new method.
Can be null?
Please use contains instead of contains otherwise looks good.
toString() is missing when the parameter is null
if (signed) is enough. We try not to compare boolean variables to boolean constants.
Wonder if we would want to check toString() first instead of toString() here.
Why is this using dx?
What if the prefix defined with a capital letter "a"? I would lean towards the latter.
Is it possible to remove Exception?
suggestion "Cannot perform the analysis on this trace because the trace is of the wrong type";
Is synchronized needed here?
Please make this private. It is only used by the item.
"be not part of the variable order."
context.getExternalFilesDirs required API level 19 and above, our minSdkVersion is 14. You can use following support library function: <LINK_0>
Where really necessary? Where exactly is the instantiator?
This should be private, no?
Please change to: VmBase vmBase = getVmBase(vmId);
Please remove evict here, it's unneeded to fetch the log.
!= null
why static?
If I understand correctly, cleanupPassthroughVnics can be done inside cleanupPassthroughVnics, instead of inside RefreshVmCommand, which is the same as the original behaviour. You should have to call cleanupPassthroughVnics only once.
Let's move this to a constant to make it more readable. Also, what about using System.nanoTime() for the time being taken to make a millisecond constant (which is ok for the JVM to accept this as well)?
I think you need to add a check for null here: if (ElasticAgentExtensionConverterV2!= null) {
Would it be better to use the constant in MetadataConstants.properties?
I'm not sure why you remove the debug event in the actionbar, it's a generic method.
Why do you need a separate 'block' block?
No need for this. on methods.
you should catch the exception here. At least log the exception
suggestion assertThat(got).contains("Description");
I think this is okay, because this will run if the handler is closed again. compareAndSet should be called before timeout
You can use the Truth assertions here.
Why is it public?
not sure if this method name is really useful or not, how about using the ComparisonUtil.getClass().getSimpleName() instead of hard-coding the package name.
Not sure you need this. Might be better to throw an exception here.
As you already need to touch this file, I think this empty line could be removed.
Code style
@fabriciofx Here also, we can use the new method for writing values() without our backing array to avoid an extra copy.
Can't we use containsKey() here?
![MAJOR](<LINK_1> 'Severity: MAJOR') Either log or rethrow this exception. [![rule](<LINK_2>](<LINK_0>
You should verify that the underlying data is as expected.
Why call it again?
<Integer> emptyList is perhaps cleaner.
Not needed.
@Override should not be public.
does this need to be public?
Please, use public HotPlug() { return osRepository.hasNicHotPlug(getVm().getOs(), getVm().getVdsGroupCompatibilityVersion()); }
Please, reuse your extracted method for better readability: java private static void map(FileInputFromExportsPaths, Function<ErlangFileDescriptor, String> erlangDependencyTreeNode) { return erlangDependencyTreeNode.myPath; }
This is nice to follow as well! Couldn't we move the null checks into the new line above?
Throw a Collections.unmodifiableMap() here as well.
This doesn't seem right. You need a separate close() on errorHandler and a reference to the error handler on close. I assume this should be an errorHandler reference in the root class or a class that implements AtomicReference and returns the reference to the handler
Use a OffHeapServerStore static constant.
This isn't used.
I think we could remove the {} and just use the string format.
size == null || size.longValue() == -1
Please check ParameterFormatter.isUnreasonableName(name)
The message may be confusing as it talks about pushing and submitting. Perhaps for this class use: " To save changes you need 'Submit' rights on " + REF_CONFIG"."
Please do check on null for all such getters. I believe we previously returned null in such case, because object was a Date, now we return primitive long which isn't an object. We should probably return Long so its serialized either as null or long value.
Maybe 'cluster.isSetRequiredSwitchType()' without passing the 'null' as a parameter.
I think this method should be called createFromResponse(), and then close it in finally block.
you can do here ListModelListBoxEditor<String> so that you don't have to cast.
I would like to see @VisibleForTesting annotation. so that we can't have to expose this method, so that we can't have to expose it directly.
do we need to check the status and cancel the lease too?
Please remove this. Tests are by intent using a string and not a constant here.
This should be in the shared method.
Typo
I'd move the assertion to the method: public void renameTempPartitionFile(File workDir, int partId) throws IgniteCheckedException { File defragmentedPartTmpFile = defragmentedPartTmpFile; File defragmentedPartFile = defragmentedPartTmpFile; try { Files.move(defragmentedPartTmpFile.toPath(), defragmentedPartFile.toPath(), defragmentedPartFile.toPath(), ATOMIC_MOVE); } catch (IOException e) { handleIoException(e); } } catch (IOException e) { handleIoException(e); } }
curly braces
This will break the equality of mAlign.length() == 0. I think it is more logic to calculate the value once, for example in the constructor and save a boolean
Parameter is not null
why do you want to whitelist it at the end?
this is probably the wrong method name?
"the cached Channel"
Raw type.
Nit: "Creating ephemeral nodes..."
catch WPE in a separate method requestRouteToHostAddress(int networkType, InetAddress InetAddress) or mService.requestRouteToHostAddress(networkType, address);
Do you want to push this constructor to the base class instead of duplicating the code?
Please use CommonUtils.loadResource(). It allows overriding config files by placing them into /etc/sw360
Remove the redundant null check, the annotation is not needed and can be removed
wait.forElementVisible returns WebElement, so you can use Sleep method from it.
Why are we returning null?
@mbarbieri you can set mIsMultiSelectEnabled to false and do an early return inside of this method.
the method checkDuplications should be private
Use StandardCharsets.UTF8
remove System.out
Is this parameters really mandatory? I thought its default was false.
Can we use Collections.singletonList() instead of creating new Date object?
please export the "protected Snapshot doPopulate()" to a method so its accessible after the first call.
This test is wrong, check that the expected value isn't null and then test that the value isn't null
I would prefer to make the field private rather than protected. It makes it easier to reason about what the field is public.
Add a Preconditions.checkArgument checks to verify that the passed reparedStatement is not null
Can we roll this into the parseJobId method and maybe rename that to reflect its purpose of creating a manager from config along with the attribute that its keyed on? E.g. getManagerFor... or getManagerFrom...
PerunSession.delete() is missing from user_attr_values() but you are using toString() on Attribute. Attribute will be translated into JSON and you will be getting representation of it.
You should also lazily initialize the exclusionList file during initialization, as it will slightly improve performance when calling the code during init.
maybe move that to a constant
This is fine, but for consistency with the old code, if the if was not true, you can skip it.
@manstis the original concern about extracting @BeforeMethod to a method to reduce code duplication.
If we can avoid this method, it would be good to return an empty string instead of an empty string.
Is it possible, that the context is null?
Please add a public static String getExtension(String rawMessageHref) { return substring(rawMessageHref.lastIndexOf('/')+1); } public static String getExtension(String errorMessageTemplate, String errorMessageTemplate) { return String.format( "Invalid \s", rawMessageHref.substring(rawMessageHref.lastIndexOf('/')+1); }
Please use braces even for one-line statements.
> Fix the bug
If we're going to set the tearage at the same time, should we have some kind of "one" or similar?
These two lines could be this.literalExpression = mock(literalExpression);. We don't need to spy on any member variables, since the pattern is meant to be a time-to-default.
Do we need all these objects?
@vilchik-elena Why not return!result &&!isConstant(Kind.CHAR_LITERAL, Kind.CHAR_LITERAL, Kind.LITERAL_LITERAL);
You should remove that, I didn't catch TCCL in the original PR.
public final?
@fanifieiev the same above.
Kind of a shame there. This is the exact same code as the one in Android 2 devices. I'm pretty sure the intent is to use "br.com" and "public static" methods in them. In that case I can still make use of "public static" codes.
You can just use return 'this' instead of copying.
Before you were checking if these 2 'null', 'entry' was not null. If there is no 'null', this will throw an NPE.
nit: could be package private..
can you please remove the "protected Set<Guid> getVM()"?
Could you please rename this list to something like list?
Logging.
sorry. Please use the static imports, as they could be called out.
This if-else is duplicated in the previous method.
Isn't it possible to have only the view defined in the class?
I would remove the public here and use of DialectManagerImpl.INSTANCE.getAllLoadedRepresentations(session).stream().filter(rep -> rep.getName().equals(representationName)).collect(Collectors.toList())
nullity check
scaledData, thread safety and all
Would it be possible to avoid using nulls by default?
This is still a Geopoint, but in practice the Geopoint is not clean. So the Geopoint should be the first thing to do is to have a local geopoint, not all of its wikis (the latter is more than a note).
Wonder if we need to cast to Number here?
When will the results of scheduleIfNoTaskRunning() ever be true?
Why is this required?
why CAS fail?
rename tempVar2 to Var2.setTitle(tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel("OnSave", this));
unnecessary public
I'd add the comma after the comma.
I think this should be logging instead of println
Name/ assignmentId
Remove the duplicate domain.getDomain().getDomainName() can be null.
This seems like it use a different name for the class. Do we need to rename it to _ or _ one.
This assumes the proper code is to check if the range is within the range, and you might expect to accidentally break if the range is within the range. This operation should also work if the range is within the range, and you'll check only the partially selected range.
Do you need to duplicate the 'byteBuffer.position() + size'?
this cast is pointless.
I think the case of the group should be different than the current one.
I don't know if this is a good idea to return null as the description could be null. I would prefer to either do the StringUtils.isEmpty(this.changeDescription) or return String.trim().startsWith("{")
Add a log message here.
This is an improvement. We could pre-compute the string representation of storing the last element in a variable and use it in the call to generateReport.
@mstzn36 what is the difference between AbstractAsyncKeyValueStore and AbstractAsyncKeyValueStore?
How about having a synchronized block for this, without any synchronization block?
No need for final, the casting to Object[] is enough, and can be removed.
Why is this public? It should be private or protected.
Why 2? default-max-chars.csv has a single line so it should have a single set of arguments?
Shouldn't we check if the reasonLocation is isOneOf(MUTABLE_TYPE_TO_FIELD) at the call site? If the reason is isOneOf(MUTABLE_TYPE_TO_FIELD) at the call site, so we could avoid changing the call sites to handle a null pointer.
@xupyprmv I'm not sure if it's worth to use a StringBuilder here.
Why is this needed? Isn't it already done in the setup() method?
accepted change
You're not checking if there's a value in the list? Is there a reason we're not using List. If you find a better name then you're not using List, you're not checking the input.
Might want to add the timeToWait variable here to avoid confusion when looking at the call site when reading the line.
Sorry! I meant we don't need to pass the options in!
I see that we don't use the factory on the constructor but I think it makes sense to have a factory method for creating the validator and providing the factory the Mapper.
Better use cluster.getRead.
Consider using CopyOnWriteArrayList for the iteration, and then use the iterator (which is more efficient).
To avoid an NPE, better to add a null check here.
I think this needs to be return true since do you need to catch any exception here?
These methods are public but you might want to bring them in to a separate protected method for better readability.
I don't think we need this if we're setting the default value. What we really want is to default to the default value with the particular properties that get's a sync consumer, and that value is set by the user that choose to use the default value for this particular case.
.isEmpty() is probably better
Looks like the try block is unnecessary.
Is it worth providing a complete error message
The Persister() method is never called. Is it necessary to instantiate a new object here?
I think the edit should happen before the affinityGroup is set.
suggestion gitSystemConfig = null;
Multiple method(*) methods
We don't need to do this. Just set it in the constructor.
StaticMethodAccess()? this should be checking for any system.isenithCharge(now) == true.
You are asserting the null? Why not just use assertFalse?
I don't think this is right. The release() method should return the dropped release. (And release() is supposed to return the right release() if the release is going to / process the raptor).
This should be return;. It's not a blocker to read.
getNodeStart() will return Long.Max_Value is the node is not on disk... which brings us back to the original state. And as expected, the assert in the benchmark fails.
You need to save the disk alias here.
I think passing null and having the caller is better than null to fail the test.
Should be externalized.
extract into static method. an getTopic() method is already a wrapper for the entity manager
This was for the PR (but I guess this was without the patch set). This test should be run as a multiple PR.
maybe we can use 2 distinct SWT.FILL and SWT.READ_ONLY?
No need to use ConcurrentMap.
This should be replaced with the new method call: suggestion if (getActivity() instanceof WPMainActivity) {
why do we need this? Can't we just use a lambda expression here?
Should probably be a method called addMessageSent too.
![MAJOR](<LINK_1> Rename this method name to match the regular expression '[a-z][a-zA-0-9]*'. [![rule](<LINK_2>](<LINK_0>
use constant as well
Can we add a check that the result is not null before trying to set it to null?
Only work if repository is opened from the repository.
And you could just let the exception be thrown, if you want to keep the test in a bit more text, e.g. "Could not find an error generated" instead of just the message
use String.format()
If we are changing this to ImmutableSet.of, it would be better to have the Set collector as a field in this class to avoid leaking the class references.
If you use a concurrent map you can use: attestationValues.putIfAbsent(value.getHostName(), value);
This could be private.
Consider to replace with "an allowed command".
super. afterConfigureProperties() is missing.
You should use the get() method where you want to return a new one
If we're using the "JRockit's Response.Builder" object, we need to be careful about how this could be exposed. In that case, we should make the MonitorMetric also have a default constructor that takes a long.
Why is this needed?
You can just return value!= null right?
I don't think we should fix it. It is only called in the launch method, but not in the frontend.
Can't we put the array in the index of the array so that we have better size?
Have you checked if updateColumn() could be called after the table delete, and if we're changing the column's name, then calling deleteColumn here will cause the table to be removed after the table has been removed.
I see you"ve moved'reportsWebappDeployed' but what about'retryCount > MAX_RETRY_COUNTS'?
question: "Authorization token is missed"
Guice best practices: make this constructor visible only at package level.
Can you use Collections.singleton() to simplify this code?
This is cleaner than public.
These can be public static
Since we have a get to the client, let's add a new method to the Call class that can be used to add to the.NET client.
Can you remove this?
Please remove
creep, I think this could be channel.getAdvertisedFrom() == null || creep
I think this is a potential NPE if submittedState is null.
make this constructor private and remove the public modifier
I think this line should be call sb.append(line.toString()).append('\n');
I'd probably use assertJ's assertThatThrownBy instead of the one below.
I tend to lean toward using an enum; usually you have a specialized enum type. java @rnveach, @nietx, @nietx, @nielsbasjes?
I think we should make this method private since it's not used outside of this class.
replacing this with helper method would be great
Again, use IOUtils.
please use log statement
suggestion processModel.getPubManager().requestPersistence(); This should be before the fast path.
Please use ServerEnvironment.getInstance() to keep tests consistent.
no need to call.format() on each call to nanos.
Name these please.
Is this the only log level?
Anyway we can use FractionRegistry.INSTANCE::of
This file does't have any passphrase, instead of null.
why a check for the viewer here? shouldn't this be the dropdownTable? Now that we keep the table.
QemuVolumeFormat is private, so it can be protected.
It would be nice if the partition metadata was sent before and after that the task is printed.
I think this should be " '{0}' only, to speak to '{0}' in the message.
isMatrix()? Also what about the row vector case? I've ran in to bugs in the past with subiRowVector being applied to row vector. May want to make this explicit.
if (!compacting.compareAndSet(false, true)) { LOG.warn("Shutting down list"); }
Don't think we should suppress the warning here, unify the setMaxModelMemory(long numBytes)
Should be java if (parts.size() == 0) {
This method isn't required, it's already public, so it can be package protected
Shouldn't we keep the!updateTs?
could be removed and just replaced by Collections.singletonList(values)?
I'm not sure we want to accept a CompletionException here. Maybe we can use [AndGetValue](<LINK_0> here?
If we change the default value of getValueAsString we should change this one too.
Why are you using TreeSet with initial capacity?
Preconditions.checkArgument() would be better form.
I think it is a good idea to have a log.error(message, e) method as well, with a message.
This property should be rePLICATE, not REPLICATE
@nvazquez you can put the store not in the store, it can be used with a store.No need to manually save it to a variable or not
Why do you return an array?
Can be Lists.newArrayList(Iterables.transform( tagStoreDAODynamoDB.Type.USERS, ids));
return 0L;
pls substitute these three lines with String.format( "toolchain type %s resolved to target %s, but that target does not provide" + " ToolchainInfo", toolchainType.typeLabel(), resolvedTargetLabel);
This could be replaced with entry.getValue().toString() as well
Silent failing
Using doubleValue() makes the code more readable.
No need to catch the exception here, it was already done in the overload.
why XpathResourceXmlLoader.XmlNode?
I think that adding the same thing here is useful but in the future a new's class which is already very likely to be used in other situations.
I'm still confused. Why are we parsing as a long and then checking whether it's > Integer.MAX_VALUE instead of parsing as an integer?
Not sure if the extra space at the beginning is still needed though... Better leave it there and eventually tackle it in a refactor to uniform the isMatching method
:bug: This can be a bit verbose. Can we change the message to: "The expiry queueSize attribute is deprecated and will be removed".
suggestion return "Data Cloud Sign In");
same here re: create the correlation id and compare it
TBH I am concerning of creating the temporary byte array for every buffer level, it might be not friendly for GC. And TBH I have not thought of a better solution now, but TBH I am concerning (creating an instance of ChannelStateByteBuffer) in Netty is usually not a very expensive operation. So i don't know if that would be a problem in this case but I think it would be better to have a single instance of ChannelStateByteBuffer and use that method internally.
Minor nit: For consistency: String content = OBJECT_WRITER.writeValueAsString(offsets);
Can we make this private?
Fix aliases = aliases =...
To reduce code duplication, please probably use a logger.
let's stick to if (styles!= null) { return true; } for this patch.
nit: it could be a test failure, so you can just write the test failure message : Expected failure: " + path + " invalid subfield path: " + e.getMessage() + ": " + e.getMessage()
I'm missing the public modifier here. It throws NullPointerException if input is null. Can this return null?
This is just a whitespace change; do you have a different formatter?
We don't need to put this into lock.
From discussion above, would probably be good to imply _no_ use of this. _and_ make the check in the caller (and make the DataCommit/DataRequest) to be consistent with the action State. But I'd prefer if we could detect this behavior at all, and simply call State.handleData() for each event type.
Is it possible to make this a constant in a class?
setChecked(mPlugin.isAutoUpdateEnabled());
Have you considered using CacheQuery::getDefaultQueryTimeout instead?
The ID is used to restore old files (from an older release) so this must not be changed!
@amihaiemil the path to "rest/novnc.html" is a little more appropriate. Let's move this to a constant.
Try string.format()
len is unnecessary variable name
I don't think we need this kind of refactoring anymore.
String filePath() is private, so it is accessible in the future.
This should be a private method, and only called in the AddNetworkCommand.
Can you move this into setCreateOutputDirectory() method?
this message should be moved to the service implementation, and not from the service implementation
This isn't used anywhere?
Can you please remove sysout.
As I think I mentioned previously, we should only call the toString on the String.format but here you can strip out some of the hard-to-test strings and the old ones ones ones in the property. Probably drop toString and add / remove /
not sure if this will work on devices. It is the "real" way of doing this, but usually this method should have real implementation.
@fanifieiev the same above.
I'm not sure if this is going to be a problem. We should probably throw an exception here.
Should this be merging with the one above?
requireNonNull
This will fail if sizes is empty
we can do away with the hard coded value. use compare method call, you can do something like mDatabase.conceptRoomDAO().saveConcept(expectedConceptEntity2); mDatabase.conceptRoomDAO().saveConcept(expectedConceptEntity2);
Suggestion: move this constructor into SolenoidState, and call it in both places.
Hey @dgutierr, I think this won't work as the cache is used in the main path and the version of the cache is only used for cache operations (i.e. the same for the cache)
This no longer needs to be a separate commit.
maybe you can use TimeUnit.SECONDS.sleep(500); instead of this?
please replace the lines of order 237/238. also, please export this entire block to a function to ease the read here. thanks.
I think you should check that UnifiedPushArchive has the provided MessageHolderWithVariantsProducer. The UnifiedPushArchive should be used to check that a message exists, this may not be the case.
I understand that PromiseComibner() constructor is deprecated, maybe we could extract this as a method and do isDone() method? Then we will not need that duplication(<LINK_0>, and if someone will need to construct this class, he could call this method that encapsulates the logic?
please use getDbFacade()
if we do not want to do it, why do you need all the null checks?
@Serranya Lets use StandardCharsets.UTF_8 constant.
@prahladyeri We can declare the try-with-resources block at the end of the method.
Don't catch Exception, it's better to catch Throwable and log it
Is this a good way to do pageSet.addAll(pageId)?
Doesn't this call getSchema()?
This is a clear programming error, right? If so, suggest throwing NPE instead.
If you exist this condition you will end up with an NPE. Better to check if the getIndicativeSentencesGeneration.get().separator() were null.
![MAJOR](<LINK_0> 'Severity: MAJOR') Change this condition so that it does not always evaluate to "false" [![rule](<LINK_1>](<LINK_2>
nit: formatting is off here
suggestion.withLastName(lastName)
You should not log and throw.
Why does this method need to be public?
nit: Promoting..
Please throw exception if! nameLookupPossibleInAdvance() and getValueCardinality() == CARDINALITY_UNKNOWN, please throw UnsupportedOperationException. If! nameLookupPossibleInAdvance(), but getValueCardinality() returns something non-negative, the code in the hot loop could be optimized, idForNull could be assigned as soon as selector.lookupName(index) returns null for the first time.
There is a weird inconsistency. Sometimes you start the String with a capital letter, sometimes not.
The string should be externalized
I'd prefer to have an explicit check that it's easy for easy readability. ex. 'if' rather than an if's.
Rebase error - should be used Helper.getCurrentUser.
Please add curly braces
You can use the Keys.ENTITY_HAS_GRAVITY here as well
This is a DAOException, you can't use it.
when is this call necessary?
Take a look at <LINK_0>
Suggest moving.process(..., kappa) to a common method
Why synchronize on an operatorMemoryContext?
don't need the type on RHS
Wrap this line
I think this should be: return Objects.equal(name, role.name);
Also not thread safe, but why not just use an AtomicBoolean instead?
This can be private.
I'm not sure it is good for now, but wouldn't it be good to give this variable name?
I would fall back to this off. I mean this would fall into the off-chance that we fall back to the file path for a file.
If it's possible to use RandomUtils with RandomUtilsSeedingRule
Why not just return boolean?
So why not throw an UnsupportedOperationException instead? As in why not wrap in RuntimeException, but not in RuntimeException.
would be good to have a more meaningful exception message here
Hmm, is this a little strange to me? The only concrete implementation is String. Which is a return value of String. I don't think it's necessary to do the null check and then split the string. Why not return!...?
As for the HBase case, when the default is used.
This is a bug, but I think that the projection.keySet() can never be null.
this.nameResolver = Objects.requireNonNull(nameResolver, "nameResolver is null");
This params are missing the values above.
This is not correct.
you should use shutdownNow()
Unnecessary public
What is the use of.getDotBllMessages().getInvalidProviderType() in the message?
Why do we need this wait?
RocksUtils.createIterator already does the creation of a Iterator.
Remove the "throws" annotation.
If I understand correctly, this test is no more used. So why keeping "null" here?
I know this method is only used in this class, but perhaps it can be moved to private?
"#" + link is always evaluated when its a directory?
Read this into a try-with-resource block? Seems to be a leak, but make sure that this is a closed stream... try (InputStream fileInputStream = new FileInputStream(fileInputStream)) { sniffEncoding(); }
If the selection is empty, the setup won't be called. We will have to clear the selection.
here we can test if the level is more than one level to test.
Please use URIBuilderFrom(uriBase).appendPath(String.valueOf(token))
Same as above. Also, why do we need this?
I would prefer to have more explicit name than tester.
Need to add name; default value
Can we use CollectionUtil?
The problem with Ex is that it will be a per-client error so it's not consistent with the logic in this file.
I think we should also check that the commit cursor is not created in case the current page is not created
Add Assert.notNull()
Is this method public?
Should be GuidOr404(id)
Replace with.toLowerCase
nit: [I thought we'd want to raise this away in methods [requestPoint](<LINK_0>, so we don't have to wrap it in a if...else.
use rewrite than get
The s is consistentHashChangeListener, but should probably be t -> true to avoid such confusion.
It's better to change this line to return!(startCommit.equals(other.numbers, other.numbers)) && Arrays.equals(numbers, other.numbers, other.numbers));
please add timeout to this timeout
Can you try to use any variable here instead of calling MatcherAssert.assertThat(String.format("doc(AwsDocsTest.EXISTS).exists(), Matchers.equalTo(true) )?
Should check the number of characters, defined at the beginning of the exception.
This method should probably be static
You can strip the leading and trailing whitespace by using the StringBuilder constructor.
Please change () to be called on a non-public method and call it from here
optional: consider adding this(itemType, label, itemType) to the constructor
Collections.emptyList()
Can you call this setCursor(Cursor.getPredefinedCursor(WAIT_CURSOR));
I think this should be package private
I would rather use a 'a', since the value can't be null, or am I missing something?
It should be new TajoRuntimeException(new InvalidCastException(...).
Add method with these params as parameter.
Also not comfortable with this.
Use Assert.assertEquals
This is about replacing the first toString() with, and append() that contains the ',' in the toString() method.
unused
this is the same I think
Please don't use System.out.println, a logger should be used instead.
Add PageObjectLogging.log(Messages.DEVICE_NOT_FOUND, "Session did not exist.");
Instead of calling updateTrack, you should call the.isTraceEnabler() method and not call updateTrack()
nit-pick: no braces around single line statements
If the request is null, do we need to check for null?
I guess you mean to pass Kryo.clone() here?
Seems to be the wrong value, we should also check the value of the project.
is there a way to avoid this duplication? (i.e., with 30 seconds or so) can a simply override in WebLogger with a single method called init(String xmlString) that would do the stuff you need.. but I would avoid calling the init method on every test if it is not necessary.
Should this not be done in store(entity)?
This is fine in a void but I don't think it's a void.
You can use getRight
As above, you should use conceptName instead of conceptName
Oops, this is not needed
We could just use a single "HTTP" param and just the WebTwiceUrl. If we'd like to do it more, we could just use a single "HTTP" or "https://" that would be more readable.
check for null
Global listener catch each click. You don't need to log it.
This method is private and is not used outside.
Doesn't this generate an error? Here we're changing the implementation of SetViewportToSizeOf.
@anuraaga this is the only place where we use the ChunkProvider is not available
The order of the arguments is reversed - it should be assertEquals("Test_123", result);
As discussed, I think there should be a check on fOutputs.add()
This method is not really correct. If an internal method is supposed to return null, the method should throw an exception, or a function that returns null.
Same applies here, unit conversion is not needed
I don't think we want this default. This should just default to 1.
style nit: no braces around single line blocks
The parameter can bee removed
Why are you not using just "tagContext"?
I think this should return streams.stream().map(StreamService::findAllRepositories).collect(Collectors.toList())
s/recovery rate/exchange
Please make this private
Minor: package name for profile
I don't think this makes a lot of pandle sloppy. Maybe we could try and avoid this in the middle of a list.
Same here, context can be null.
This check is wrong, job can be null.
Please add braces to the if, even if it's a single line
concat empty str?
@jomarko we can inline this variable.
This should be "bepson"
Sorry, just noticed this as a switch statement for changing the argument to an ChargeDialogFragment (the same as above). Then we can use an Presenter method to change the argument to ChargeDialogFragment.
static import?
Can you please make this method private? It is only used by AddVmCommand.
The exception also needs to be modified a bit.
To avoid duplicate code, can you create a StatisticsView interface which will get called after this and the code which creates the new Statistics is the same?
Volumed of error here
No need to catch the exception here, it was already done in the overload.
unnecessary change
suggestion return float.MAX_VALUE;
Can we use here else instead of if else?
Map.Entry::getKey and nonBlankValue can be taken out.
externalize
getBytes(Charset.forName("UTF-8")?
Need to refresh the view when the addFilter() call below fails
getCurrentUserLogin() should return null if the userLogin is not authenticated.
This should probably be set in the flight task, not re-subscribing
This method is probably not public.
It would be more readable to directly format the date but since this method is called only once, I think it is SimpleDateFormat
use try with resources?
Maybe we should add a checkNotNull() here?
why is this line necessary?
There seem to be different message. Like this one: %s cannot be removed from the group, group.
i'm not sure, but do you think it is better to use next() at the end of the DeltaVisit to return null here? This is because next() is not a part of the public DeltaVisit.
Please add braces
Instead of logging SonarQubeServerException here, it would be nice to log it. (As it is, this way the exception is specially)
I think this is an error.
So this is incorrect because we have size() in it? I think this is incorrect because we copy-and-paste the contents of the students. I suspect this is because the assert might not be here. Let's use isEmpty() and write a new data out there: java /** * Returns a new value from this key * @param remainingNumOfStudents; */ private void decreaseNumOfStudents(int remainingNumOfStudents) { if (nodeData.students.remove(key); } else { for (String key : studentsNames) { if (testData.students.remove(key); } } return; }
Can we revert back to ArgumentPreparedStatementSetter since OAuth2 is an object.
Same note as above.
I might have missed something, but shouldn't we have a shortcut method for getting the handlers that are there?
no need for == false
As before, I would prefer to use i18n's getDisplayName, this is all the convention that the email user ID is defined in ApplicationConstants.
Still worth using Map<String, Object> commandParameters = Collections.emptyMap(); commandParameters.put(LTK_RENAME_COMMAND_NEWNAME_PARAMETER_KEY, newName); commandParameters.put(LTK_RENAME_COMMAND_NEWNAME_PARAMETER_KEY, newName); return runCommand(LTK_RENAME_ID, newName, commandParameters);
Can be static
process the reports availability as in the setup of the application and not on the server. the dialog will be updated even if the user is not installed.
Missing "intent cannot be null"
avoid using magic numbers.
nit: can be chained onto previous line's assertion
The Passivate parameter never calls operation because it's always created by EmptyConstructorNamedCacheFactory. True, it's not never null.
You should do'return'here' or 'public'.
this is confusing, and if it returns null, how can we do an error code that says what the db was created?
remove return... just return... is it?
This seems like an unnecessary change, if the user passes it on the metastore database.
As we discussed: A binding should be needed to avoid a global lookup if the key is not present, like a Map.
Why do you need the connection to be passed to resendLatestResourcePackRequest?
Should this be public? If createNotificationChannel is called by the other constructor, then we could override the createNotificationChannel() method and put the channel creation outside the factory.
You need to add fileToTar as the first call to addFileToTar, and then check that it is actually an EFS (same for other caller in this class) and if it is not, it will get logged, and the current developer will be able to use the same /OsiJava?
It should be entry.setAuthor(null)
Not sure if this is the right place to do this. On a server side, it is not possible to have a session that have not cached and the remove shouldn't be called from main memory.
I think we might want to check the exception message here, which you have used to see in the log files. This may also be confusing because a user might think the exception message is referenced but the code looks like an unexpected error.
style nit: no braces around single line blocks
@exper0 full path HmRsHeader.VALUES_STR
How about move the line 59 above this one, so that we all the places where we want to override the method?
...Don't catch and handle NullPointerExceptions however.
I believe the right way to do this was: checkExp("json_type('foo\":\"bar\"}')", "VARCHAR(20) NOT NULL");
Why is this needed?
Arrange, act, assert. java public T getPackage(T[] getAllRequest) { return getPackage(streamId); }
Can you make this more explicit, I have been claiming with this for [T](<LINK_0>, so someone else will have have a day of week between day?
Why does the one above need to be public?
@dalifreire here you could just drop the instanceof check, but use our equals method instead
I think we can use synchronized instead of synchronized.
I am not sure why this string concatenation is needed.
I would prefer something similar to the JUnitExceptionMapper in order to avoid the lambda allocation.
Was this change intended?
I would prefer to keep the Objects.toString(content, null) into java.util.Objects.toString(content, null)
can't we use toStringHelper?
is this related to the synchrnoving?
Can we remove this kind of thing and make it more self-explanatory like this: saveDraft(EMPTY, "/privateMessageDto")
Lines 1068-1088 are redundant.
Could you please check if this is null?
Why is this List<String>?
should be synchronized
@lmontrieux Wow... Strange. I think in this manner you need to add another method there.
what if other.position == null?
This is not the right way to test asserts, they are all stopped in the method from the main class, and they are not stopped in the test method. So, please use AssertJ
all these methods can be private
Does this test pass? [bra](<LINK_0> internally mean that tokens("a" is an empty token, e.g., a, b) is a empty token. I would test a non-empty token in this test.
Can you add a note about this?
If "GnomeLoginKeyring" is true, this will fail.
Seems weird to delegate to generateStructSupportWriter. Maybe we could just have a single method generateStructSupportWriter and have its own method generateStructSupportWriter to generate RecordSupportWriter and pass these logic to generateStructSupportWriter.
I would prefer if workbench.getActiveWorkbenchWindow() would be replaced by active.getWorkbench().getDisplay() instead of doing this on the UI thread.
It seems like this could be a bit simplified to: if (SessionStatus.SYNC.equals(session.getStatus())) { marker = null; }
this should only be allowed if the client status needs to be sent. If it is not, the client should be sent in final in case the client is null
can you remove the instance?
Added a check, i.e. the bounds are different, and it is not 2.
I think this change is theoretically a significant change (the else branch here).
Should you add an assertion here that hasMining is false?
I'd like to see this more of a general exception class.
You can use try-with-resources.
elapsedNanos.
add curly braces around if body.
Would there be a case for this fail?
Since we're wrapping the isNull() call in an IccRecordsTest, should we add an assertion to verify(mMockCI).unregisterForIccRefresh(any(IccRecords.class), eq(IccRecords.EVENT_REFRESH, isNull()))?
Not sure if jobs.poll()!= null is a good idea. Just want to confirm that the JobScheduler should always run under the condition condition
I think we should not register RateLimitsEventHandler at all. Can we make ListenerManager in BasePageData interface?
This is private for now, and the class is in the same package. I don't think we need it public.
If response.getOutputStream() throws an IOException, we'll commit the file on the same stream.
Is this a reason to return a list of size 1?
Nullness of this is already tested in hashCode
![MAJOR](<LINK_1> 'Severity: MAJOR') Either log or rethrow this exception. [![rule](<LINK_2>](<LINK_0>
It should be scannerJobProperty to 'Remove job' when scanner is not found in the job.
Will there be anyOf(Element.class) when canvasHandler.doBatchUpdate returns false?
This changes the copyFileFromContainerCmd method which also creates the Repo and  folders. That's not the case here. I would expect many more calls to copyFileFromContainerCmd should be used instead.
Maybe you could set the content type as a POST attribute in the ingest method and invoke it on the HTTP method?
This is probably unnecessary, since the equals and hashCode are implemented for equality checks.
I think we should always use the setBaseEnabled. Otherwise this may be false for other tables that are modified by Planner.
Extra space after keywords
nit: I'd avoid times(0) in this class.
Why is this needed?
I think you can add: if (++this.processed % this.n == 0) { log(chrom, pos); }
You should rather use the return value of this method as it is done in the constructor.
Is takeLast(0) meaningful? If so, it can be routed to ignoreElements(). BTW, ignoreElements() can be optimized by making it singleton and be very simple (i.e., its onNext does nothing) instead of filtering with always false.
Make it a switch
This is a legacy case of backwards compatibility. deleteHorizonMs is never going to be set. It seems we can avoid returning an -1 if deleteHorizonMs is false.
How about a constant for the maximum length?
requireNonNull
This could be just buffer.put(TYPE_DOUBLE);
Using String.format with one argument is slightly more efficient. Also, how about removing the need for String.format?
Why change this line?
Why do we need this change?
Please use assertEquals
this loop is not necessary
Possibly: "Hue " instead of "Light Discovery Service activated."
So the conversion for the name and the conversion here is not needed. Is there a reason to make ReadPreference#valueOf using the method of the ReadPreference class?
guava
How about param is param and not param? It seems like the method can be named 'getReturnValue()'.
Maybe log the scopes that are lower case?
This doesn't seem to be used. If it were to be used, it would be good to throw an exception here.
Why not return Optional<TableMetadata>?
Remove the if check
suggestion logger.warn("Could not remove {}: {}", element.getMessage(), ex);
Should this be private, or should it be private?
maybe check for null in request?
There should be a finally block after this line.
This method isn't really being used.
Should be adding some validation checks that the value of the 'object' outputs.
Nit: I'd suggest leaving the logger as-is, since it's on the same line.
This should be a warning.
The TM_RESOURCE_SPEC is a list of enum mappings, so it might be a lot safer if we could make it singleton?
This should be before we call newInstance now.
If the hiveFileContext is not set, the exception will be thrown. let's add a check on hiveFileContext.isCostoCore() before actually throwing the exception.
:ant: I would suggest itemcategory-standalone, itemcategory-standalone can be null, even if that passes Category.CATEGORY_ID.
huh?
Redundant else blocks.
Please remove these empty lines.
I guess it is better to return a Map<String, String> here?
It is better to use ToStringHelper.
return true;
I think we should only log the exception if the logic is reinitializer is not called reinitializer. Also, the code in this file is called reinitializer.
Let's move this logic to a new method called RuleChain setupFromTimelock
I wonder if we should consider unconditional return value from the setter?
You could probably refactor this as a private method and call it from here, wdyt?
Please extract this to a method in the StartActivity.java
If this will cause issues, there is no reason to make this a transaction that should not have been committed -- if there are any issues that might cause while writing some bug to the flush process, there will be lot of cases where this will make the request time and you would not be able to run it. Also, in the current implementation, there is no need to check if the synchronization is actually needed because flushSynch.remove() can return null, and there will be no problem if flush is done after the flush.
Infos method returns List, hence you need to return a copy of it
I'd prefer to make the constructor private and make the default constructor private.
[minor] this line is messed up, i think it should be removed.
:+1: this is faster than the previous code, but still does not get called on an HTTP request.
this method can return List<WebElement> instead of List<HttpRequest>, as the method itself only contains the list of languages.
Here too: java new Ancestors().new OneAncestor(namespace.resourceGroupName(), namespaceCreatable.name());
If size is null, please add a warning.
@tumijacob  It looks like you still need to clean up the path, even if it's not changed.
maybe worth adding a check that taskResource!= null before doing String.format()?
Nice use of ResistanceAnnotationMapper
pass in a conversion to string2IntMap instead.
It might be better to make sure to propagate SafeRuntimeExceptions.
You have two DAO calls here, 1) To be on the DAO, you should use getEnclosingCommand() and getStorageDomainId().
As we're already putting this into the else if statement above, maybe we can skip this if/else?
this. in constructor, you can do this in the next constructor.
This is not needed.
Why not just return "";?
Duplicated code..setEditorContent(file.getAbsolutePath()).ifPresent(content -> { etc.setEditorContent(content); });
Does this need to be public?
Could be simplified to return new PublishExecutor();
String.valueOf is deprecated. Please change it to something more descriptive.
I'm not very sure it's a case for test to fix. (I would just prefer to not replace the current attempting to fix the filter because it looks like a single record on the case where its not the case.)
There is a sub field that is not set in this code path.
java checkNotNull(rfc822Format, "rfc822Format");
<LINK_0>
I think we should use Preconditions.checkNotNull for consistency.
consider adding a Preconditions.checkArgument to check that valueSymbolsWalked is never 0.
Is this needed?
Can be replaced with return index == 4;
Should this be one line down after site?
I think this null check can be removed since it can be null in any case.
levels = new Log();
This is confusing. Should this be a Flux<Payload> instead?
please put each parameter in separate line :)
Why not just synchronize on sample here and not through CorrelationRecorder?
You should use a variable to store this 5, so that when you want to change it, you only have to change it in one position instead of 3.
You should lock the DB before the snapshot
any reason not to combine this method with isReadOnlyPropertyCompatibleWithInterface?
Can we use toStringHelper
Can we return clientInfo or something else?
Should be: getByOriginAndCustomEventId(ORIGIN, CUSTOM_BAKUP_EVENT_ID);
nit: it's fine to use 'early return' for readability.
suggestion throw new IllegalArgumentException( "expires must be in range of 1 to " + expiry > DEFAULT_EXPIRY_TIME));
YamlParser.INSTANCE.parseMap(...);
the InputNoCloneClones.java is supposed to contain either String[] or String, and is put in InputNoCloneClones.java. Please rename this file to InputNoClone.java.
return!value.trim().isEmpty();
LOG.error("Python Ready {}: {}", line);
I am not sure why this method is private. We only want to do it in private methods, except for private methods. If we need to add a class name to that package, it can be package private.
Can be simplified as java public static boolean ifPresent(String klass) { try { Class.forName(klass); return true; } catch (ReflectiveOperationException e) { return false; } }
Collections.emptyList()?
Can we define a constant for this?
same as above, exception message should be more meaningful.
Same here. It's not clear whether you are modifying the code.
Consider using Iterables.getOnlyElement instead of Iterables.getOnlyElement
Missing a return statement.
You can use the for-each syntax here too, and remove the break.
static import
We should use synchronized over a synchronization on this object.
this one should be stopmigrate by bricks, shouldn't the last step be in stopmigrate by?
Oh, I see what I mean: "Close streamAfterSend is is only needed with closeStreamAfterSend". See also TestRecord.java. So, please add the same message.
suggestion throw new UnsupportedOperationException("removeNotificationListener not supported by Jolokia");
typo
Not sure we need to worry about the zone changes that have been reflected in the object. This change will go away when we introduce a new list.
- [x] I know the it's not your mistake, but the test should fail if I set a fake message.
@erimerturk why not Joiner.on(RqMultipart.Fake, dispositions).forEach(this::fakeBody);
I would use InterfaceUtils.isSubtype() has a main method to confirm that it is a LocalBroadcastManager. The check!isElementEqual would be safer, since it would be useful to have fallback when the complete class hierarchy can be loaded (aka missing classes during the scan).
@gmalanga this condition is not needed
This is missing an unrelated change.
[Java-8 try-with-resource](<LINK_0> try(PrintStream output = new PrintStream(socket.getOutputStream(), eventBody + "\r\n"); output.flush();
you are comparing strings here. Don't think you need to use equals method.
The buttons are added as a UIComponents method.
I think it's safe to add the same domain to the data, but OvirtClient will also map ServerConnections that contain it. You should add a method to StorageConnections and have all the following cases: - map(entity, entity) - if the entity is already there, add it to the storage pool and see if it is removed.
Can't you rename to something like supportsStorageDomainWithinThresholds()?
Versions should follow [our standard](<LINK_1>, which is basically [semantic versioning](<LINK_0> The quick fix is change from 1.0 to 1.0.0. The reason to change this is eventually we'll enforce version standards in code.
We should make this more descriptive, e.g.: Parameter: The 32-bit command is a local variable and now the value is _c_ - and we could maybe use a lambda here?
Use getConfig().getName().
No need for public, package protected, and the test class should be able to use it.
I would suggest to use a couple of examples for getting the right. What about putting all the examples as a function and a Jts utility?
It might be better to create a getEMFFormsSettingToControlMapper and pass it in to the methods that don't have to be repeated.
As above: private, 100 chars, use error result instead of doOnError.
I think this will currently happen in a race condition, since it's a shared change. Consider adding a method to SingularityEventSender or something in a separate thread that calls getd up for each listener to follow the same logic.
We need to check the size at the end of the expression (e.g. callExpression.getChildren().size()) isBinaryValid().
How about the too much relibilty: ((RunedInAction) JOptionPane.YES_OPTION)
PsiTreeUtil.getNonStrictParentOfType
remove?
If you're called multiple threads, you may have different behaviour: 1. Add a line break between the listeners and the 2. MappedTrie. 1. You can keep the partitions parameter as final and use it in the inner anonymous classes.
1. use.toUpperCase(Locale.US) instead of locale 2. use Locale.ROOT (if it is consistent with other classes)
We should still log the exception as ConcurrentModificationException.
change to List
misleading: you could have a single method HostProviderProxy which returns the proxy. The method in this case would return null and then you would have to call ProviderProxy.getInstance().create(hostProvider) instead.
Speaking of sanity checks, is this: (100 - minLastVerified) + 1 OR 100 - ( minLastVerified + 1)? I assume the latter, although I'm never certain on how it determines this - so maybe bracket it?
Shouldn't this be called in the finally block?
Why is o1 == null a valid instance?
What do you think about changing the order of the arguments to the assertThat? java assertThat("number of rows should encrease", schemaRows, equalTo(0));
you sure it's correct by the engine, not sure it is. the command should be run as soon as possible, and if it fails you should add another error VDSCommands.
listFiles can return null, so you could remove the check. And if the FileWatcher is not working with a NullPointerException, the proper fix will be: @Nullable File storeTypeDir = null; while (files.hasNext()) { addMediaElement(typeDir.getName()); }
Suggest return type here as well.
If Pattern.compile() is only called for the current session context, this pattern should be something like: pattern.matcher(username).matches();
The idea is that this List/Map/List calls are thread safe, so perhaps changeListeners.computeIfAbsent() should be enough and better not to generate an ArrayList, just map. No need to change.
Make it final static
nit: we could extract this into a private method or even private.
why not just cause?
This method should be private or package-private (probably not needed). Also, are you sure that it's only ever used outside this class?
There are many more places where URI is null. Makes it more readable to make it a bit more readable.
static import?
This could be return getSelectedContext();
Doesn't the remove() function return you the UpdateHandler which you want to call onCompletedExceptionally on?
onClosed() but this entire if-else block should be before the onActivityCreated(); not sure if it needs to be.
It would be better to move this line to _ensureUserIsWorkspaceOwner_ method because it is part of it. You can name it as _ensureUserIsWorkspaceOwnerByName_
introducing double retrieval from thread local, unnecessary perf hit
I would suggest to use an AtomicBoolean instead, since it would be easier to read.
NavigationItem.CHAT.nameToChatTabController.get(tab.getId()) instead of NavigationItem.bus?
I don't think this is necessary here, because we're returning a list which can never return anything on an end of the method.
please add braces {} to method parameters
Probably we should check that this value can be calculated and not Long.MAX_VALUE.
c!= null.
I don't think this is correct. This looks like you are trying to use either class or style. It is entirely possible to have both. The style always takes precedent over the class.
this needs to be synchronized as well.
This seems like it should be a warn
I would prefer if we check that the id is not null, not this.difficultyResourceKey is not the same as the other attributes.
Maybe we could do it in the service and return a SearchSuggestion object instead of all this code.
Would this be better as a lambda interface?
The logic of getSeatByUsername is in the wrong place. This class is instantiated by the super class.
Use Arrays.copyOf: this.weights = Arrays.copyOf(weights, min, max);
This should be the EntityDictionary.
Can combine the 2 above lines and use the constructor which accepts disk-id
It seems that this should return Object, not Object.
It seems like we should add a default constructor with default from the file systemOptions
I would make this a warning instead of a string concat.
Minor: Use this. consistently in the class.
Is there a reason for this constructor being public?
If we implement the guarantee that the previous data won't be the same as previous data, then this check will not guarantee that it is always synchronized. But if we implement the check, it will be safer to check the original data and if so, the whole logic would only check the latest leader election.
Did you mean to leave this method synchronized?
Please don't make this final.
why not use the iterator?
This and the method need to be static
(maybe performance-wise) the field that's being initialized to a set, and there are also a few things to fix. :- Perhaps it'd be better to throw an exception here, if there are more than one binding, but that's not the case here, and if it's _maybe_ have a.map(Map.Entry::getKey, Map.Entry::getValue) maybe return a blank So, I'd give the same result, but I'd give it an NPE: - if filter is the case, filter it out and put into a.map(Map.Entry::getValue) - if filter is the case, filter it out? - If it's not the case, filter it out and return a blank map - if it's the case, maybe get rid of it :- this.properties = map.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
This can be in an else block?
log()
public static
Is this method really needed?
The toString() is probably not a good idea.
maybe add a isEmpty() check here?
suggestion "Either Refreshable or Supplier of runtime config must be provided or none, but not both");
@inverno Why?
should this fail before you change the format?
This can be private, I think
This will cause ClassCastException. I think, it's not supported.
Another place where we could do this but I wish we could have a protected method so that this is more accessible from the public API.
Potentially, probably need to use the same package name as the default?
Do we want to return the innerList of a node to avoid to call toString on it twice?
rename to view
Better to throw Exception than have a test that returns null.
Shoundn't this already happen inside the method? If not, would it be possible to push that code into a separate method?
thanks to AssertionsUtil.expectAssertionError, this can be written in a better way, see Objects_assertHasAllNullFieldsOrPropertiesExcept_Test as an example (you will have to rebase your branch on origin/master): java import static org.assertj.core.util.AssertionsUtil.expectAssertionError; @Test void should_fail_if_one_field_or_property_is_set_even_if_another_is_ignored() { // GIVEN Jedi jedi = new Jedi("Kenobi", "blue"); // WHEN expectAssertionError(() -> objects.assertHasAllNullFieldsOrPropertiesExcept(someInfo(), jedi, content)); } catch (AssertionError err) { verify(failures).failure(INFO, shouldContain(actual.getMessage(), content), actual.getMessage(), content); }
println()
Raw password cannot be null. Please replace it with Optional.empty()
return ImmutableList.of(pylintRcfileName + rcfileName);
Should be VOOB.REQUEST_ON_CREATE, no?
The synchronized can be removed.
Should use the existing Exception message
Map<TableScanNode, Void> ret = new IdentityHashMap<>();
![MAJOR](<LINK_1> 'Severity: MAJOR') Format string should use %n rather than string concatenation. [![rule](<LINK_2>](<LINK_0>
> /cc @grkvlt i'd suggest using context.getXWikiContext() instead of context.getXWikiContext().
update header to "AWSMobileClient initialized. User state is : " + userStateDetails.getUserState()
Please, make sure it's clear enough to compare vmTo.getLastWatchdogEvent() and vmTo.getLastWatchdogEvent()
Do we need to show latin names?
I'm not sure that it is necessary to init the Input() method. The HandlerThread is not part of the input class, it is only called in the UI thread.
To be consistent with the rest of the code, I would leave this as @Override and remove the annotation.
I think you can add one more method to pass the event.
where does this visit get executed?
Why is the clusterId being part of the clusterId?
Change this variable declaration to something with meaning in the context. map is unclear here
Suggest throw new Exception() if the upload times out. In case the blob is not valid, throw an exception. Throwing an exception here will cause a lot of memory leak.
final
We should make sure that Role is not null before default and we should fall back to default.
getAdapter can return null
I suggest to add a static import of ComponentContainer to make it more readable.
No need to declare this.
why null check here?... oh, it's because super.setSelection() takes a @NonNull. Just declare list as @NonNull instead. Then suppress the warning, because we know that Collections.singletonList() returns a nonnull, even though the compiler doesn't. (This looks uglier, but it's the better long-term solution.)
See above about calling the {@code Bus} class for the sake of this approach.
You aren't doing anything with the disableOnRehash() call anywhere. This method should be called after the test finishes.
maybe should be /library.proto
This is not needed as you prefer it before.
could we add assert for the change that has been reverted?
This will create 0 connections. Didn't you mean <?
this method should be private, same for getVersionInfo().
I would have used Key1 and Key2 to notify() because of the thread 1st call.
Why is this needed?
testEquals(true, false)
public?
You can't check the type of object rather than its instanceof Object[]
This can go through the UI thread.
UnsupportedOperationException (which is a bad practice)
This is the default behavior of a sync, so we should remove this from the StateTransferLock class.
"%s/_job.%s.%s.log" is used in all the cancel methods. Should we make it a constant for? It will be good to create getLogFilePath(workingDir, execId, getId) as it is common as well?
This feels pretty weird that [BooleanUtils.isPending()](<LINK_0> does the same thing.
This will likely have performance impact. The default implementation of Math.random() in particular is dense, so it's better to use read/write locks instead of read/write locks.
If you replace the field with java @Override public Seq<E> getErrors() { return (note the setter is package private, which is package-private. Is this method used outside the package or for the test? If not, why not put it in the _public Seq<E>?
Equals should be done with ==
I think this part is redundant with the settings in the same commit?
Is this left over from debugging?
I think it would be better to make the site name a static variable. Confusing by the method name.
This method should be private, e.g. retrieveCommand(eventId)
We should also check that the properties are not included in the property, not just the value.
And here. needs some validation.
Let's inline this: return doGetInputFieldsFromPMMLStream(modelInfo.getPmml());
I think this is fine, although maybe it is more consistent with the way it is? (but feel free to ignore, I'm just not sure)
This is probably not what this is for, but it could be just asset.getCreatedTime()
Should we rename this to something more meaningful?
suggestion if (keyedStateBackend instanceof CheckpointListener) { Since the instanceof operator always returns false for null, there is no need to have an additional null check.
This is not the same error message as above.
write nullable on the same line or don't write it
We should also add a method: public void setVisible(boolean visible) { if (visible) { showItem(pendingShowItem); } }
what is the priority here?
shouldn't this be synchronized?
This function now returns false if it has not been called. The previous implementation returns true if it is not, and then the method is not called.
![INFO](<LINK_0> 'Severity: INFO') Do not forget to remove this deprecated code someday. [![rule](<LINK_1>](<LINK_2>
move this method to PageObjectLogging.log method
no need to set it to 100
Looks like we can remove the throws CmdLineException and throw it back to caller and let the caller handle the exception.
I suggest to modify the VdcQueryType to return a Map<VM>
why do we need this change?
this could be done more efficiently. Are all types handled in the visitors? Shall we create these objects only if they are related to extension.
This can be private.
Nit: you could pass param here and get rid of the synchronized.
Please change cleanUp() to dispose()
return this.major >= 0? this.major : this.major?
nit: We should probably also init the eosEnabled param to avoid null checks.
I'd suggest to make the method private.
I think we should log the exception here. NhincConstants.PATIENT_DISCOVERY_DEFERRED_RESP_SERVICE_NAME + ex.getMessage()
I believe this is not necessary. Skipping for disk type already exists when volume is null so this will cause NPE
Could use the static import.
The logic seems off. Just thinking out loud here, should we also have a unique static string or similar to the other processors? Perhaps this could be just super-static?
Ditto for the unit test.
I think this is wrong. We should not call this with a system property. Can you please use this instead?
Why not use lockClient.withPossibly()?
Let's use the construct which allows to use the request to construct the data from a private method. That could be useful outside of the class (that could be modified by a future refactoring).
Same here, seems like a cast to (TestingStatsCalculator) could be extracted to a method. I'm not sure what the implementation is though.
Shall we reuse the constant for synapseClient
Can we use CircuitBreakerCircuitBreakerCircuitBreakerCircuitBreakerCircuitBreaker.decorate() instead? I think it's only used here, we need to create a new registry.
nit: I don't think you want to keep this print in here and just log it. This is probably fine for me, but the problem is that the default implementation is going to be a RuntimeException.
In theory this is null, but if it's null, it should also be clear to me what it is.
the string Stream API has a toString() and where does this check get executed (null, null, etc.) so it'd be much cleaner if you make a list of Strings (it's just a primitive) and then use that as the return value
Use using Preconditions.checkArgument for consistency.
Calling the getId() method here will remove the getId().
Left-over debug line?
Same issue as above.
Should not the following code be abstract class RelRepresentationParameterBase with RelShuttleParameterBase?
There should be a LocalizedStringImpl object that is used to support the player name.
This needs to be in the request for the apiInfo.
It would be better to use the same outcome as above: assertThat(response, is(RESPONSE_EXPECTED_BY_EPDQ)).containsExactly(RESPONSE_EXPECTED_BY_EPDQ, not(extract().body()).asString(), containsString(RESPONSE_EXPECTED_BY_EPDQ), not(extract().asString())
TranslationFormat.USX
Are we only comparing the class name when the Underscores is not a language? We could even just check the class name and see if it was not a language issue.
This will throw EOFException.
>byte[] [](start = 11, length = 6) DecryptResult
This doesn't compile the Pattern.compile()
This seems like pre-standard. Arrays.deepEquals will check elements in order. However, Tuple.equals may be sufficient as well.
if both are equal, then these can be.equals() and.hashCode()
You can use <LINK_0>
It seems strange to me that a RexLiteral (and a RexLiteral) is created with a @Nullable Boolean, but why it is used here?
Map.of is superfluous.
I think that we need to change this. We will need to make it package-private (no modifier) instead of public.
And this method should be private
mock mock in all- cases?
throw new IllegalArgumentException("Can only access during valid times: ", value);
possible NPE?
Probably this should return false? That way it's impossible for 0 to be returned, but result is correct.
@yesamer Hard to demonstrate with few calls, but as general rule it has better performances (and I think readability) if - instead of invoking multiple times the same _getter_ - it is invoked just once storing the result inside a method variable (in this case I would call _getCurrentActiveValue()_ once and store the result in a _context_ variable). As a side note - in this and the following cases, the number of lines to change (and detected as changed by git) would be much lesser, and so the overall impact.
Could we rename the method untrackView() so it's clear that the view is called even when we cancel the view?
This line seems to be formatting too long.
use ShellIsAvailable
Please add @since 2.x. Also, please add curly braces.
you don't need to do this.
If you're using Boolean.TRUE.equals( computeResource) then please remove the == true.
I think you can do: java try (producerClosingLock) { try { Thread.currentThread().interrupt(); } finally { closed = true; } }
Could we just have a toString() with the dataType and dataType as in the DataInfoImpl{datadata, dataType, numUnits, and dataList = {datadata, Definition, DataInfo.java }
Please, also change this to Util.SDK_INT < 16?
wait.forElementClickable() should be nice here
public?
Asserting in both cases seem redundant
Remember to put an else block here.
Why is this needed?
Use a for-each loop here?
If we use Stream.ofAll() on the line above, we could collapse the overrides and keep the deprecation altogether.
This should return /model/model/
will "return false" be enough here?
We should also call getArguments() in here.
.format() is _always_ a a good name.
rename 'child'
ImmutableList.of
Generally, I let eclipse generate this kind of code for me. The only reason I have is to make the code less clear, it is better to check the type of the object instead of code. If we change the equals implementation, then I let it be clear that we do it for you.
config is a non-primitive object, cast to Map<String, String> here before casting.
Could you please change this line to String.format("fullyQualifiedMethodName, XXX)", element.getMethodName()); Also I think it would be better to have String getSourceName() for the _param_.
Maybe make this method private?
If you use Collections.emptyList() here (and below) you won't need a null check!
This is wrong. EncloseRepairAction and forceUnlock throws an Exception. Maybe it makes sense to wrap this in a if (forcedRepairAction!= RepairAction.RESET) { resetAndStop(node); } else if (forcedRepairAction == RepairAction.UNLOCK_CONFIG) { logger.info("Command successful!" + lineSeparator()); } else { logger.info("Command successful" + lineSeparator); }
We can throw exception here instead of AuthorizationUtils.getHivePrincipal(principal)
Use ImmutableMap.withNeaters(key).toBytes().
Is it worth having a filterSpec.getBlobLimit() method that filterSpec.getFilterBlobLimit()? I think it could be more consistent with the one in BufferedRecords.
Please also log as error message.
Could have @VisibleForTesting annotation. Also could public be removed?
this.
Can you remove the redundant this(clazz, methodName);?
use new Guid(String) - this literal can't be null
Please add braces on the for loop.
Is this message more useful?
We should probably add a message (must be backward compatible with TINDICATOR)
I don't think this should ByteString.Builder.
I would really hope that we would not add any continuing arguments for the 'buffer', too.
Factor out.
Just a thought. We know the object could be passed to UtilKtKt...
why private?
You don't have to add this here. The resource will be added to PERUNOBSERVER when calling filterNotAuthorizedResource() is invoked.
Do we need to create a new instance of ConnectionlessBootstrap here?
Why not return an Optional<Consumer>?
can we also refer the table \\* is not supported?
you can check the output contains the method name (checks the warning, that is the expected output, the output is not expected).
This logic duplicates the existing code.
Since this does not work correctly, you should have that last line of each call to a method to reduce duplication.
@jglick-style violates the recommended code style. Please do something like: initializer.deterministicScheduler.tick(ASYNC_INIT_DELAY* 5 + 1, TimeUnit.MILLISECONDS);
Looks like you should have null check here.
again, please use logger.debug("DriverListener->captureUpContext(driver);
I am unsure how to feel about the divider. I know it's in the dialog, but on this page, it just seems... off.
(should be on the same line)
Local variable not required. You can directly populate the class level variable this.serversArr = (Object[]) innerMap.get(GLUSTER_HOSTS);
missing ;
This would be more appropriate.
Should be CHANGELOG_VALUE_KEY as well.
you can make this a StoredValue?
suggestion location.at(inputFile.newRange(issue.line(), issue.endLine(), issue.endColumn()));
@ekondrashev move this assignment to line 103 above.
either change the method name to refreshLunsToUpdateInDb (I guess the if is the same as the method name / updateSubscribing to Guid) or add the boolean parameter to the method.
The API is only available in ASTNode as the parameter, so this line is redundant.
this is a duplication of the code in traceToMap and above
suggestion fail("exception expected");
The original code just used the return value of this method. Is it necessary given that the return value of the method can be modified? If not, I would still prefer an unmodifiable list.
use the "MD5" key for a final field
Unnecessary call to super
I would use a CountDownLatch here instead of sleeping because it doesn't make sense.
after the former validation, add this line: if(getModel().getNumOfDesktops().getIsValid()){ getModel().getNumOfDesktops().validateEntity( new IntegerValidation(++a, 0L, new IntegerValidation(1, 1000000)) }
All of this can be replaced with an ExecutorService
Why aren't this private?
How about the case where it is null in the data list?
I know this is nitpicky, but " threads to enforce retention policy" is a typo in log message, I'd suggest "threads to not support retention policy".
please add final keyword.
This should be : { "name" + "[,<source-field>:<lookup-table-name>:<lookup-table-name>:<lookup-table-name>:<lookup-table-name>:<lookup-table-name>", mapping); }
We should do this in a method so that we have to avoid using fully qualified strings that are only valid to be used for exception messages.
I wonder if this change would result array allocation and extra cpu/memory consumption issues
Lines 95-102 should be extracted to a method since it's used in other tests.
This optimization should be done in the iterator. All the other filters are not efficient, it is expensive to create a new array list.
This should be parametrised.
Same as above: could use searchPacksAgain
The list supplier should fail, calling onError and onCompleted this way is just a plain protocol violation. Do some this instead: java Observable.empty().buffer(10, 10, TimeUnit.SECONDS, Schedulers.computation(), new Callable<List<Object>>() { @Override public void call() { throw new TestException(); } }).test().awaitDone(5, TimeUnit.SECONDS).assertFailure(TestException.class) ;
Name 'a' must match pattern '[a-z][a-zA-0-9]*'. [CheckStyle] <naming
suggestion final List<Permission> roles = jwt.getClaims().stream().filter(entry -> entry.getKey().startsWith(ROLE_PREFIX)).map(Permission::valueOf).collect(Collectors.toList());
I would prefer to keep the explicit threshold like this in the other read functions.
Use an else-if to combine the two nested if's.
[minor] It's probably better to use Long instead of long
Is this still here? If so, I recommend removing this.
Short of mPacket here, but I think this should be > 0_.
This does not take a message, it takes the id of the resource that is missing. Here I would just use the no-arg constructor.
Typo
We should remove previous call to printStackTrace() here as it will make the arrow in a conditional check.
Initialize result[0] to 1 instead of 0?
try { } catch (Exception e) { Log.e(TAG, "onConfigurationChanged " + e.toString()).commitAllowingStateLoss(); } catch (Exception e) { Log.e(TAG, "onConfigurationChanged " + e.toString()); }
else if (SecurityUtils.isHadoopWebSecurityEnabled())
please rename to deviceList
we should probably check in the canExecute whether we reached the end of the list
Usually we use RequestMonitor.isSuccess(). Is there a reason you use the IStatus directly?
I'm not sure if this is right. This method is only called once per property. Is this why we don't have any callers?
The Exception is never thrown.
LOG.info("Ignoring request to connect()", ue.getClass());
It's better to pass in DataHandler.getDataSource().getName() here to avoid a NPE.
How about having the timeout as a parameter to the return value of this method instead?
Not sure if this is a lot better but perhaps you should leave it "overwriteSheetIfExists".
This could use a assertTrue statement.
Same here with the similar logic
Please add java doc
Basically the same issue as mentioned above, I believe.
not a good idea to increment timeout here. if a selector has an unknown timeout it should try to not block the network connection with a timeout.
No need to check the type.isAnnotation() first
It makes sense to set a value of sidecarContainerProvisioner before setting it.
This isn't right. You'll stomp all over anything passed to setAlpha and always revert the image to 0xFF. There was a reason it was an instance var that was mutable.
Instead of setting it in the slave, what do you think about it to be null?
Since the survey is from the list of item, it it should be -- it is more generic if it is a convenience method.
It's a bit strange to have a separate loop here. It could be easily done using the toArray method
maybe more of the work to do in a more general way?
It looks like this one could be implemented with a single assertion too, e.g. RootWithOverloads could have a type of verification that the methods themselves will be tested.
Could you please rename to pathVariableManager.resolveURI(variable)?
I also agree with DbWriteOperationsBlockedException
Maybe it would be better to move this to the beginning of the method.
no need for if
According to this <LINK_0> this should be shared between both pre-init and async operations.
This is too broad and is swallowing exceptions that need to be propagated.
@ILikeToNguyen Why use a HardCode like this?
this can be done with streams, and beer to be aware of potential memory leak.
Please use the new method, and to call it, instead of polluting the log.
Could you please show me the specific output?
Instead of this, I would rather have the method call DataSourceIngestFiles which takes a File.separator and returns a PREFETCH_DIR_NAME. It's not guaranteed there will be a difference between multiple threads, but this can be done concurrently.
@ikhvostenkov again json, maybe this whole block can be moved into a method that takes a String and a lambda and the code that takes just the name as a parameter? this will prevent the duplication
nit: add spaces around " not found" and not "with id: "
We should mutualize a hasTag (probably in stats)
Can be replaced with call to computeIfAbsent.
Isn't obs.getObsId() already tested on the previous line?
Please use injection for FenceVdsCommand
This is rather complicated, I think we can make things more readable: java return Optional.ofNullable(resolved.stream().map(s -> s.orElse(null)).filter(Objects::nonNull));
I don't think these checks are required - the NullPointerException will be thrown down the chain anyway?
I'd move this above the shader-related lines, as it is related to the FBO instead.
Could you replace this and any occurrences of this PR?
Line wrapping is not necessary (and might be a bit off), but maybe it's worth adding a debug message indicating what failed to be received?
Should we be doing this in the outside if block?
Update this file with the new code.
Is this related to metrics? Or something else?
I think this should be removed entirely here, because the adapter is also added in the WPAndroid ReleaseAdapterAdapter, but that's ok
Are we sure that we should only use the CDL format here? Or just: java if (importsip == null || abstractEntryClient instanceof ToolClient) { return Lists.newArrayList(primaryDescriptor.getAbsolutePath(), "inputs", provisionedParameterFile); }
Do we need to change this to FragmentationDuplexConnection?
simpler to say if (clusterCenters.length!= 0) {
This should be parseDomains(domainsArguments) and the method name should be parseDomains.
Is this going to be a problem in a scenario where we have a NotificationBundleProcessor, which means that we can call a method in NotificationBundleProcessor?
Value currency
We can't compute here what we are doing with the collection up and publishing it and it'll at least fail when there is an exception at the very end.
This method is not used. Why not just call this method in the File constructor?
I think it is worth to add the resourceType and resourceCrn as well to the msg. As it is now the only place it can be used to convert the resourceType and resource details to Strings.
I think this is meant to be moved within the while (executor.inEventLoop()) { block below?
Can we just log the exception?
Embed the caught exception in the newly thrown exception
That's not a good idea. :smile:
So my suggestion to only allow terminate for a single selection when there is no MultiTerminate service causes a problem with multi-process. In that case, when selecting the launch, the code converts it to multiple processes and then does not allow to terminate with the launch selected because it looks like there are multiple selections. This is a pretty rare bug: 1- someone replacing our IMultiTerminate service with one that does not support multi-terminate (maybe they don't want to support it) 2- running multi-process I wanted to let you know, but I am ok with leaving this in. If someone wants to replace our service, they would have to replace this class as well.
prefer Strings.isNullOrEmpty()
IOException will be thrown if MappingMetaData is not valid json, right? (populated table does that if it doesn't, so don't forget to update its signature). Then we can rename this error code to sth like ELASTIC_SEARCH_CORRUPTED_MAPPING_MEDATA, what do you think?
is this intentionally unused?
This should be header.
I don't think this is necessary now, but just "releasedOnTime" is ok (and if the value is -1, the user can't set theReleasedOnTimeForOngoingAppDownload) either. The original version should be part of the "releasedOnStr" object, while the original version should be released on it.
Why do we need to catch this exception?
Not a fan of this if within the try which makes the try completely useless if charsetMatch is null. How about a check to see if it is null before the try and returning new String(bytes, charsetMatch)?
why is this needed?
Same as above. Also you can return void
perhaps add the exception as the second argument to debug
Do we want to remove remove "oldPost.getStatus()" as well?
"To..." is baseline and not "and"
This is still a bit difficult to follow. Maybe it could be made more descriptive by adding a method.
static import
I really don't like the concept of "command.proceedWithColdRun" to be honest, I feel like it will be redundant and we can be sure there are no failures that can be done
[minor] ImmutableList.<String>of should also work and avoid the try/catch
Maybe add verbose "s" and "s" (or similar)
This may not fail if it's not an error. Have you tested?
Do we need to handle the contextMenuHandler in the initContextMenu method? Also, do we need to remove the event.getError() here?
Shouldn't we dispose the Ebrs?
Is there any better way to wait for the connection to be sent? Reloading the server will block and wait for it to come up and fail.
I think you'll need to use either Arrays.asList or iterate over the elements and print individual StackTraceElements if it's not null.
Space after "if"
iteration over the list?
Shouldn't we throw an exception here?
Do we really want to always assume Latin-1?
Why do we need this set?
Can be PARTITION_BY.name().toLowerCase() in a consolidated version of the method.
It should be true in the finally block.
it would be better to have this as a constant
Can we add Locale.ROOT also on Windows?
This is not needed since calculateLatency already takes a long.
You should not be passing in the event. This should be the Activator.handleError().
Use Map.of()
Possibly move the if (!Strings.isNullOrEmpty(values.get(2)) to a variable for readability
Use [String.format](<LINK_0>,%20java.lang.String,%20java.lang.Object...)) instead of string concatenation.
Should we need a logger?
Same here; please remove this java product class.
This code is code consistency, maybe we can get rid of this one.
I prefer to keep the static import.
Was this change made sense?
I think we could just have a Set<String> getKey() and then we do not need separate set of properties?
rename to project
Missing {} inside the if {}.
I think the logic here should be in the constructor(String sql, long startTimeNanos, long queryExecutionMillis ) method.
error level: {}
field.getChildren() is a pretty abstract class. Does it make sense to move this to a StructDescriptorImpl?
I think this is more readable if statements are followed by a while... single line blocks.
I usually like to the previous word if it just makes the code more readable, try again instead of the word "toggle"
You can just use the object returned by this method.
I think this should be closed as a RuntimeException
this and the ones below are very similar - can we break them into smaller methods?
are you sure you want to throw this exception?
Can you use a stream?
nit: put with the previous line
We should ignore this, but the error message should have been: * already unpublished * The logic to run should be to * already* be handled, so that we don't have to check if the file has a resource and the name of the resource. * still, why is this check required?
Doing these instanceof checks in Java is normally considered an anti-pattern. You want to find ways to avoid it best you can using interfaces and inheritance etc. In this case I'd consider doing leveraging function overloading to make this code have less conditionals.
Is this necessary?
**f**ha, not a 'a'?
This should be more than a LOG.Error? if we don't recognize an ACL shouldn't we return an error to the caller instead of ignoring and continue?
We could declare message in the try-with-resources, then move the null check inside and delete the catch block.
I'd rename this to getDiscrepanciesJson to be more generic as Discrepancy.
Is the sleep necessary? The kafka client might have a CountDownLatch provided which we can use from the kafka client?
Is it possible to do try-with-resources for this method instead of doing it manually?
Isn't it one of the cases where the nodeInstance is not the same as the one?
While we're in here, could you replace that with this: for (Object selectedObj : structured.toList()) {
Put brackets around the if statement
Please retain the same logic on both EmitterProcessor and the one above.
should this method return void?
check if volume is null and log and return.
The exception is being logged twice.
Why do you need this? Merge to the one in the other files.
I think we should still check the value of this step here.
Can we use CalciteUtils.unparseSqlIntervalQualifier(writer, interval.getIntervalQualifier(), RelDataTypeSystem.DEFAULT)?
How about just making the refactoring? IMHO the placeholder for the whole conversion is required.
I think it'd be a good idea to cache the results of the operation in an exception, and create an exception about the type in the log of the actual data.
Change this to store the class instead of reused?
This could be a static method, so it doesn't need the SLASH if we are already using one or more cs[i].
This test is fragile. It should be moved to a separate class.
This should also be private.
We should extract this to a method: RefreshRepresentation.enabledChange() (this is used in the if block).
Add a check here to verify that the serialDataReceived method was not called.
nit: Please use a constant for the message parameter.
can you please change the condition, so on this PR you won't have to change this in between the master?
[nit] use new ArrayList<>();
Shall we rename DB_LAST_VERSION to DB_LAST_VERSION_WITHOUT_MIGRATION_SCRIPT?
You can update the ifPresent block to check for the null case and do nothing if the type of the switch statement.
[Entity::getNumberOfUnitsByType](<LINK_0> always returns a non-null Vector. I wonder if this if test can be dropped to simplify the code (and perhaps future proof it). Thoughts @neoancient @mkerensky @NickAragua?
please remove alias setting (should be encapsulated in addManagedDevice
Tool tips can be slightly more detailed. Sometimes just a one word may not be enough.
I think you should keep the try
toString is not needed
You should check for ERROR_MESS_FAILED first, before sending an RST message.
What if timeoutMs > 0?
Why not check for null here, or at least log something like below? if (trace) { throw new IllegalStateException(String.format( "Failed to write notification {}", apnsConnection, sendableWriteCount)); }
I think you should use the initialCapacity for these values.
@mderamos modify the assertion description appropriately
I think this should be done in a finally block.
The code before this line has added some logic to ConfigImpl to move up
Can you replace this with: int i = addChild(fChildren.size(), child);
Wrong formatting.
use isEmpty()
We usually use a BitSet for the blocks.
no need for this.
Can we rename this.policies to this.customerPolicies? This method is hard to follow with two different lists called "policies"
This method is so much code duplicated in the constructor. Should this be factored out into a method?
:bug: you should be able to use a simple for loop here, and avoid the double iterate.
no need to do it in ctor.
What happens if it is empty?
This should be moved inside the if block.
This is public API, so there is no need to check for it.
also here, seems like we should return a PSI<A> here. We can return a PSI<B> directly and make the caller simply return "the formatted Order" or "unifyWindingOrder". The reason for similar change is that the value of the enum is not of type TONI or WindingOrderType. No?
:thinking:
This returns an optional. We should actually check if there are none in findFirst().
This looks like it's not correct. ANNOTATION_PARAMETERS should be thrown from ClassCastException, not by throwing without having to catch this.
can the locking be skipped?
![Codacy](<LINK_0> Issue found: [These nested if statements could be combined](<LINK_1>
Should not be blank, it is not part of the lambda
This is probably the connector behaviour that are now failing when a user is not installed. Does the connector test probably need to be updated to handle this?
Might be better to go with the more general PresenterWidget.Builders.json() call instead of the constructor.
Better use [AssertJ](<LINK_0> instead
For future reference: This test needs to be cleaned up.
I need to hit ARROW-DOWN twice to get something selected if there's no selection yet. Perhaps select the first item then?
Worth extracting a new method which just uses one parameter with same name.
same question here, do we account for the number of contained in currentDcs?
should be this
Line "Before" is always called.
I would prefer to define a generic String message in the constructor, so that it's more consistent with other languages: - The class name '%s' does not have the 'prototype' scope. - The bean name '%s' in the request message should be the responsibility of the caller to decide what to do with the state of the aggregate-id. - Finally, you can use Configuration.class.getSimpleName() as the alternative format is to make it easier to change and the map will be automatically overridden.
Just servletRequest: there's no need to declare the type as a parameter.
Version is a version and the default is " version". Is there any reason for the keep version?
If we're called this before then we need to use the material library, then I would use a pre-defined test case to get a Objective-C via the Context.
You should run./gradlew spotlessApply -- I'm pretty certain that the tab spacing here is wrong (BTW, I personally prefer 4 spaces for tabs, but this project is standardized on 2 spaces for tabs).
objectRefs.get().acquireReference(object) -> objectRefs.get().releaseReference(object) I think you want to decrease the reference count here?
not necessary to add "this"
this boolean is never used
No, this method should be called directly.
System.exit should be used
Yes, we don't need to generate a List, store it as a Set in the interface.
space
this this can be mocked in a @Before method.
just make this an else if?
Does this need to be a set?
Can you please change the visibility to only happen in the UI two places?
I don't think the default key values are important here. When I tried it, I think it was a bug. I think the default keyValues is a List<String>.
Create date once, if it's too much work, use it in the Date class
If we want to have a single click method and replace the text based on that for the results, why not just check this for the results? I think something like: String url = ""; if (!brand.getText().isEmpty()) { List<String> chipVals = results.stream().filter(Objects::nonNull).collect(Collectors.joining(chipVals,'')); }
this looks odd. Why is it not "this ID"?
This line is almost the same as the for loop above. Create a new VBox(elbox.getChildren()) below.
Why change this?
I think we need to close the context as well
Why don't we use log.info("No application configured. Using project artifact: {}", configuration.getApplication());
Was this the copy-pasted?
This needs to be outside of the for loop to ensure the segment layers are enabled.
Method name is set to English (should be something else, which is not very descriptive).
wrong order
Where else if clause is associated with the other methods?
Does this mean that we can just use _raw_ game_version_ of.example_ java-version
assertFalse("users' or 'email parameters must be set");
Do we need to check that the environment is not null?
Could you use a try-with-resources syntax here?
Clever.
Why do we need to convert it to a String here?
IllegalStateException is not required, we will just rethrow it with the message
I would rather return here as we had the exception for the first entry log.
/s/change/logger/external/configuration
try/catch, return a status that is not displayed.
Is the HealthComponent supposed to be sent into the HealthComponent?
Should this also be removed?
Can we have this delegate to the existing constructor? That way we can reuse the same model what it does.
why not check for null?
I'm not sure, but it's easier to use Integer.toHexString(id, ID_OTHER) rather than a null value.
Could you configure this pattern for the other extension points, please :)
nit: if you have a condition here, and you can remove the if below and just do this.blockLocations.get(blockId) when you have a value in initialize(), so we don't have to check it twice.
Try to use Collections.emptyList()
isEmpty
Does not seem to be used
This is not right
How about to use part "newMinimapTextWidget().getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(newMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(fMinimapTextWidget.getLinePixel(f
why did you change to final here? should be outside of the scope of the patch.
paramValues.addAll(paramValues) is a little bit shorter
please remove alias setting (should be encapsulated in addManagedDevice
I think the tab used elsewhere is spaces, not tabs.
I bet it should be in another pull request <LINK_0>
I think this can be simplified to: if (existingPartitions.get(udbTable.getName() && udbTable.getSchema().equals(mSchema, udbTable.getStatistics()) ||!Objects.equals(mTable.getStatistics(), udbTable.getStatistics()) || udbTable.getPartitions().get(udbPartition.getParameters())) { return true; }
Shouldn't this something "switchNotifications" instead of "setConnectionState"?
Since we already have the items, shouldn't we move it to the method refreshItems?
I can't help but feel that fluid to be using it if/else instead of if/else here: playQueue.dispose();
getDisabledMenuLength
If partitionCapacity is null, the message will be a little misleading. Will proceed with the capacity map? If the capacity is null, then we have a default partition capacity.
Not an exception now.
I think we can remove the private methods from FeatureConfiguration and deprecate this method. - should be added in FeatureConfiguration in that case.
We should probably clean up here and invoke the banner code to render inter-screen.
How about using ConfigurationManager.getArguments() for this?
I don't think we need this.
better to use a thread pool instead of single thread sleep.
This is the first place where you split the code. It could be extracted to a separate method
The monitor should be executed in a "before" test.
This error message could be updated to something like "The group name episode cannot be found in the data ref"
capability is a candidate for Objects.equals(capability, extension.getImplementedCapability()). What do you think?
What about adding validation?
.withXXX()
I don't think we should modify the log level.
Since these are two different print statements, better to use a logger method instead of string concatenation.
I have troubles myself.... Shall we use com.SOAP_SUFFIX.align(SOAP_SUFFIX).post(SOAP_SUFFIX).post(SOAP_SUFFIX).build();? SoapRequest(HttpRequest request) : @Override protected HttpRequest createSoapRequest(HttpRequest request) { Payload payload = request.getPayload().getRawContent().stream().map(SOAP_SUFFIX::concat).collect(Collectors.toMap(SOAP_SUFFIX, claimInfo -> Payloads.concat(SOAP_SUFFIX)); return payload.build(); }
COuld we add the node_id as well?
missing the byte order: pcapPacketHeader.order(fByteOrder);
object -> function?
:bug: this will not be necessary.
can you verify why i'm not sure about this test? I feel like testing this kind of logic would be more under control.
Why is it made files in the strings? Please don't use the methods easily as files are temp files.
if I'm really not sure about this or every else if... I think we should have get into corner cases too. At least for DSLSentence we could have a type of action in the log, then I'd do that like we do with the method: <LINK_0>
split this up
Would it be better to call jwt.header(DEFAULT_HEADER_NAME, DEFAULT_HEADER_VALUE)?
Magic constant
If fed from a variable to a class then add new one.
It would be better if we can refactor this part to do the conversion of the type if we don't need it here.
Inconsistent indentation, we don't use 3-arg constructor
Please add null check for vdsRettunValueStatus
Never. The caller of this method is not sure, but it's a good idea to keep in mind that all the time you use synchronized, so that each operation invoking multiple times should be exactly the same.
Here is another one.
In practice, nobody with deep knowledge of EMF uses interface EClasses, but we are technically susceptible to letting them slip through here.
For all the [ {} ] and a [10,10] are resolved to **null**, it looks like [feed] can be resolved to **null** for the property map.
Partitions must be ordered by ID before putting them into the IgniteInClosureX.
With the requireNonNull, the null check would be redundant... I think...
@xembly-style I think this will be more readable.
you can use the following : for(Tuple2<Integer, Integer> kgi : new Tuple2<Integer, Integer>>(outData.size()), Integer::valueOf);
I see it's just being used for testing. But I think it makes sense to move the version into the repository layer. You have a look for example in getVersionEntities().add(version) and then return it here. Then you can use it to save the application from db.
I'd use %s here instead of +
You should make a constant of "GridFS files". Isn't it defined by someGridFS itself?
@danielezonca I would expect that we should have just: assertThat(result.get("Standard Deviation").is(false)); ServiceResponse<DMNResult> evaluateAll = dmnResult.getContext(); assertThat(result.get("Standard Deviation").is(true)); DMNResult dmnResult = evaluateAll.getResult(); assertThat(result.get("Standard Deviation").is(false)); assertTrue(result.get("Standard Deviation").is(true)); assertTrue(result.get("Standard Deviation").is(true));
you can mutialize this code
I'm not sure if this is the right place for an extra space or an else after the open. Should I bet you?
I think it should be "OK".
could you change the test in something better?
Are ) there any reason to change it?
doc
Please fix the method signature. It's not clear which command to get, and also the status code.
You can make it new this variable definition
I might be wrong but it looks a bit strange to check if the parameter is null, rather than checking if it is null. Also, the code is the same, is more readable if the check is on the left.
assertSameContentIgnoreOrder has this, so you can remove the unnecessary import-access.
suggestion filtered = StringUtils.replaceEach(input, searchList.toArray(new String[0]), replacementList.toArray(new String[0]));
Please change this to: log.debug("initializing {}", taskClass.getName());
Maybe we can add a log here, the request.done() should be called.
I think using Path.of() as a type of @Test is less appropriate. Please consider creating your own tests to verify that there are no "test" Feption.
final
why did we use cast here? can we change it to -1L?
One of the need for acceptSession() API was to have one, from the client. So, it should be one or the other.
You probably want to use some StringBuilder here to add some isPresent checks
This seems a bit strange to me. We are creating a thread here for each test, which seems to be a heavy weight solution. Can we tse it be better?
style nit: add a space after the cast
This variable is not needed here.
useless
why not use the trace?
Can be replaced with java LOG.debug("Content is not depoated. Please have a look at the other services in this class.");
this can be a negate condition and remove the filter.
Given that this is verifying "FIELD_NOTIFY_SETTINGS", I think it's possible to name it this way: a) always returns true (if it returns true) but this doesn't matter
Make this public and mark it as @Deprecated.
Don't need to call deleteOnExit
why do we need this? It doesn't look like we should be at the start of the method. If we add more information, we should probably rename mServerSocket to mThreadId.
I think you need to pass Build.VERSION_CODES.LOLLIPOP here, since that is the default implementation of getApi().createFolder
I'm not sure this is the right way to read this given that we only read the final values from the array.
I would just call  prefs.hideEmptyPane(e.getValue()).
Why do we need to log this?
assertNotNull please
Add a constant for the name
Why is it better to use more than one scope to test?
Shouldn't the cancel *only* be in the case of exception?
Let's not throw RestAPIException directly, since it will be thrown by the RestAPIException.
Can we just call a old handler that returns true?
We need to re-throw an exception here, otherwise it will be swallowed a lot of stack trace.
I'd use the real size here for the checkpoint field, and make sure the inputGate.getsize() == 1
These logs are just debug output of this output.
Missing final
Consider to use negative condition here, so it will just return false when the result is false. Also use the formatter on the if condition (add space between the if and the call to super)
suggestion Assert.notEmpty(query.getIds(), "No Id define for Query");
redundant type casting
You don't need to test this with the current code
All of these attributes should be moved to E18n.
Isn't a LinkedList better if we don't know about the size (to reduce reallocations and copies)?
The first three lines should be done after the filter.
wrap it in try?
Not really sure that we should just serialize in confgure-web. You will see the same working directory contents in map.
What about making this a _client_ option? Seems like we can even change it to something like _client_.java.io.FileKey.separator_.
This method is "warn", not info.
Is this correct?
Not sure this can be replaced with isPresent()?
I'm not sure you need this. If you don't subscribe to visitID, then you're not checking for null.
assertThat(git, not(git)).hasSize(1)
I would prefer if you use StringBuilder instead of StringBuffer.
How about passing in groupBy instead of just groupBy.isUngroupedAggregate() as I think we'd want to get more info eventually out of the groupBy (for example, if it's ordered or unordered which impacts memory usage substantially)?
This could be chained to a single line: AdHocPlannedStatement(ptask.getSQL().getBytes(Constants.UTF8ENCODING), corePlan, ParameterSet.fromArrayNoCopy(generateVoltParams(ptask)), null);
replace with log.infoFormat
Can we just use the CosmosQueryRequestOptions to save the scope of the public API?
Adding try/catch to try block is unnecessary because try with it
If we want to store the getActivityId in the field, please consider using the activity in the toString() method.
Can we make an assumption to always pass a list of UserVideosResponse for this. <LINK_0>
nit: addBlockEncodingFactory and addBlockEncodingFactory
why is this public?
This codacy is complaining about duplicate call to FSM method. Consider moving it to a separate util method.
final
since you have moved the check above, you should have a custom message.
can be replaced with String configValue = StringUtils.removeEnd(config.getParamValue(), "%") which basically does exactly the same.
may be replaced with the generator.setParent("Validation", generator.integer_data, valid.kafkaPort); here. And it does not make sense to have constants for the other fields.
Please add java doc.
I think there is a method String.format("SELECT * FROM InventoryScale WHERE prs.name = :name");
I think you need to use this method with a token to avoid all the processing that was done with list of sorted keys.
These two lines should come before the if. (Remove in the other branch.)
String.equals() should be used instead of the constant.
We should probably package all these finals or package private
Why is this synchronized? I don't think, that the current code looks in solvingTerminated(), as all the listeners are already initialized and in the superclass logic, if we want to prevent that the problem is too big.
I would prefer to move this into the if statement below since we don't need to make it final.
Let's do this when it comes to the omKeyArgs and getAclsList().stream().map(a -> OzoneAcl.fromProtobuf(a)).collect(Collectors.toList())
>FluxUtils.writeOrRead
We should have tests that pass FieldAttribute.PRIMARY_KEY or FieldAttribute.INDEXED.
This should still be done using the executor; just cancel the scan task.
can you make this final?
ms
it's "magic numbers" to me. Can you pls. use char.for.. or better yet, as you know how many.
resource
You prefer having a if / else if instead of a or in the first if?
This is not correct. 1. You must be able to compare the _host with that._cluster (the _pod_) if that._cluster is null, otherwise you return false. 2. > returns true, if that._host is null (the cluster id should be whatever it is).
If whitelistedKeys contains a span, then there is no need to whitelist and it doesn't. (It can be bloated up)
We need to also check that the result of eval has not been zero?
I'd suggest logging here just in case.
Is the replica _end_ to exit? If so, this won't be optimal.
used to commence
Should be.filter(this::isNotCompatibleFor26x)
This is the same as throttleWatermark - 1, but it's not necessarily the throttleWatermark to kick in. Perhaps the message would be "Projected cache size exceeds High Watermark. throttleWatermark" or something similar.
@bxf12315 the same as above, please use assertThat(column.getCaption(), equalTo("Var_Name")
Please use REQUEST_CONTROLLER_EXTENSIONS constant and use REQUEST_PREC_ENDPOINTS
I guess this is a typo.
Why do you need double 'active' flag?
Could private methods be reduced to private?
s/public//
Was it for purpose to fix the formatting?
The method should be declared private
highlight this and extract maybe into a method that return bool
Shall we make the following more readable? **Several
@pynicolas Are you sure about this method name? As I understand, it does the opposite
please double check that marking the end of things are being done in the right place (that is, do it in the finally if you want to cover all exit paths).
Should it be null or empty?
note that we want to add the exception handler to the log.
Should invoke oobr.setIgnoreCase(false) here instead of comparing strings to DMN and MIConsoleStreamOutput instances.
Suggestion: "--active and --inactive options are mutually exclusive."
I know you started this in your changes, but still. I think it is better to use String.format.
Does it make sense to change this for "old-index" as well?
I don't think we need this condition. This does not seem to be true.
Let's move this line below, just before the requiresFBO line.
![MAJOR](<LINK_1> 'Severity: MAJOR') Either log or rethrow this exception. [![rule](<LINK_2>](<LINK_0>
This might not work. "The lower_SECURITY_SCHEME_FIELD is set to a long format." does it?
You can use tree expressions like '{', "\\\\z'}'.
No need to add these variables here since they're just used for the "real" test.
we can decrease the amount of code here: if (diskImage.getDiskInterface()!= ImageStatus.LOCKED) { getVmDao().update(diskImage.getImage()); }
Please use static imports for all these tests.
You could probably move that block to a method and call that method in all 3 places.
s/a/identifier/g
This variable is very badly name if it's supposed to be the serializedUserReference.
We can simplify this by using the existing meter(MetricRegistry.name(name, "response", "code", "1xx")) instead of the old one
List<ERepositoryObjectType> list = new ArrayList<>();
Unless I'm reading this wrong, if the user provide a rootPath ending with \* this will add another /, then it will add another *. We shouldn't add the slash if it already ends with *
can this be in an else clause?
This will throw IndexOutOfBoundsException if the channel names are empty.
Two issues here: - It should be removed now?
I think you should use here the "if ( null == other.department.length)" check. It can be the same as in other classes, its just added to the attachments.
This can be simplified to something like: "Plugin brokering process for workspace %s failed. It is missing"
This change is a duplicate.
These strings don't need to be converted into constants, these are going to remain constant.
use BooleanUtils
Please rename this to eObjectMatchEngineFactory or something closer to the real use.
It would be cleaner to have a method to get the stack trace of the method.
can we make this private?
How about making it more descriptive and understandable [not checking](<LINK_0>
I see that you are using a private variable is useful.
Do we want to put this in ContantHolder class?
I don't think this optimization of repacing.equals by '=' is correct. I suspect there are cases with dynamic metamodels where we won't have the same instance of feature on each side of a comparison...
String.valueOf()
why do we need to check this for null? I would just remove this check and put it as a separate method.
Those two lines should be moved to the finally clause
method should not be public.
You can use.orElseThrow(...) here to avoid the catch block
Can we have a helper method for this in MetacardAnnotationUtils, for clearer code? It would be much more readable and easy to maintain.
@Serranya same here. See above.
Does it make sense to do a check for first element in the list as well? Today if possible and always use the expected value you always check first. This test in fact, I think it is possible to do a check for required value.
Instead of accessing this color, you can use the PlatformUI.getWorkbench().getDisplay() as in: <LINK_0>
suggest rename to innerHadoopShardSpecLookup - "hadoopy" is easy to mistake for "hadoop" when someone is reading this code
I am failing to see the bug. You will be iterating while (responses < commitList.length). CompletableFuture.anyOf() will be invoked for all CF which do not execute exceptionally.
You should add a check for the 'not started' case before calling stop. Throwing an exception if the user didn't stop the container (which wasn't what we were before).
A duplicate?
this can be removed
Consider making these identical to the write(src.nioBuffer(), (result, exception) -> write(src.nioBuffer(), (result, exception)).
I'd rather use a long and double for this to be safe, but why not just use the primitive ints?
what is the reason for switching the back to ".."?
This is a bit odd, let's remove it.
> I am curious what this is. Why do we need a synchronized list? what if the authenticationResult is null?
nit: let's have static import for
suggestion if (networkDto.getServiceEndpointCreation() == ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT && ResourceGroupUsagePattern.USE_MULTIPLE!= getResourceGroupUsagePattern(environmentDto)) {
Put a space after if
No, this is needed. It's an decimal point, so maybe we can just use 0 to represent the right bounds.
I would add a ton't to log the exception in this case.
is it possible to call pools.setClass()?
why is this log message different from the warn? I would expect a log message but not to continue.
Incorrect error message. An empty list of what is missing.
any reason not to use simple? if (!oldMessage.removeMessage()) {... } else { return false; }
may want to use "!".eq()
Missing white-space changes.
Please don't forget a sysout here
Why are you using the label provider?
Consider making this an enum and a constant to improve readability.
Need to extract this to a method?
baseId +diagram
Consider using EVENT_NO_LOG_ENTRY instead of REscribableQuerySubscription?
We're going to be filtering out the geometries here, wouldn't this be a problem of the scenario where we're going to be getting up?
GitHubSCMTraitDescriptor<?>> dedup = all.stream().collect(toList()); NamedArrayList.select(all, Messages.GitHub_repository(), NamedArrayList.anyOf(NamedArrayList.withAnnotation(Discovery.class), NamedArrayList.withAnnotation(Selection.class)),
I think we should avoid using try/catch here. It is possible to use the SWTBot test.
Please remove the extra space before the LOG.debug
nit: extra space after 'if'
Maybe you can use Arrays.asList instead?
Shall we move character '|' to a constant?
I think it's possible to do that more elegant by streaming one list and using iterator of another list in that stream.
This is an extraneous debug statement.
I think you also need to check yamls.size().
You should only log this case when there are no group and group in the message. In other words, you can use SoftAssertions to check if the group is not null rather than throwing exception. Not et.
don't you want to add a file?
If we want to remove the Instrumentation call, are these needed? I dont see a strong opinion here.
double check that no group is still here
Use of randomIntumor.getText() - i.e., this method is using the strings from the function
rename to importChange
did you want to remove this throws IOException as this method is not used
Why is this not based on context.getCurrentUser()?
Why we use this by default? I think the we should stick to the new names for linting exceptions.
Could this be declared as a method on the interface?
put "unimportant" in a constant
Is this necessary?
Best to log the exception here.
Here it is going to depend on the resilience strategy... so hard to say. I would drop the operation result assertion though.
This is a constant, but the BIT_VALUE is actually the same as scrubbed out.
I believe we should check facility.isAssignedServices() here.
redundant, remove.
yes, we should have some sort of 3 depends on the meaning of arrayNode here: - Types.CHAR: case Types.REAL: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.VARCHAR: case Types.LONG: case Types.
In case of db user is not present, getSession should throw exception, but instead skip if it can be set to -1.
That's fine.
why not use the bitset.filter(k -> e!= null)?
Shouldn't the intersects and checksumType be discarded here?
Could this loop be avoided by adding an iterator iterator to the index? Seems like an easier way to avoid this kind of loop.
I would prefer to also add the message if the configuration does not have a marker id.
@mykelalvis please, rename to maven. s is meaningless :)
please use {}
This is the same as there is no "default" case. I think there is a case when editing the table.
I am not sure it is safe to use this map from concurrent thread. I see it is possible that two threads are trying to remove the same file at the same time and both are thread safe, but it seems like it might be OK to let it do.
Companion
I'd extract this into a method, getMoveTooltip, extract the common logic.
I am a bit confused about this method. I think it should be private.
why did we change the logging to not use assertEquals?
please don't do in the middle of method return. use else instead. also you can always refactor the branch into a separate method if there is too much condition
You should check to see if the bridge is active here to be the same as OFFLINE I think.
This seems like it should handle the exceptionsl ike the Exception block from above. Something like: final Exception exception = new RuntimeException(arguments.getCommandExecutor(arguments.getCommand()).withException(e); System.out.println(CliCommandFactory.getCommandExecutor(arguments.getHelp()));
Can downloadBatch be null?
TransportException is not just a wrapper for other exceptions, so where it is thrown and it's (sub)class is important, just pass it as the new cause.
Nit: I think we just do not log the entire stack trace, just like it's been logged; we don't really need to log the entire stacktrace.
looks like getDefaultStreamProperty will return Optional.empty() if the value is not specified. Please add a null check here.
If someone calls offset.reset() (topN does this sometimes) then this will be wrong. I think you need some logic to detect the offset going backwards, and resetting the iterator in that case.
@aertoria Can you change the method signature to not have it return a Long instead?
this should probably be a separate method
The optional parameter should be retrieved, like if (savedInstanceState == null) { // If the user is null, don't use Companion in the app.
Redundant parentheses.
it2
StringUtils.quote(id)
This should be logged, not info
You should have a method that returns an old one then, not return it.
Could use a constant here instead.
Same thing, using this method here may cause the getLineIndex method to return erroneous result, which may cause regressions in customers (I think code minings actually use this method extensively to compute where to draw for instance)
This is the same code block as below, right? Can we extract it into a constant?
make sure the restartServer() method is called after restartServer()
getBigtableStartRow returns a ValueProvider which will always be non-null. I think it would be more correct to use a NestedValueProvider that transforms the opts.getBigtableStartRow() ValueProvider into a "true" or "false" for the ValueProvider. This way the config value will always be non-null.
else { Thread.sleep(); }
formatting
String[].class is the type that might not be needed as a type parameter.
The _isNew_ added for the build here, since you didn't add a placeholder for it.
We should leave the theme as null by default.
Please log the error, don't print it to stdout. What happens to the LAF if an exception is thrown here?
> BUILD_DATE [](start = 30, length = 16) also what is the value of this?
You should not use dockerfile. to call it. You should use it as constructor of crawledDockerfiles and it should be tested.
I think this should be: java this.serverPort = FIRST_AVAILABLE_ATTRIBUTE + "-jwtproxy";
I don't think this is necessary. It's a side effect and the intent of the test, which is to pass the invalid locale to the view.
should this be more strict? i.e. require only 1 char inside the regex.
It's better to use "Preconditions.checkArgument" here. And it's missing a period "." before "Transaction".
For consistency we should catch all exceptions from the call to getMessages().add(getErrorMessage("changeRequest.developer.notActive")); so if devDTO.getStatus().getStatusName().equals(CommonStatusType.developer.notActive), then there should be a space in the exception message for the developer which can be null.
That's a separate variable and a parameter can be removed as well.
@pynicolas No need to assign to array - it's the only place it's used
I think it is better to move it to debug log, like below: log.error("The scripted command does not inherit from BaseCommand=" + timeoutMillis + "ms");
it looks like a lot of code duplication
As I understand, this is not actually what we want. Will the loop to execute once, once per script? Or is it just to get the "original" path? I think it's weird to have a loop and pass that to the getPathsToScriptsToExecute() method.
Why change from'sql' to'sql'?
Should we return an empty list instead of null? Or would that not happen. I think we could do the null check in this case.
Is this a minor change?
[minor] Use a switch with a meaningful name?
This seems redundant with the also nested change.
This is a spurious change. back it out.
It looks like this could be an infinite loop. Is it because we want to limit the index to be 1000 or every entry to be created or a lot earlier?
I think it's better to provide a method that checks if TripleComponent is created or not. Then you can create it once.
It may be better to move the logic that is in the URL builder and use it there as a parameter in the AbstractHttpCommand. For example URI itself can take uri as a parameter. It will be a lot more clean. By applying this we can retain the URI then to get the local URL, we're not really gonna get the URI from a request for both sides and server.
Ah, I am wondering should we use the MultiMap.keySet() method instead? It is a set, so we don't need to store the same key.
IllegalArgumentException is possible here. I see it is not handled
I would be more defensive here. I would say that if the container isn't set, then the info is logged. Is it sufficient to log the entire result?
![MAJOR](<LINK_1> 'Severity: MAJOR') Remove this unused private "loginCopy" method. [![rule](<LINK_2>](<LINK_0>
Can we use hamcrest matchers here?
One more times(1).
Prefer to use TestUtils.catchAndException to catch the exception
Can we change this to a "debug" log message?
Ok, that was OK. But it looks like the only change in this PR is that it _definitely_ recreateSockets on the parameter to create logging, so we should correct it as well.
Can you use a more relevant variable name?
Small nit, but to make it a constant, the code is not repeating what is.
This code only gets called once after the update has been done, so it should be treated the same way.
if this is a valid user, it might be required to know if that is the case, so we should just check that maxLogins is not null.
in this case, the 'else' statement is always true so this could be removed.
if (m_ifLabelDao == null) { return; }
Typo: cannot be read
should be a single line
Can we shutdown the thread before the shutdown hook?
How many times this test is running in this PR?
This should change to a sleep to avoid sirius waiting for a test.
Consider using a template to store the session scoped variables.
I was thinking if we could be sure there are no messages in the stream, but we could be sure there are no messages to start since Fail earlier and after parkPaused is called.
You can probably extract a class variable
So two patterns show up above and it seems great to make them consistent. I wonder if there's a better way to do this, than we can have a single method that would get the task, and then maybe the code also used in the else block?
Use HistoryEntry here
better to use afterTest() to make sure that no CI calls are run on all tests.
Can we move this into cGroupsMemoryResourceHandler.prestart()?
this could be done more efficiently (and potentially save the amount of string concat)
I would have this test within the flow from yield method in fact, so the algorithm is pretty straightforward and the algorithm is pretty straightforward. (and the fact that this is so easy to test and maintain)
Is this still needed if the value gets overwritten in the next line?
Would it make sense to move the history into a re-intent's update. Instead of removing and re-initializing everything on each entry from the list. Instead of re-initializing everything on each entry from the list. Instead of re-initializing everything on each entry from the list. Make the unique values that make the log into the configuration have been setup for each entry to be that clear.
Not sure why it is enableed here? Is it because on purpose?
Was this intentional?
does this not make things fail to compile?
nit: "Array element should not be nulll"
Should be removed
the same as above. we should propagate the exception to serverException
I'm going to trust this is doing the right thing (I understand this code is basically just copied and pasted from Apple's examples)
you may want to set a Value that contains the values you want to assert.
could use a guard clause to reduce nesting.
I'm thinking this could be moved into a separate method so you don't have to duplicate one.
This is going to be a problem since it is a Config.existingValue() method. You can use putAll(), or even better, just iterate over the set.opt.
Same with the log4j
Should this be an IOException?
change this to node.isPartial()
@maria-farooq we should provide a description to the log message
Can we pass in the action parameter?
Rename to "expiration"
I would prefer to have org.wildfly.common.security.manager.WildFlySecurityManager.getCurrentAddress() as a constant.
the logic here is not clear: a simple if-else if may be written as java if (linkedFile.isGeneratedPathSameAsOriginal()) { return!linkedFile.isGeneratedNameSameAsOriginal() && linkedFile.getFile().isGeneratedNameSameAsOriginal() && linkedFile.getFile().linkProperty().ifPresent(this::add); } else { return false; } This way it is clear that this dialog is closed
If you ever make this public this _ will break the JavaBeans specification.
this exception is caught in line 111. This can be moved to a separate method
Should the UpdateSite be added to the message of the "generated site features and plugins"?
please use StringUtils.join(noticeableTo())
why is it adding this later?
Not sure about this, but maybe it is better to use the builder pattern to start with the token token code?
there's a race condition here. If we are at the same time for both readers and 10001 then they are seek(d) incorrect. We should split these into two separate cases.
Style nit: please always use {} with if statements: if (optional) { iterator().next() }
![MAJOR](<LINK_1> 'Severity: MAJOR') Remove this unused method parameter "log". [![rule](<LINK_2>](<LINK_0>
This test is wrong. This method has to be public, while the other two methods in the class are package private. This is only used in the test, and it is better to use the private API in the test.
Use the jclouds predicates2.retry construct. If this is a common thing to be done, consider creating the predicate and make it injectable so other classes can benefit from it.
Sorry, but it seems a little bit dumb and uses an assertj's util.
If you read the file, it will be hard to read.
Could you rename DirectDebitConnectorCreatePaymentRequest to remove the instance? It's not really that important.
Why.toString() versus just printing the object?
This is a really good idea. The value should be compared as a long, and it should be if ((double)0) == (double) instead of continue.
setErrorMessage
final is unnecessary here
Pls log: fail("wrong assert", e.g. Lex, "for interface interface was not found");
That's just space
We can change this to just a counter.
This is shared among all the cubes, not just the one registered under the cube.
s/lastStartTime/lastEndTime/
Do you want to clear the map index again?
Won't it be safer to use try-with-resources on the factory here?
locks can only be non-null if we entered the if block and reached the line between 187 and 188 :-). At that place it is also guaranteed to be non-null. Therefore, move this code below the line 187 and remove this check.
Using Stream.forEach() and unsafe is a bit difficult to follow.
Move this outside of BulkOptions, to keep the constructor private and expose its own access modifier.
just use context as sync obj.
Use one style in this file that has the { }
tc.mandatoryParam()
Please use I18n.
oh yea. This method doesn't have to be public. Please put it up and call it.
I don't think you need to assert the result here...
![MAJOR](<LINK_0> 'Severity: MAJOR') Remove this unused method parameter "protocol". [![rule](<LINK_1>](<LINK_2>
This can probably be simplified to just a single line as it's just a bit odd to have both loops, and also a little better to read.
There's not allowed cases. Make applyDropConnect return false.
s/Count/Count/
Please add a check that the file exists in azkaban.properties so that we don't need to create new objects if this is not true
Should be assertThat(e).hasMessageContaining("cannot be cast to java.util.List");
is this empty line ok?
Can you log the exception stack trace before this call?
Need to exit the function here if the table was null.
This is going to work reliably, you're making a new instance of UUID using DynamicPropertyManager to create a new instance to need to be created any more.
I suggest using a try-with-resources block here, because that would eliminate the IOUtils.closeQuietly() warning.
Maybe we should pass a valid supervisor here?
Tests also need to be context-aware unfortunately, otherwise they end up handling against globally defined sites.
Does this need to be sorted?
Minor: maybe you can replace these two lines with: RegistrationHelper.createErrorResponseEntity(message, HttpStatus.FORBIDDEN)
We should use CircuitBreakerConfig.custom() instead of creating a HashSet
I would like to have a HyperlinkListener interface that extends HyperlinkListener. This way you can be able to get rid of it and add HyperlinkListener directly and have it be registered before linkActivated() is called.
I would put this to a class-level static String field, and use it in the class.
Line length
This should be moved to the DiscussionPostsAdapter constructor.
the 'networksByHost' parameter is not needed, you can remove this line.
add a logger
I think it is better to change it to debug and not include the actual credentials in the log
Will it not be a good approach if we get object using function **getItemAtPosition(position)** and then check from its attribute if particular video or group of videos has downloaded?
s/stashRequestFacade.extractIssueReport/getIssueReportingPostJob
can we do this in the constructor so that we don't have to register a file with every entry?
Other places we have a static method/class, which does exactly the same thing and does not need to be done explicitly.
maybe lets use the new name text?
Just to be on the safe side, would it be better to move this logic into the constructor and not have to save some duplication across blobProperties?
this.configurationInstanceFactory = new ConfigurationInstanceFactory<>(extension, config, resolverSet, connectionProviderResolver);
I would not be so important that the menu is not always available in the CASCADE type. This way we can avoid the extra check of the exception thrown by Eclipse because it is not available in CASCADE.
That is a good error message, but I don't know if there is a reason to turn the auth system back on after creating it and not after this change.
This is a map, why not just use a list?
Can be changed to List<MeasurementVariable>
this is not required, we need to validate that these functions are present.
It might be interesting to allow CNull here, actually, to allow for more flexible code. Setting a CNull would clear the string.
final IPath pathString = Path.fromOSString(path); is needed and pathString needs to be passed to the createLink() method below. That's why the Unit test fails.
I think it would be better to store the entire ReaderBlog table in a local variable, so that we can be used for it in other places. wdyt?
Typo: space
What's the advantage of returning onBackPressed here since we're essentially passing the object and its contents to the fragment, rather than the string manipulation?
move the check to FollowThreadAction?
we might want to log something if the file isMarkedAsDownloading() as well.
String actualText = Text.class.cast(e.widget).getText();
Why make a separate param here? This method already takes care of it.
Bind these in the system module, aka Gerrit-Module. Its much less complexity for anyone to deal with.
Magic number
Style-nit: Parens aren't necessary here around the loop.
method.getMethod() is already clear. You don't need to extract this method.getMethod()
Are we sure we can't reuse the activity for this?
I would add a blank line above this if. The point is in this case 'if' statements to make it more obvious what the statements can be.
if you are using this field then visibility can be removed
Should we do an eic?
Shouldn't this be unsubscribe?
Is this block really needed? For 3rd cases I would do like this: java for (S3Server::run) {... }
on the catch, let's add a servere logger
I think we should prefer a setter here rather than member variable access.
Eh, I would prefer to use the name filter(s) for this case ("File referenced by exported table does not exist".
rename to childItem
suggestion if (lon < 31.0f) { zoneNumber = Math.max(locale.getoneNumber(name)) } else if (lon < 31.0f) { zoneNumber = Math.max(locale.getoneNumber(name)) }
IMO, it should be a warning, not a warning.
Is it necessary to use a mock here?
Can you check that there is only one patient?
We use a nonNull check here.
What's the up difference between line 26 and 79?
new String[]{.txt} should be added to the context, I don't see any other parts of the code.
Perhaps also desirable to override the [DefaultContext Rule](<LINK_0> with a @Override on the interface.
don't construct a stream, use the logger
This should be safe to remove the null check if the commonType is not null, otherwise you're creating the null list.
Should you try with resources?
isPortMirroring()?
Sad times, but I don't think we can easily work around this.
Shouldn't this be part of the wizard? Is this on one?
shouldn't this return an Optional<Alias> instead?
Nit: this is duplicated at line 48, I would get rid of this line.
Remove the if blockBuilder.resetBlockBuilder() call. Line 77 can be simplified as: java if (mapType.getObject(mapType, keyBlock.getPositionCount(), INVALID_FUNCTION_ARGUMENT, "map key cannot be null"); BlockBuilder mapBlockBuilder = mapBlockBuilder.resetBlockBuilder(0);
Suggest changing replicationMetrics.update to keep this logic.
Should these heuristics end up switching Chicago, too? I think you're not filtering the Chicago at all. It seems to be Chicago, but it's already...
In the alert message the alert is not the cause.
I'd suggest to verify that the path is the same as the file, if not, rather than the contents.
Not sure but consider the style : boolean catalogEffectiveDate = that.catalogEffectiveDate!= null?!catalogEffectiveDate.compareTo(that.catalogEffectiveDate) : that.catalogEffectiveDate; return that.catalogEffectiveDate!= null && catalogName.compareTo(that.phaseName)!= null
You didn't change the above line. Why closes the try-catch?
There is a lot of duplication between this and the other parseResources method which extract the common part into a utility method with an Iterable<URL> getCamelContext()
This is meant to have the same as public static String
Instead of hardcoding the value, you could have a getValue() method in ExecutionConfig to return a set of nodes.
typo _start_ -> _stop_
It would be better to strictly align these variable names with the method names. Since there is a Java 8 method in the same class, I would suggest to also include the class name. E.g., - resourceSetResourceInformationMethod - resourceInformationGetNameMethod
@ivanarrizabalaga why adding this?
Depending on the EnvironmentC side, I'd rather make it configurable from the EnvironmentC side, to not require any model param.
well, the probability is very low, I know, but shouldn't be >= 0 instead of < 0? in that case this will be bigger than the maximum allowed vm.
So you have default settingsfor userId and NetworkAccessPointId and NetworkAccessPointTypeCode, if an exception is thrown but not if the url is null. why is that?
The logic seems backwards. If item.getUrl() returns null, and getUrl() returns null, you should check it for null.
Logic is weird here. I think it would be better to abstract this into a separate class.
Why didn't you add it to 'ExternalRegistrationConfigurationMapper' like the other mappers?
we can just use ThreadFactory#instantiate(ThreadFactory)
should be com.google.common.base.Preconditions#checkArgument to check if component is an instanceof ISequential
if the cluster is modified by another thread, it will be returning a new instance. Is that what you want?
This method is only used in HeliumPackageSearchResult. CWL. Shouldn't there be a test to make sure this method always gets called?
If the result is null, that would be a bug.
This method seems to be repeated three times in the file, what is the code that is taking care of? I'm not sure if it would make sense to extract a private method that returns the IClassCoverageRegistry and set the CoverageRegistry to the IClassCoverageRegistry.
It looks like here is a pretty similar call to the buffers in this class. If there are no partitions and it's not part of the buffer, then we should probably not need to use a list of them on all of them. I think the method name and class class can be more meaningful. Also, please add a space after the if.
This can be simplified to Collections.emptyList()
why not simply use "map" instead of the hardcoded string?
This is not going to be used here. Break it into 2 lines.
The purpose of this test is to throw inside the onError block. I don't understand why you removed the IAE
interesting, I don't see a reason to change the debug statements in this class. We have all the info logs in the method, including the time it's gone down. Just wondering.
Why is the type of Option<Seq<T>>? The previous code was: public static <T> Option<Seq<T>> sequence(Iterable<? extends Option<T>> values) { Objects.requireNonNull(values, "values is null"); for (Option<? extends T> value : values) { if (value.isEmpty()) { return Option.none(); } } return Option.some(stream); }
You can use ProcessUtils.hasStudentRecord() for both.
What's the case where mS3UnderFileSystem.stripPrefixIfPresent returns null?
No System.out please. You have sysouts somewhere.
Can we use a constant instead of hardcoding this?
this is not correct, b.getSymbolicName() should return null if padmin is null: no need to check it is not null.
Not needed anymore.
Can't you use prov.expandAll() instead?
Same thing here; why not throw an exception and let the caller do the logic for it?
I'm not sure we need to timeout on the CI server. It is testing that a file cannot be created by the JVM, the JVM will close the node. At least we should close the node in a finally block (i.e., akaii.File.deleteOnExit()). This way we ensure that the file is always closed.
Is it ok to move the code inside the synchronized block?
For me this feature is not part of this 2004 issue, nor this is specified anywhere. I can't see this part in this commit, but this should be part of a broader reflexion about displaying path to users. I would personnally remove that part from this commit, but if you disagree feel free to let it as a bad idea
Why is this necessary?
Hmm. do we log tags? Probably a good idea but C Git doesn't.
[minor] A null check and return?
Any reason why this is required?
EditedStyleItem item = (value instanceof EditedStyleItem)? (EditedStyleItem) value : null;
can you please add braces
The name should be error, not info.
only if name changes?
Not relevant for this PR, but I'm curious: why is the TrustAllX509TrustManager necessary?
Redundant replicationSpec.setDbName
Should we log a warning or throw an exception in the else of this if? I don't think we want to just warn in the else of this if.
I think we should add some new support for this property param to be added if the new map is not found.
Is this really necessary? The testRules.isEmpty() is still true.
Hard code to use this one: final double score = -10 * Math.pow(10, -10);
Since the Map is already checked as a Map, this change is redundant.
Why did you remove the "protected" modifier?
Deleting the code base would probably be better and also make it in a method
The bounds here should adapt themselves On all your controls of your two wizard page, try to use some layout data elements. For exemple control.setLayoutData(new GridData(GridData.FILL_HORIONTAL)); Look for examples in Sirius code base (property section, wizard, dialogs)
please rename to vmDomain
Do we need any tests for the changes in this plugin configuration on the agent side?
This change looks unrelated to fluids? Seems like it belongs on a separate PR ;P
can this be private?
This might as well become if (this.creators.keySet()) { for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) {... } }
How about a method like this? int countGroupByLayers(final Query<T> query, final T query, final T query) { if (queryDataSource.getQuery().is QueryDataSource()) { return countGroupByLayers(queryDataSource.getQuery(), 0); } else { return findChildren(); } }
Same as above, please use (?<username>.*) here
please remove.
this.pushObjectList will be null
I'd suggest for debug/trace/remove any of the things that might be needed/intentionally, the @Override annotation and the @Override annotation will be there.
Optional: can't we just do this? java if (container.isManaged()) { return; }
Do we need to be considering the table here as an error? It could be to parser and the config files get the ERROR messages.
return new IndexerFloatColumnSelector();
This cannot be removed. The code needs to be removed.
.isEmpty()
Use of this.getClass().getName() instead of getClass().getName()
I think this might lead to unused space on the next line; I think it would be better to rephrase the code as: java public boolean constrainedColumnToResize(Icustrunk table) {... }
Is this one needed? This could be a for loop.
Same here: should be able to pass a RelationshipResult from the query
Curious for the implementation for this case.
this should be outside the loop? Otherwise it will only check for the first brick in the list
I don't like this. You can use the constant 'test-domain' and its getting the name.
in settingsDataSource you are already setting the presenter to the presenter and not invoke from there. This can be confusing and probably not need to know anything about an instance of a presenter
Locale.US is only valid as it is used to start and end with HHBB, etc.
Needs a check for the return value.
You should make a separate ConflictOverrides overrides and define the on-heap-form-id variables to avoid unnecessary casts.
If you don't return here, this will run only after current repl dump execution? What is the order of execution in the current case?
This doesn't seem to be correct. It's only used for scan and delete event. The number of entries is now shared by scandNgage. So it should be as before.
Since this doesn't work for executors, should we make the client have a counter of size 1?
suggestion if (direction == Direction.OUTGOING) {
What about doing a switch-case here to avoid the double break? If not, add a return statement here to make it clearer what the code is doing and make the code easier to read.
it looks like createMergeConflictInfo() always shows the commit status, then adding the mergeResult should be an implementation detail of createMergeConflictInfor() and the mergeResult needs to be passed to it as a parameter
I think this is a bad smell. We should put a cause for the parser to be able to reuse the parser. It's already been made for the RWiBUT version. But it would be a better approach.
nit: should be removed.
Microscopic nit: this needs to be at the end of the stack trace.
AJ, An encounter also has a time limit of 2 days set to read. Try [this](<LINK_0> instead.
resolvedBaseBranchName.matches(resolvedComparisonBranchName)
Remember to put "filter" around map.get("key").toString() into a method to make this work/clean and get the full object.
I don't think it is a good idea to swallow interrupted exceptions here.
Oh, I see that this is a problem! It doesn't seem to make sense to me. Surely the default value is 0, but the invariant is only called for the number of threads. But that's not an issue. Also, the num threads == 0 could be a valid value.
This should be outside the scope of the test.
instead of?i)BOOLEAN DEFAULT FALSE. I would add it to the method below.
Should also be set to system property after the test.
I expect it to be just select from the list of factories.length, I think it's more readable to just select the table from the factories array.
Minor. This message contains a bunch of caches, so I think you can just use CacheManager.logger.error(String.format("CacheManager.ERROR_0006_CACHE_EXCEPTION", e.getLocalizedMessage() ), and also removing the try-catch from an empty method.
This line is too long. Did you apply the formatting rules?
Looks like this is missing the promotionBuilder
Please add this Preconditions.checkArgument to check that certs is not blank.
This check is not needed
nit: extract this into a static method (maybe isEmpty() or something?)
consider creating a method like verifyCollectionVersions(Collection, Set<Version>) which invokes the verifyCollectionDatasets(...) method.
suggestion if (segment.getRelationshipDirection() == Direction.INCOMING) {
This is wrong. I didn't see this method, please explain.
style nit: no braces here
couldn't be mapped to {}
Replace this line by: assertNull(doc.getPropertyValue("dc:creator"));
Indentation looks off here.
Is this used? ;)
What about to use 2 methods authorizedInternal in 1 if clause with different objects? Like: if(!AuthzResolver.authorizedInternal(sess, "removeSpecificUserOwner_User_User_policy", Collections.singletonList(user)) &&!AuthzResolver.authorizedInternal(sess, "removeSpecificUserOwner_User_User_policy", Collections.singletonList(specificUser))) {.. }
This log line is odd.
It would be better if we would show the user some message as toast as well!
This should be replaced by something like, as you can see for content assist for instance quickAssistProcessors.addAll(GenericEditorPlugin.getDefault().getContentAssistProcessorRegistry().getQuickAssistProcessors(...))
Instead of hardcoding this, can you check if this.inMemoryScope is an attribute in Config?
Maybe org.apache.commons.lang3.tuple.Pair instead, which will give you the number
Does this exception need to be caught? If it is, the exception should be wrapped in a new IllegalStateException.
if you wanted to create a default value for this. Could this be exposed as a static final value?
Could be simplified to: suggestion final Quaterniond.fromPrimitiveType(Heg, fromPrimitiveType(H, Location.get()).get());
It'd be pretty sweet if you could return the original GraphvizPrinter, rather than necessarily use the Map<PlanFragmentId, and fall back to the old method.
Add a constant for the key
getOrElse is enough?
Can you explain what problem this is solving? The jira does not tel much about leases.
I think this should be private.
This method seems a bit convoluted. Why not make it a method like CitationStyleToClipboardWorker outputFormat, the DialogService seems to be a very general object that makes it much nicer for the outputFormat and thus results in the final object, but it's definitely not necessary here.
This log is unnecessary, we can use the class name instead.
I don't think this is correct.
Use 'isPageLoaded' when the page is loaded.
@mykelalvis please, rename to maven. s is meaningless :)
The message doesn't seem to be read.
I think we should pass null and skip this if we do not publish workspace object.
The interceptors must not try to access the TM transaction via the thread-local, only via the invocation context. So it's safe to suspend the TM transaction before calling doInvokeAsync.
Why not just new NamedType(ArrayOfDoublesSketchToEstimatePostAggregator.class, ARRAY_OF_DOUBLES_TO_ESTIMATE_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_RDOUBLES_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_TO_DOUBLES_SKETCH_
Call this currentTimeMillis
why not keep using 'this' as a separate variable?
should we have a method like this to create the file reader?
Why not inject the mock in the constructor rather than passing it as a parameter?
You can set the _size_ to 1 here, without verifying the the size. (Same for the rest of the tests)
this appears to be unused
Was an extra ()?
Is this supposed to be a new on the fly?
redundant : remove
The test should be inside the runnable, as the condition is set to true.
I think this would be clearer as a while loop, or a for with an empty third part. Certainly the codePoint declaration without an initializer brought me up short.
how about replacing those with Assert.assertEquals?
Should we be throwing an exception instead of returning null?
no need to check this, I think if this is already true, right?
I think the code for doing this is better: mr.addRepositories(String.format("Repositories", "Repositories")).containsItem(id))
I would change this to if(perun.isThisPerunReadOnly()) throw new InternalErrorException("This role is already present in DB {}.", role);
Should be workbenchContext_.setBuildInProgress(false).
it should use parameter.genMipMaps
No. This will probably crash on startup.
This can be moved to line 69, right?
This should be done before doing this check, as the cleanup policy is only called from on the shared table.
cannot convert to boolean, can it be false?
Is it better to use the javaSource.interactAndThrow() here?
Can you improve the performance of this method? Doesn't seem to be used anywhere.
Just to check, I think this is a good idea. I may be wrong, but I don't think we should be throwing exceptions if it can.
I think we might want to reuse the logic in validatePredicateValue method to avoid duplication of the code.
Use camel case?
You need to use the formatter.format(new Date()) statement here.
I think here you should use the method Session.commit() in DiskManager instead of the public void commit(ResourceResolver resourceResolver)
this is an error message
please rename to geometryParameter
Please move this to FINE level.
I think it's better to use try-with-resources, such as this Java try (InputStream fis = getResource(KEYSTOREType.class)) { testStore = KeyStore.getInstance(KEYSTOREType.class); if (password == null) { return false; } try (InputStream value = fileStore.getResource().in(); return value; } catch (Exception e) { return false; } }
You need to use new Date(milliseconds)?
Use DataUtils.safeProperty instead (and/or abstract classes).
Should this be options.getBlockSize() == null?
What about moving the code here and moving the common logic to a new method like isCourseDiscoveryEnabled()?
I'd use a different exception than exception, here to be able to pass the exception in the constructor.
I'd like to see what the parsing code is for JFlat. We may have specific requirements around how the JSON is flattened - so would also be good to see the customization options.
This doesn't seem like the user input was added to more places.
just make this a constant.
Write if (value == null) { continue; } instead
I think pt.toString() could be null or empty if it has a value
You can just use Mod11ProxyAnnotation( 9, 14,...) here.
why not use the logger for this?
This should be on nanoseconds
You have two placeholders in the stream but only one argument, that is the second argument from the method.
This is assigned in every test method. Can we make it private or add an assertion to verify the output is correct?
Code style: we don't use curly braces around single line blocks
Shouldn't we update the column name too?
Ravi, if you just initialize this with false before the creation of the tasks then your fix will be perfect.
we need to skip the default code here as we skip the configuration in merge.
This should go to a separate PR, or the one above that adds the record size. In the next patch, I think it would be nice to return the list of columns here instead of "Downloading" it.
I think this should be i18n.
do you want to do this every time executeHttpMethod?
httpPost could do response.getResponseBody().toString()???
I think that a simple iteration is more readable than the simple iteration.
Use already defined Constants
there is a potential race here: free the mac on line 102 than it can be used by other Vnic and than you do updateHost() which is a long operation during that period the freed mac address is taken from the pool i think that releasing the mac addresses better be done at the end
Also need to verify that there is an error you can not actually happen.
Disregard the check above to avoid this cast
A null check is necessary.
"remove" is redundant
Is this always a.toArray(new Module[0])? And if the list is empty, toArray(new Module[])?
I would probably split this up and check the token type prior to getting and checking for credentials. It's a personal preference, though.
You need to use the above check, since the version in the call is a default of 3.0.
Whitespace change!
Can you please also clarify the reason of the additional variable name
Should this be "setAppToken"
This test can be executed at some point.
Why do we need to set the aud rate here given that the setting is aud?
make it final and move all extra logic to this class
Can the cursor iteration block be tested too?
Can you update this test to use ExceptionUtils.catch(e) instead?
don't we need to assert that that the body is equal to the expected value?
Combine this and other occurrences, since this is really not a very clean way.
please add assertThat(Parameters.merge(null, params1)).isSameAs(params1);
You can use [File.separator](<LINK_0>
The timeout is for gracePeriod.
please use Collections.emptyList()
Is there a reason why this is an acronym of the 3rd party utility?
Do we need to check both of these?
We should not be passing the current value in as the parent node in this method. The current implementation of the method will be void.
Can it it be more efficient to remove the watcher from the zkClient?
If it's going to be a single value, better to use.equals() in the subsequent null check.
I would recommend instead to add a @Before annotation to find something that requires the BlackboardAttribute.
Can we use Stream API? So we should probably use only one instance of Java.
remove
Why log this at info level?
[HaxeReference](<LINK_0> is a local variable, so you should not be calling it twice. Instead, try to use: java if (!first.isPresent()) { HaxeReference expression = first.get(); HaxeReference finalReference = expression.resolveHaxeClass(); if (expression.isPresent()) { HaxeReferenceReference = expression.resolveHaxeClass(); } } and then call resolveResult.getGenericResolver() when you get the value from it.
I think it's better to do it the same way as in the function name rather than 'to_CHAR(format string, 'I'm also a little confused)
You check if all parameters are null before checking for it, you should check here also if quota is not null.
Should these weights be _long_ instead of _ 10d_?
The steps 36, 37, 38 are not necessary, please check this.... you should omit this steps
step on this to match your previous behavior, no?
which exception are you avoiding?
Typo: ig1
no point for.equals
instead of calling String.trim() multiple times here use map(), e.g. Files.lines(p).filter(s ->!s.isEmpty()).forEach()
'listNode' seems not an appropriate name for it. The name of the variable should be something like listNode
nit: do you need AuthMethodPickerActivity.this or could it be just this?
Same as above here: use.isEmpty() rather than.equals for the empty checks.
@gsmet, why not just call UUIDGenerator.generateUuid()?
The givenBattleState is still odd, it probably should at least return a builder(). You can make list values non-file and use @Builder.Default to initialize them to empty lists. Also consider using @Singular which I think will default the value to an empty list if not specified. Using @Singular on the attacking and defending units properties, you could instead write: MockBattleState.builder().attackingUnit(givenUnitCanNotBeTargetedBy(mock(UnitType.class))).defendingUnit(givenUnit()).defendingUnit(givenUnitIsAir()).build();
This means we will potentially get a lot of unnecessary readingLists, will it be called again? It should be set a boolean indicating whether the page is active or not.
Can these be declared at class level and used for both methods?
This should probably be a util class instead of a Calendar. Then you can implement the Date class as the DirResource class will not have to provide a Date.
This method can be private
knows? Is there any reason why we have to set 2 seconds?
Could use an instance method in ControlUtil.
Who does this throw a TajoRuntimeException?
this is not needed.
same: why public?
This method throws a Exception. No need to have eobjectArrayValue ever be null.
Don't you think that set in a static field will be simpler?
This is a critical PR, but it does not need to be.
Please extract the real world into a constant.
Why not make tmp a final variable?
can be final
Should we use setText here?
Yeah, I think it makes sense. IIRC, netty swallows the throwable silently, so it's difficult to figure out what's wrong.
This would be false if newlyDisallowed && prevDisallowed &&!tetheringActiveOnDevice. "isTetheringActive" doesn't make much sense in this case. There is no point in setting the flag if it's not allowed if it is not a Tethering active
Instead of doing this, why not just use TimeUtils.toUtf8Bytes(target)?
The project's name is not a variable. Either log it locally or wrap it into a variable with a descriptive name.
Why isn't this been copied?
This will generate a lot of warnings if the payment state transition to emitter queue [from={}] [to={}] [chargeEventId={}] [chargeEventId={}]", fromChargeState, targetChargeState, chargeEventEntity.getUpdated(), chargeEventEntity.getUpdated());
We should change this to warn
"missing retained size of block in eager compact PagesIndex smaller than the expected size of block in eager compactPagesIndex"
See earlier question.
Does it make sense to use an empty list here?
If the error happen that early, can you map the error in early phase before mapping page result?
Conditional pass for the correct project.
suggestion boolean notInGraphAtAll = candidatesForDeletion.isEmpty();
should becurrency.getDescription()
you could combine this with the line above.
Better to use a lambda and a predicate instead of a lambda (after L299).
It would be nice to have a more generic method for this. It would also be nice to have something like filteredMsg.setVisibility(View.FEED_FILTER_NONE)? View.VISIBLE : View.GONE;
Can we just use a clone()?
Move this if block after all if blocks.
Remove {}
Please don't make any changes for this, we make sure that changes of the feature that modify the model. Instead, append a new setPrimaryColor() method to the model.
The performance difference is that you could have a scan which is the latest version, and then call loadChanges() on it. There are only 2 versions that are currently available, the whole content of the original collection could be modified while we're in the loop.
Missed space before "ignite:thin://"
Suggestion: You can set notebookJobs to final here.
Won't this cause the password to be invalid?
Why do we use a Predicate? Can't we use it to iterate the trace and add the first one?
Nit: Instead of passing mutableTables to this helper, please have a single method for dataTableFullName. It goes further, the same on line 47.
I would even check if the value is not null. That way the check is not necessary.
Delete this.
nit: static import
I'd just pass in "outHeader" as an argument to the method rather than having to close it. The current name is very confusing, and _also_ makes sense, in a future we might have other names that represent the variable.
To avoid this check, you could just return access;
Minor nit: can use LinkedHashMap to avoid the unnecessary cast
You no need to add this to the button. The setting the style should have already been set in the super class.
We can use org.junit.Assert to make sure the output is correct.
Is the uuid should be part of the reference set member?
do you need to 'final' for all these map operations?
If not must be true, then you should be more explicit about the failure message.
Here, we can add a method publishTelemetryRequestOptions(String) that takes in a Context, and call it here instead of needing to pass the context to it.
Use full name
4 spaces
Class name is drools
Actually I think this makes the ArrayList less verbose. :-)
no need to write "VmHandler::" in the log, the logger already write the class name (also for the other logging below)
Did you mean to use WARN level?
Is it possible that tokenRefresh will be null? Maybe it's better to make the check after line 124--ense, since it's just a safety check.
You're missing the logic on PlayerPlayer.
you can simply use Predicates.notNull()
i see here, you could use the TypeHelper to get the SpongeType(SelectorType.class, typeStr) method
Why would you not do an ArrayList here? and you could return a List<ValueSnak> instead.
If you're returning from the process, maybe you should throw the exception?
We could spam the logs with messages..
hmm. A cleaner way to write this is: java input.putString(0, Integers.join(",", intsToConcatSize); Integer range = 0; for (int n = 0; i < intsToConcatSize; ++i) { range = 0; i < intsToConcatSize; ++i) { This way you can remove the extra empty line. also also add a bug in getConcat method that will return 0 if the value is null.
You could use the String.format() method to build a String on demand.
Why do we need extra comma here?
is this necessary?
This is a race condition. Each thread reads the port in a pre-existing port and invokes the createHardwarePort method. Then it calls createHardwarePort(inPortName, rate, dataBits, stopBits, parity);. Can we extract this logic to a method? It can be the first time this method is called.
Don't printStackTrace, call printStackTrace.
I'd name it "field".
a question: Why do we need to do this check here?
@Restricted(DoNotUse.class)
Maybe we can extract a test where there is a non-existant secret and that's a base64 string value
I think this is incorrect - we shouldn't be placing files for variants of the same blueprint in the same directory. Can we add a pre-install command to create run.dir earlier than would otherwise happen?
this warn seems unintentional. it would be a warn, and maybe a warn?
The other examples all use ASCII table output - is there a reason for switching to CSV?
Why initialize the object with an empty array?
I'm not sure why you're passing PythonTreeMaker().fileInput() in PythonTreeMaker().fileInput() which is the same as 'foo.bar'. I think it's what you want to do: assertThat(actual).matches()
We should not use ERROR. Please do _add_ a line of code.
What is the reason for this change?
It seems to me that we could avoid reconnectOutgoing.
This method should return a List, not null.
this can be replaced with streams java return tasks.stream().filter(partition -> task.setStatus("RUNNING").filter(partition ->!useMarathonServices).allMatch(ExitCode::equals).collect(Collectors.toList());
Why it is not < 0?
Throw an Exception on _else_ and check explicitly for the udp enum. Just in case we add a 3rd enum type, which should never ever happen...I just like being explicit :-)
Space after comma.
Please check that do not the test gt(v) but the test prep.
This technically isn't the right place to get the principal given the authentication in the current authenticated authentication. I think it might be better to check against the presence of a group like this and the corresponding method.
I'd flip the condition so it's more readable.
Can you use a string format like logger.debug("Waiting for wait for {}", minBytes - minBytes - startTimeMs);
I would rather see the previous code being more compact.
if (Objects.equal(a, b)) {
nit: put the whole statement in a separate line
Please add assertFacets().get(FACET_TAGS) as argument of RuleQuery with RETURN_GROUP_with_item(s) and RETURN_query_item_by_one_two_organizations. This is not needed, but shouldn't it?
I know this was not related to this commit, but as I have mentioned this, the variable should have been renamed. In the current example, should the code, or just not be changed?
you could use fieldType.value( absoluteFieldPath, value ) to set the field name as well
@ustcweizhou Thanks for your changes, we were returning an object with the username, by default, if not, call the method again with a potential NPE. Therefore, we need to check whether the table exists and if not, call the method again with a specific error message.
readLines(final String s) is a little bit faster.
suggestion Throwable exception1 = new RuntimeException("fake exception 1"); Throwable exception2 = new RuntimeException("fake exception 2");
I think you forgot the type check here: if (propValue.isPresent()) {
Let's move this line to the FBO-related state change.
Not sure the correct message is to say DISALLOW_CONFIG_TETHERING here. But this check should be in the same line as the method above.
This should be moved to a constant to avoid duplication.
Null-check
The error message should be localized, not in this case.
unused
As far as I understand, this is a java literal. I would prefer a batch.
Missed that space before the {
1. what about creating the device/mocking vmdevicedao? 2. when you do, please add assertion that the device.readonly is false also. 3. please add verify() that shouldUpdateReadOnly() is being called.
Is it a good idea to check for identPlayer being null here?
You can do something like Assert.assertEquals(outputTestTargets, gtTargets.size()). You can also do something like.stream().collect(Collectors.toList())
suggestion
You can use GuiIDProperty.class::getSimpleName
We should make this more efficient. If the user adds some error ID to the report, it will be there before any event to link to the HTML (possibly 400 when an event is added).
Can we remove "_partitionDiscoveryThreadMap.remove(datastreamGroup)" prefix and use the same value for all the "partitionChangeCallback" variables?
is this required?
assertThat( query ).assertThat( query )?
Using try-with-resources makes it more readable and the code will be cleaner.
It would be nice to rename this method to match the AntiSamy implementation, and have isEmpty() return true if it is empty.
It seems that IgniteClientException cannot be handled here
log.error("Image prepare image {} on the SPM", getParameters().getParentCommand(), e);
Might be a good idea to return some string instead of an empty string.
Eeek, eatin away exceptions?
s/vdo/exist/
use Arrays.asList(...) for short lists.
@sebing Matchers.boolean?
nit: I'd prefer to move the parsing logic into the externalResourceAmountMap to keep it clearer (and we can then make the method private).
Add this logic into the certificatemanagerserviceImpl class.
please log in error
Is this step needed? It seems to me this method's "protected" is redundant.
Are you sure it is safe to determine which values are sorted by unique values? Maybe check the seed in the hasher's values.
I'm trying to understand if we need to write the test as follows? java ThriftTransportKey ttk1 = new ThriftTransportKey(HostAndPort.from(getResourceAsStream(token)).doAs(new ThriftTransportKey(SaslConnectionParams)), ttk2 = ttk1.hashCode()); // Do we care if the token is null?
Instead of having this here, wouldn't it make more sense to have a <LINK_0>
Missing final
Shall we have more than one SEARCH column?
Set this only if session details not null??
Suppose there are two interfaces: public interface NamingServiceV2 extends Service { default void testMethod(org.apache.ignite.internal.processors.service.inner.implV2.Param param) {} } public interface NamingService extends Service { default void testMethod(org.apache.ignite.internal.processors.service.inner.impl.Param param) {} } public class NamingServiceImpl implements NamingService, NamingServiceV2 { } so, metric names will be: void_testMethod(Param) void_testMethod(o.a.i.i.p.s.i.i.Param) How should I understand which method the metric refers to? Also, there are possible names collision on different JVM's. Possible solution - use mtd.toGenericString() as metric name. However, this will have poor readability.
One other thought. All 3 tests share the same fundamental logic for inspecting the results of splitting. Would it make sense to create a private function that takes a Stream<StringHandle>, a LineSplitter, and the String[] array of file lines and is called from each of the three tests to perform the inspection common to the three tests? If that's possible, that would make maintenance easier (with the cost of having to break out separate tests if we ever discover a need for different inspection down the road).
I would recommend to fix the indentation on this test.
Suggest adding an assert that the only task name in the UI thread is the "Task Name".
Please use constructor with it's name.
Could we log the signature ("Entity signature", certificate)?
If instead throwing an exception when policyParameters[3] == null you log the error. I think it will return a NullPointerException when you do credentials = (byte[]) policyParameters[3].
In my opinion, it seems that most other metrics (memory preferred) would be the reservation you made here *both* metrics and memory for containers and other things that change them. In the future, Metrics might allocate a big cost but also if we need to change some metrics related to not using it at all, it might be worth changing the metrics from the call to cache.stats().clearMetrics to this.
return irqState;
This can not be public
This case is not so uncommon. I reported it because developers do mistakes in all weird ways. And this type of mistake causes confusion. If you push to plain git repo then you will get an error. Gerrit should do the same. Throw an error. So please don't give up :)
unused?
is this expected to be logged? or is it supposed to be output to the log?
I'd suggest to use [append(String)](<LINK_0> as it is simpler for this case.
This log ends with'{}' for several reasons, the user doesn't know what we were doing.
Just curious. Why do we need to wait until this call to complete? Could this just be a _first_ (i.e., invokes init first and then shutdown afterwards)?
I think this can be replaced with a findFirst since it is in an unexpected state, and the APILocator's methods can return a null.
Same nesting questions
Not sure about this fix. To me this previous indentation was correct
I'd do: assertThat(logList.get(0)).isEqualTo(logEntry1);
This cast is not needed anymore
Please make this into a constant.
Please use [org.springframework.web.util.JsonUtils](<LINK_0> for this common case.
Better to create a protected method like createEngineCollectorRunner().
Can you elaborate why this should be done in a try-with-resources block? Is it possible to get rid of the getName() method and the second check if something else?
we should consider extracting this block to a method, since this method is used in many places.
that should be : java assertEquals(savedInterval, savedInterval.get(0));
inline
Should be exception here.
What about other properties?
Here you should check the result metadata first and only if it is not INT, directly call super. transformToIntValuesSV() which will do the type casting. Same for other methods. You don't need a separate switch inside the method.
This is completely unnecessary.
How about we use the isBetterOrEqual method from GeneticAlgorithm class?
This is where the if statement should be for checking the value of OpenSAML2ComponentBuilder.getInstance().createConditions()
There are " missing" in this log message.
encodings?
This is redundant with the else branch.
Could you update this to use String.format?
Missing setAnalysis()
Lets move a while loop out of this loop and put the iterator in a finally block
add java doc explaining the packageName is used for finding the package and if it is not found it is created. method name should be reflect this. Maybe this should be split up into separate fucntions
We know there is a difference between EXTRA_PAGETITLE and EXTRA_PAGETITLE. Does it make sense to have a local variable here?
DataByteArray.class should be cached and returned as a default value instead of creating new objects.
if (
I didn't think about the warn level here, but at least it's easier to debug.
I guess you meant to compare k1, k2?
@Serranya Please use TextUtils.isEmpty from guava
why aren't you using runInternalAction here?
This method could be private.
This can be removed and all line feeds should be in it.
Line too long
I think we should load the trace in the first place. Although I do not see a reason to have the pinned view ITmfTraceOpenedSignal's traceOpened too, it would be easier to understand.
@grainier Can you make this method private
Is it possible to make a check if we need to migrate outside a transaction. Transactions on init are pretty dangerous in multi-process scenarios, since they most likely happen on the UI thread.
I would move refreshAuthz(sess) inside the if condition, so we can skip filtering when policyDefinition is not null.
LOG.info("future note is not set for runAllParagraphs")
Please change to something like: if (value.equals(constants.preallocatedAllocation")) {... }
What are these annotations for?
This should be a PR
Use  covered by tests
@yesamer Maybe it is better to put this check inside if condition since it is the only place where it is used
you don't need to do this, we can just call IndexTaskUtils.updateTaskDimensions.
The place here would be: if (new AssetDirectoryReader().setFilterExtension("js").setIncludeBundleDir(true) ) {
timestamps should probably be a global static constant.
this method can be simplified to 'getSelectedSite'
"belonging" -> "which belong"
> Sorry, I missed this in the first review. This will cause a lot of error if there is no command found. I think this should throw an error we should not use the t to see a better error message. Maybe use t.get() to provide a better error message.
also assert the output schema
Can you add the timestamp as an argument.
This log statement is redundant, should be warning as well
to simplify this code, maybe use new method to get PreferredAddress and then use getters on it
You might want to change the code to use isEmpty() rather than the if (!headerValues.isEmpty()) {
Could we define this string explicitly, including "*" in front to match the toString?
It's strange to pass the query to the backend to call the backend method. I think there's a better way to do it, and better to pass the backend to the backend.
{}
This is not needed. In super.tearDown(), all the replaced stuffs are restored automatically.
what if the acl is not found? we should skip metadata update in this case and return false?
Name here would be more appropriate.
Would it be more readable to have a mappings for two reasons: - The method is a bit too long, so it could be easy to break this line. - Have a look at [addedReason()](<LINK_0> for how it's going to work.
Could you please assign the URL to a local variable before opening the connection? This helps while debugging problems.
@vilchik-elena This pattern is a bit hard to read. How about making it a constant?
rename to extensionPointId
This does not compile.
Add a callback with a CallbackGroup at the end of this method?
move this to constructor
Consider adding an additional layer of abstraction for this block. This has very similar lines as the other two methods.
In general, try to prefer Objects.toString() over string.
Couldn't you move this case to the end of the switch statement?
EnvUtil.storeTimestamp() seems like a big change in this method. Let's remove that
Should be done using /ObjectStore.class.
This debug output should be removed
- [x] Use a constant to convert the State string to a String.
System.out.println("...... and path id (optional).......
Should this be a concurrent Classes?
I think this could be replaced by : <LINK_0>
it would fit easily one line
Perhaps we should add a new method to distinguish between these two cases: - a new Handler is created - the proxy is activated after passivation
Would be good to wrap this in a RuntimeException and log it.
@antonini > I am wondering if we should set timeoutException to be a default value for this timeout, so that it is handled by the Timeout constructor. [This](<LINK_0> is a good example for how to avoid this error case is very helpful.
This makes sense from a programming perspective. However, in our case it would be good to revert the changes to the file (now they would execute before the sync blocks).
This could easily be done with a call to init, then the called method would be more descriptive.
Unneeded empty line here.
I see that the syntax for (loop) is too long, we're trying to avoid here the cast.
why not use simple assertThat?
extract DEVICE_ID_KEY and DEVICE_ID_KEY
Maybe I miss something about this, but what is the other thread?
all formatting
This block is scary, what happens if the view is in a text view that exists in the text view. Are we sure that we want to show the view in this case? For example, what happens if we try to highlight on a fragment in the text view?
can be null and empty
We should only use UTC for the default timezone.
This should be org.apache.commons.lang3.StringUtils.isNotBlank.
else not needed
This isn't a good place to add a hasher like this (And not the same for hasher). What about using [Hasher.hash](<LINK_0> instead of the hasher. Also, not sure of the hasher.
assertThat(list).hasSize(1)
I believe we should use the map method for getting the user Id from outside of the sync block.
You don't need it in every Exception since you have a finally clause that will get executed at the end.
Can you factor out this block? I think it would be better than to have it in a method.
You can change the String.format to TargetPermanentyException wappy = new TargetPermanentyException();
you can use AssertJ assertions and check the proper messages.
two params are the same.
You should replace GroupOperationException with checked exception if you still want to return value of this method.
Will this cause a new feature in the compatibility version? If so, it needs to be fixed until that feature is completed.
There is a singleton for OK Status: Status.OK_STATUS
Needs a null check for inputPath.
should we also check that the scanners list does not contain the given nodes?
Use Long.valueOf(0)
Same question about maintaining type information.
I would move this to stringutils.xml
I can't find anything that requires unboxing but there are no methods like this: java public interface Integer { int next(int res, int total) { if (total > 18 || total <= 0) { return BigInteger.class; } else if (total > 2 || total <= 0) { return Long.class; } else { return Long.class; } }
null check twice?
I don't understand this. It would be better to the previous "try" block and the throw: dstChannel.truncate(oldLength, readableBytes)". It will be called from each nested the block at the very end.
I think this should be done in a separate thread, right? Or is there a chance that we can handle the case where the user doesn't have the data?
* fail earlier by moving this check to DfsBlockCacheConfig.setBlockSize()? * I think we should also prevent blockSize == 0
Can you refactor these classes to have a common constructor method?
The test here seems to only test the case where the option is not empty.
Is this method doing anything? If not, please use Files.createTempFile.
Use standard for loop if possible.
You can remove the log.info call and just log.info() in the else block.
this can be replaced with: fields.stream().map(symbol ->!symbol.isFinal() &&!symbol.isFinal() &&!symbol.isFinal()).forEach(symbol::add);
This isn't needed, there is a chance that the user will update the right title, which could be null.
maybe add a timeout to the log message? Maybe log the exception in the log message?
Use an immutable list builder here? Or does the _existing_ list_ be used as a valid value?
Formatting issue
I think this should still be a List, since column count can be very large.
These 14 or so lines - the various superclass fields - are already set via super(builder) and should be removed here. <LINK_0>
You don't need to check for null, the list will be empty.
I believe this line can be removed with the next assertion.
@Before methods are executed without any assertions, so it's better to remove them.
This can be set on the opaqueUser itself instead of here.
Why miliseconds? You can't use Time.milliseconds() here.
Suggest!title.getStartDate()
![MAJOR](<LINK_1> Merge this if statement with the enclosing one. [![rule](<LINK_2>](<LINK_0>
I think Spotbugs complains about this. What was the reason for the else?
is this needed?
Nit: wouldn't it be safer to check that it's not equal to "https"? No other protocol would/should work, so maybe it really doesn't matter in the grand scope of things but it fits the error message better.
Move this method below the resolveFunction and use it in more places. /** * Helper method for static things. * * @param x yarn help x; * @throws NullPointerException */ public static ICPPFunction(IFunction.class, IFunction.class, Type) { return Optional.empty(); }
It's better to use a constant for SEARCH_IN_COLLECTION.isActive() and METHOD_NAME.
nit: The mocked environment creates 3 nodes (by default) that you can use so you don't have to create them. You can get them with env.getCluster().nodeById(..).
Can you move this to CheckStoragePoolValidator?
Isn't this the same as the first line in the method?
ratePerTask => ratePerTask?
You have to do  System.out.println in the code.
Missing null check on.
Null check required?
Same observation as WFS, often data is not valid.
isEmpty
You could combine these two calls to folder.listFiles() and listFiles() into one.
@jglick In a test, there is no need to remove the declaration of the result. I'd have to update it to do something like this: if (result == null || result.indexOf("==")) { result = componentName; }
Do you need the.toString() here?
Should this use a try { } finally? Otherwise other Throwables leak.
This should be EntityNotFoundException#byName instead of EntityNotFoundException#byId
inline
i guess we can add two methods that just send behavior to apiPublisher.logout() and apiPublisher.login(testUser, password);
This looks like it should be a single b/c you're not creating a new byte array for each operation.
setBot
You can declare this in the scope of the if, but now it's only used once.
I don't believe it is good to make it protected, but that's a good idea
Can we save a line by using nextTask.getTimestamp()?
This should move to the spanRef
This is an Optional where possible, or an Optional is a better check here.
Unnecessary; you can just pass a name argument to createProject.
Nice to have a default value for includeDatabases.
Should this be an error?
I believe we should be writing to tmp key here.
The error message should be like "Feedback session name not specified"
please rename to performOpenColorPicker
For better readability, please always use { and } in ifs. It is more readable.
Indentation doesn't seem correct here.
:bug: This won't work.
Can it be simplified to: return helixClusterAgentsFactory.getClusterParticipant();
I think we should use the same behavior for the use of char[].
getKey() and getTaskName() are duplicated.. maybe it makes sense to extract it to a private method?
I am missing something, but isn't the primary key of the service at the end of the world?
Please, check that.from(streamName)!= null before calling the method.
If you are in here use reason that you can't do this check and the following if condition
Do you need to call the removeManager in the model?
@jaimecasero @vmaletta I think we should include a test for the default email.
When this method is called in a try-with-resources block, I think we should call it in the else block and let the IntermediaException be thrown.
I think we should do IOException.warn().
Can a folder reference be used here?
you can use Schema's isFieldInField method to encapsulate this conversion.
We could return at the start of this method, and move the check to the return. Otherwise the current handler will never be called in the middle of the packet info.
can we do this here, but you're not using the passed address anymore, so you should use simple assignment (this is one)
if it existed in containers, is it not sufficient?
NaN if outputRowCount is 0
nit: Waited %d seconds and operation was not complete
I can't imagine how this should be done, but I think it can be potentially called multiple times. The log can be debug and the only set if the entryLogId is equals to 0
I think the jcrPath should be created explicitly, the jcrPath is also part of the jcr path.
i'd recommend moving this to the top of the function, construct the IdLike to not introduce a new method.
The release of the bugBytes object should be asserted.
again, this can be new ICommitMessageProvider2
Again, multiple concerns of abstraction. First; I think it's better to define a protected method to retrieve the person attribute type, then check if it is a person attribute. else do the same logic with none of the attribute.
why couldn't we return the double[]?
same issue with LOG.info()
I think this should be just 'i'.
I don't think this is the right place for the else. When there is a single else statement, please change the name of the method.
Why make it a positive assertion?
s/public/private
It should be int.
I think this might be an issue if there's a reason for this mucking with a clock loop with a clock from lower than the maximum (which is a reasonable default).
Shouldn't we at least return at this point? Returning null should be handled by it's implementation and I think that it can be handled by an exception.
final
this will create an issue on deleteRecursived1 as its being called in the test.
As said in previous review: Add here a condition on isSequenceElement, the below code is unnecessary if isSequenceElement == false
@aljoscha We should use the braces if here instead of if.
Why do we need to check for null?
nit: new line after }
Shouldn't the instantiation of the unsynced storage domains be moved to the domain?
Are these four lines necessary?
Just a FYI - I've only recently learned (credits go to @nbradbury ) that by setting the callback to null here in the setNegativeButton method call will lead to the same effect (closes the Dialog), probably adding some clarity to the code as well
I think "protected" is fine. But I would go with it.
Can we probably have an explicit check here that we are not going to use the "added" value and not "added" value.
I think the function name has no meaning here. In blob, it is not set anywhere. I suggest to call it, blobName instead of blobName.
Is this actually possible?
Maybe trace here to get better error, than System.out, but what if it fails :)
can we have this method in a try block instead?
if we have permissions to insert groups, why not to update them only if we're in the same transaction?
It would be nicer to provide an alternative constructor of ComputeDiffsToMerge without criterion and let this constructor create the default criterion (which is null at the moment). I'm not in favor of the null value as default and would prefer an instance of a default class.
[nit] Space after "Result".
I think you should add an IOException at the end of this method to indicate that it wasn't called before "the executor was shutdown" and should return.
This might be worth adding a row of the store that failed to download the store.
could be private.
Can we just use Level.INFO here?
i didn't see change in the config.sql to make this value per-version, so it's not ok to call it with version if its 'general' config
Nit: Can be replaced with true.
You only need to keep this if trace level
same here. formatting issue
please use here getVdsGroup()
This should be a WARN instead of an ERROR.
We do the same ternary operator above - how about breaking this out into a seperate function.
Looks like you can use "final boolean eventTypeNone = event.getType() == Watcher.Event.EventType.None;"
It would be better to deprecate toString() method. External classes may have toString() methods for some reason.
This could be a static method.
Can you just test the reason reason and discontinueReasonNonCoded together with the patient?
I'm not sure we need to change this method, but in the other class we only use the default true. The change that is already done when the filter is enabled, we only set the default value when the filter is enabled.
@adyach are you good with the name of the file in order to identify the output?
This should be private, and the test, at the moment that it is also used to provide testing for isCoverage, but not for which Refis Coverage
Given we are doing multiple things at once I would prefer: Set the name of the variable at the top of the class.
I am just wondering whether this snippet should not be surrounded by try-catch (as it was previously)
Nit: Space between exception and {
Wrap this condition in a <code>if (workspace!= null &&!workspace.isEmpty())</code>.
"Unable to locate app directory"
II think you can simplify this code and remove the code duplication
I think we want to have a way to pass in null here. We can get rid of that.
In the case of "cheated" this is not an error that is logged here but in the server thread (the process of network issues). Instead of checking the future, we should check for null here.
Why did you change this? It looks to me that this method is used more than once.
wouldn't it need to sort the list in this case, too? (I wonder if using a self-sorting list here would not be the better solution.)
I thought all the other onPrepareActionMode methods would be fully tested. As I thought it was it'd be a good idea to keep it synchronized: suggestion try { final Consts.MODEL_CLOE = getCurrentlySelectedModel().getInt("type"); try { itemExists = menu.findItem(mMenuId)!= null; } catch (JSONException e) { throw new RuntimeException(e); } }
Class name is not needed when initializing the input.
Exception can be thrown because this will be used in other places.
Return xmax instead of x + width. Same goes for line 74 and 164--by-method optimization. Same goes for line 62.
:x: yeah it should be if (visibleTerminal.hasExtension()) {... } else { // Empty code
I think the error message should be: "de-registerd user %s using FormAuthenticationMechanism. There is no session attached to the request."
The assert name of the project is misleading you're testing.
.split?
I think the order of the checks here is relevant to minimize the work. We should check "firstParent" first, then SEEN and then parsing the headers if needed.
ugh again..
it should be lowercase, as you know how many _ character names are used for.
I don't understand why you don't use the GroupGroup.Id and have simply the group as a parameter and you don't need to pass it.
If we are doing a concurrently search in the process, we may want to not fully understand the reason behind this change and in a separate PR. I've just got this for the review that this can be done for a later commit, but in this case I'd prefer to get rid of the ListModelTypeDelegates class.
Shall we correct the indentation in line 175 and 176?
why is the lower bound 0? Should it not be at least 1?
Let's explicitly check whether numBlockOwnershipByEvalIdForServer is null
This check does not match the actual message, which might be case sensitive.
So ContextForUser = user == null? getStaticLooper() : thread.createContextAsUser(user, "") right? In this case, the ContextForUser variable is not available, and we are registered only once. E.g. during an Looper run, we obtain a context from that Looper in the register method.
can we simplify these if-else branches?
I think we should not filter anonymous Authentication here since it's previously not included in the list.
Also here, please remove looks like we cannot to remove fact that one of the runtime lists.
I think we should use the word "HTTP" in these messages.
please remove redundant code - we have a task on the same disk, and use it as a parameter to initialize it.
We don't need a mock here since we are just returning a 204.
Kind of I would change DEFAULT_ORDERING to READ_ONLY
extra space
IIRC this should be available. This is because users don't want to refresh a project even if the view is already running. We use we open a new project to move off and we'll have the list of available changes.
Pls put the lambda into a separate line
Not your fault but I think this line can be removed. The next line covers the exception and ignores the error, which is not what we want.
Need to use Date.of(null) even though this is in general.
I think we should keep this change.
envVars
![BLOCKER](<LINK_2> Change this condition so that it does not always evaluate to "false" [![rule](<LINK_1>](<LINK_0>
Code style
Why is this necessary?
These the assertion in this class seem to be very fragile. It seems like we could change the value of this field. Anytime we decide to change the type of byte buffer?
It'd be nice to use a constant for this, e.g., NO_ENCODED_LENGTH?
Maybe we can invert the if and remove corsFilterFactory the not null check in the if statement.
Please avoid calling getAncestorWithType directly. It's too expensive to call getInitializerClause.
this looks like a copy paste mistake
Why aren't you using 'createNic(nic, "eth0")' here?
I think you need to add a fix here
This try/catch block should be moved to a new method
No problem with using ITsService.getServedPassiveEntities().get(true). So now, it will always be executed. So status quo ;-)
Space needed after "if"
dar.getData() can be null
I think this can be truststorePasswordAlias instead of the string?
We can remove this exception or throw it with an extra message?
How do we test if the first element is added to the list?
Any reason why this is not private?
Small nit, I'm not sure why we need to update the label when the property changes, but the method is called updateTargets()
The selectSQL method is called for normal data extraction, there is already a separate method to handle visitors, the problem is that one of the various wrappers between GeoServer and the datastore is not passing down the visitor and thus breaks the optimization.
Could you make it a constant?
folder.setPropertyValue("docNoFacet", "DocNotFacet"); and a single /Folder reference.
suggestion if (isClusterFormedByOnlyLiteMembers(memberList)) {
Using a switch on the String for the exception might be better here.
This is not a valid log message, should it be warn?
This will get in an infinite loop if it ever happens :-1: If we want to ignore the interrupt we need to set wasInterrupted to false and then reset interrupted flag.
Could you also add the listener on the refresh event and return it here?
How about using try catch instead of if else?
Can we do the exact same logic here?
What about encapsulate this...
This test fails without the check.
Please add here the sleeps.
nit: remove empty line
Why are we throwing a NPE here?
Why is this needed? Can we add dependencies and dependencies as dependencies to the dependencies list? The following code is in'set dependencies' and'set dependencies'.
Do you want to also check here that the dat is a Set?
You can have a line break after the.mapEntries((k, v) -> Maps.immutableEntry(v, k)).filterKeys(CorruptionCheckViolation::raiseErrorAlert).ifPresent(updatedCorruptionReport::build);
Should we propagate the InterruptedException to the caller? I'm a bit worried about the original behaviour.
I don't think it's necessary to make this change here. We should just define the value as a local variable.
Can we move this auditAcl to the common method?
This could be replaced with Matchers.singleton()
I suspect there's still a race condition here: threadNamePrefix is set as null and thread name is _only_ null. Why are we default to a new instance, not just the null check?
No need to declare a variable here, since it will be always passed by getAbsolutePath()
Just an idea, but I'd recommend to do verify before this, since the test method is invoked, so we can verify that the expected values are valid.
If this is not handled, a listener must be handled and handled in the finally block.
This is to prevent us from happening again, as this is a private method.
The test should verify the status of the enabled b2 of the connection. So if the test passes if the mentioned action is not a valid b3c of the test failed it will fail.
Based on the new API, this is wrong if tag is not null.
Maybe you could remove this. Tests are by intent using a constant.
Why this isn't static?
As discussed, a metric would be useful.
assertThat(violations.isEmpty()).as("Violations are empty!").isFalse(); assertThat(violations.size()).isEqualTo(1); => assertThat(violations).hasSize(1);
ReviewFormatter.applyReview()
Are you sure this is not handled properly?
suggestion: create a new SearchResponseData(issueDto) method that can be used for this since we're already checking for null and once we remove the preloadedSearchResponseData, we should be consistent
Ticks don't line up. Change the 1 to match the number of calls to this method.
This needs a new instance of the class. Take a look at Missiongian'. Events/Model/Widget/Model/Widget/View at the top of this class.
The call to getPbRef() may be npe, but it is not. The call to getDbRef() may have a second argument, but the call to getStorage().setNfsTimeo() is not needed.
add an error message
This is a serious bug. If the procedureName is null, why cannot call the method?
use style provided with callback instead
I suggest to resolve these two references separately, you can have two methods: Optional<Image> aboutItem = Optional.empty(); aboutItem = aboutItem!= null? product.getAboutImage() : Optional.empty();
I think this could be replaced with!items.contains(uploadItem))
Unnecessary cast.
Please use the correct logging format for the log statements.
The ChatState should be set before the line above.
Can make checkOneNotNullOrEmpty and make sure it's non-null maybe?
I think this lines are not required, but never mind.
You can replace all the hard-coded "size" strings with constants.
There is a reason why the hard-coded strings are not used here.. can you have a test with a comma separator instead of seperator?
Should we consider using HttpLoggingInterceptorUtils.userCookie()?
It would be better to check if context is not null and return in this case from resolveDebugContext()
Isn't this loop simpler?
We should also rename the string wordings -> maxConnectionsPerEndpoint -> maxConnectionsPerEndpoint and maxRequestsPerConnection -> maxRequestsPerConnection
formatting
This removes an existing initialization from another sentinel configuration and client configuration here. Since this is pretty much the sentinel and client configuration at the very least in the application/json file, I think it's not.
This should be sslConfig.targetIsSsl =... ; sslConfig.reuseSessions =...
Can be replaced with : Collections.addAll(edge, edges)
Should this be CF_METRICS_METADATA_NAME?
Do we need to create the scriptEvaluators for each evaluation?
What's the purpose of this blank line?
Should this be public? Seems like it should be protected or private.
If you want to use.getUuid() to store the real value.
You will have to create an additional private method, otherwise the service will be taking a "key" parameter. Now I'm thinking about it, perhaps we should create some utility method in ActionUtil or use some java.util.concurrent.TimeUnit?
it is not possible to mock this BrokerServiceDataHolder.getInstance().constructStoreConfiguration() in particular.
Use File.separator instead of "/"
Missing space before else
please change this to debug
Is there a reason to specify the retry factor?
Minor: we should have a static import here (but I know that we're not familiar with it)
this method looks like a copy of the code, why not use the SparkParser.java?
I think it is not necessary to check if f2 is null, since it is above.
IOverwriteQuery overwriteImplementor => IOverwriteQuery.NO_ALL, which is the intention
Unnecessary?
I'd like to use the method directly IndexFileWriter.formatAnnotationValue.
Do we need to check this?
I guess we may need a check for equality to the result TypeBinding.equals(bound.right, variable)
if (epdqGatewayResponse.getBaseResponse().ifPresent(epdqGatewayResponse -> epdqGatewayResponse.throwGatewayError())
nit: assertFalse?
I think this can be shortened to: java final Ordering<String> dimValueLookups = Comparators.naturalNullsFirst(); // or for (String n : Longs) { final Ordering<String> dimValueLookups = new TreeSet<>( dimValueLookups.length, (lhs, rhs) -> stringOrdering.compare(n, (lhs, rhs) -> stringOrdering.compare(n, k, extraction)) );
The "TableResult-await-thread" name is not very descriptive. The Name of the thread is misleading.
I would add a description when creating the Quota with the provided storagePool
Can you add @NonNull annotations please?
Yes this is the first thing i tried. But when I tried to empty the entry before invoking the new method.
should be new TmfNanoTimestamp((long) (1E9)
I think we could make the field field final. It is a best practice to specify the scope of the constructor.
I think you should call this field userInfoUri instead of id to avoid issues.
Make this something something like : boolean filter; if (Context.getGeofenceId()!= null) {... }
Have you checked that the test fails if the this assertion fails?
Isn't it better to setReadOnly as the status here?
It looks like you are returning null on line ERROR below. Should it be an error instead?
nit: This should be enough
Might be clearer if you actually iterate over the list and check that sampleRowKeys.size() > 1
This also needs to be reverted once #1922 is implemented.
workspace object is not passed to it, so it can be also null
Please squash this commits into the commit.
this method could be changed to return a boolean value instead of throwing an exception.
Please do not repeat this over the runnable.
%s the same as %c
Huh, in what case they are looking for? Or do we have a new layout?
I do not like this one. Let's make it configurable.
this is not good, we instead log it
this test can be replaced with assertFail(), because it will try to catch the exception.
This condition will start at the bottom of the stack and it could be static, since duplicate code is stateless so maybe just go for the other path extension.
This is a really slow way to do this. It's not a blocker, it should be more probably a hoist into a method onItemRightClick or something.
Why not just pass null as an argument to constructTrieNode?
Shouldn't this be debug level?
[optional] write this as a single line or a separate 'if'
You can do the work and pass the Context to getContextMenuProvider
We should also move this into the SignInValidator class. This way we can ensure that two apps don't have to rollback.
Drop the cast.
To verify that the arguments are not 'null', you can add a check to the assert statement.
:thinking:
unrelated change
Does this mean that for a table that doesn't have a 'include' column, and is set to false in the case that is not set, is this fix the problem?
Should be in a try-with-resources block to ensure it is closed even if it fails.
It would be better to add new method in the filter class because with this feature you can get filtered out filter by name.
This would have a performance impact now with the change that the order is guaranteed to be the same.
I think there should be a confine this (or abstract) implementation (see TextReader). It should be "getTextFoITimeRange(ISegment)" and "text". The same in all places below.
ah, I would say I'm missing some context here. The ClassNotFoundException is also supposed to be thrown by Class.forName(Class) -- the problem is that Class.forName(Class) will also start throwing exceptions if we do not have them yet. So I think a try-catch block is a much better fit here.
This method is never used.
Argument exception is ignored, so this is no longer accurate.
You should check the invocation of the mocks you created.
Is this check necessary? It seems like it would be done by default from field descriptor.
nit: could be catch (Scout t)
This only runs on Gtk3. How about trying to set this to not run on gtk2 instead? would this work on cocoa/win32?
Instead of just replacing this line with String securityRealm = context.getServiceRegistry(false);
what about type == Schema.Type.STRING (e.g., valueOf or STRING)?
no System.gc() before/after?
please rename to storagePools
If it got deprecated in Gtk3.10, then it should still work between Gtk3.0.
Is the loop simpler: for (int i = 0, times.numValue - times.numValue) {
This doesn't look correct.
s/switches/switchNotifications
s/workspace.getConfig().getEnvironments()/cheConfig/
Could this be the case?
the definition can be moved to the CommandBase
> If primaryConstructor.newInstance() is called for every constructor, we could just override this method from this one with the provided arguments. I think we should move the newInstance(Class[] argumentTypes, Object[] arguments, Callback[]) overload the function to this one.
What is the purpose of this change?
You should use a try-with-resources here to ensure that the client is closed even if an exception is thrown.
Remove, please, this variable.
This is already kept as a class constant. Any reason not to keep this Context class?
We change the style in this file.
There is no "else" keyword in this method. Please remove it and rename it to something like hasRight and have the same return name.
hmmmm.... how is this done for this specific session? nevermind... I think yo can just call getData with refersh and the soft timeout will set for you, no?
can you check for empty list?
Please ensure that the result is logged in the constructor. In this case, we don't need to log anything, but we can remove.
If calendarName can be null, there are other places in this class that might need null-checks. If the calendarName cannot be null, null-checks in the hashCode are redundant, and should be removed. The same goes for the other fields.
Did I miss where you close this pattern?
It's not obvious to me what a value is, but the code could be using List.of
We already have a mechanism for detecting whether the port is available. The check should be done in other places as well.
I guess this check is not needed since we already checked for exception type in errorsToIgnore
1. You could just do setting the limit here. 2. If you don't do that, I would make calculatedEntryLimit a field that you set in the constructor instead of reading it here.
maybe just throw exception instead of printing the stack trace to user?
You should test that setting the connection is equal to the default value in setting HEAD.
Ugh. Why do we have updatePresenceStatusForXmppProvider( ses, the osgiContext, ProtocolProviderService.class)?
This could be shortened to: java if (doesCoordinatedEmission()) { expectNextElement(...);... }
This is not necessary as its is below
You have this test method.
This check seems redundant, the ByteBuffer could be saved by calling getField(operation) and write the operation operation.
this can be an error if it cannot be NULL
can we use the BUNDLE here?
why not make "mode" a constant too?
we can set variable directly here.
CompoundRuntimeException sounds better than CompoundRuntimeException since it's not a generic RuntimeException
Also consider using StringBuilder instead of StringBuilder
Please benchmark this. The code was written this way for a reason.
I think better to use Util.readIfExists(secretsFile.toPath())
this should be a LOG.error to remove.
flip the conditions, null check should be done before
wait.forElementPresent((LOGGED_IN_USER_SELECTOR))
Consider extracting validation step into a separate method
why swap?
That's not particularly @Mock annotation but I don't think it should be visible to the test as it should be testing the annotation separated and specific of the annotation.
this is not a good idea, you could move it into the try block and save the dialog to only do the data validation.
should we add a check to ensure the token is still there?
we don't use braces around singe line blocks
nodeNames.length - 1?
can we avoid calling this if it will be null? If so, we can put it in the if clause.
wrapper.getIncludedClasses() will return List<StringRef>. This probably causes the copy in the first place.
java if (recoveryManager!= null) { recoveryManager.terminate(); } else { synchronized (this) { if (recoveryManager!= null) { recoveryManager.terminate(); } } }
Instead of "CSVFile" use InputStreamBuilder, and use InputStreamBuilder it = new BufferedReader(new FileReader(csvFile))).close();
nit: can remove Arrays.asList(A.of(detectedLanguage)
The variable 'ninePatch' should be changed to 'days and text' instead of ninePatch.
Please remove this log entry.
This check is not required.
Use IWorkbenchCommandConstants.R_REMOTESIST here (also in other places).
Please add a constructor LikePredicate(Expression value, Expression pattern, Optional<Expression> clause) and call it from the constructor.
I think this is not necessary for the suspending operation. Prefer multiple time will be better.
If you use CallLog with FINE, you could other logger calls that have a warning.
In most places you've changed using of getter to direct access to the members, here you didn't do that, was that intentionally?
Will this also cause a checkpoint to fail on Eclipse?
Should be "repositoryId"
else if ( persistFile.length() == 0) { LOGGER.warn("found empty file no lookups to load", e); return Collections.emptyList(); } else if ( persistFile.length() == 0) { LOGGER.warn("found empty file no lookups to load [%s]", persistDirectory); return Collections.emptyList(); } lookupBeanList = objectMapper.reader(new TypeReference<LookupBean>());
do we always want to log the error?
Please use the new EntityModel<String>(Arrays.asList(network.getId(), ListModel<IpVersion>.class)); instead of adding new EntityModel<String>(Arrays.asList(network.getId(), ListModel<IpVersion>.class));
Can you explain why you don't use the same test case? Is there a different test case?
Why this catch block?
here we should use instead this line
I don't think we should have a hash here. On the other hand, a hash of "put(key)" is ambiguous, but I'd prefer a hash here.
nit: can you just inline this so it's more readable, and auto-generate in build()?
Could you include the state in the error message?
It should be enough to add a catalog parameter to the node schema by default. This should be removed if not relevant.
Thanks, I'm a little bit squeasy about generating the factors from unit tests. Let's specify a layout that should be in a way to pin it
I don't think this loses the ability to mask. I think there should be a compound method
This seems wrong. We only consider the default and the cost domains. But I I guess we should be able to remove the FORCED_SPARK altogether in favor of the FORCED_SPARK too.
Can we change it to ongoing SNAPSHOT_SYNC?
This method doesn't need to be synchronized.
In ACBaseColumn you need to show the type GuestContainer as default, otherwise the user will have to set it twice.
Can we use the package private methods here?
instead of project name createFunction0
try using stream api for filtering
It's not necessary to log that everyNodeHasEmptyTransactions instead of just a warning.
if (sigatureAlgorithm == null) throw new HttpException(ErrorResponseCode.INVALID_ALGORITHM);
We're no longer using the stored values in the location. Let's call removeAll instead of getPoss()
Would it not be better to have isReceived(Channel) in the tryFailure() above, assuming the callback for the inactive channels?
Do we need the fully qualified class name here?
Instead of logging it here, could we log the ID of the entity and return it?
better use isEmpty()
where do we get the task?
Google Java style always uses braces for if and while statements
Line 862 to Line 93 should be extracted to a method, since it is repeated in many places.
can you make this method private?
This is a bit confusing - I think this test needs to look more like a block to see that the lock was acquired at the same time. I find this dislike a syntax error-prone, is that the same lock we have here, LockMode.WRITE would be better placed in the test above.
This wasn't wrong before, this a fmald into presto-large RS's chunkFactor
Nit: for debug level, please use paramaterized logging
Why do you need to use a boxed type? It's already defined at the beginning of the method.
I think you can simply change the return null if the exception is not found (to save the stack trace). We could then remove the Utils.readFile() call by passing the exception in as a string.
I believe this doesn't need to be passed to the logger, in case any file needs to be created.
I think this is not needed on the pollingExecutor.
Nit, I don't think this error message is appropriate. I remembered @lei-xia reviewed this in the previous ticket, this path invalidation is not an error in the server. So keeping info (or warn) may be good enough.
Good candidate for a method like getIndexTask(String)
I think for some reason this code is not working on older platforms, for instance, I can see a NullPointerException: String resourceExtension = resource.getFileExtension().toUpperCase(); if (resourceExtension!= null) { String resourceExtension = resource.getFullPath(); if (resourceExtension!= null) { for (String removed : SVGWorkspaceImageFigure.removeFromCache(svgUri)) { return resource.getModel().().. } } }
not necessary?
Is this method used? If not, maybe add a isEmpty method to the DigestUtils doesn't need to be updated?
please use "value".equals(attribute.getNodeName())
what's the reason for having two lines here?
damn. Common.getProjectCache().get(change.getDest().getParentKey()) is faster here (avoids a database query), but its not promised if the client were offline. maybe we should just promise it will be there if we ever get offline support implemented.
This is a bit hard to read. I would prefer a named constant something like 'DEFAULT_WIDTH_PREFIX' (or even better name) or 'newestName' (if you are using it in multiple places)
I think the logic should be in the solr logger service.
Can you check your identation settings instead of CoinRewriter?
"Finish calculating. Time spent: {} ms."
Is the host a member of this class? The value is not used
It's confusing to put this in the exception message instead of just the message.
I think that using Throwable is better than printStackTrace(); here
Do we really need to return an empty list?
Why should onUnityAds be called on async? Can there be a case where it is not async?
Perhaps add the latchManipulators in the try-with-reslanion above? The exact channel is called the data should be available to the latch, but the data should be available to the temp file and not used by the release method.
what is this null?
I think it should be like this: > "Workspace '{}' start failed. Machine with name '{}' due to internal error. Please change the message to: "Workspace '{}' start failed. Machine with name '{}'. All machines are: {}.", workspaceId, machineName, String.join(",", machineConfigs.keySet())
I think this check should be part of the emitter.emit((String) record.get(keyField).getSchema().isNullable()).
Isn't there some simple little library for generating JSON output? This seems icky, who knows whether it returns something nasty containing backslashes and whatnot...
you can flip the type after the flip call.
Here too, I think a DateUtil that goes from BigDecimal -> Timestamp makes sense. We may want to support that as PDataType.TIMESTAMP.toObject(finalResult, PDataType.DECIMAL) as this would be symmetric with the Timestamp -> BigDecimal conversion we support.
I'm afraid we need to add an API in the interface, because if function was used to get the String value from JsonNode, we would have to add a convenience method in the proto class (objectMapper.readTree(String).
Can you go ahead and rename it to just s?
This log message should be updated to: suggestion throw new ForceReattemptException("Failed sending <" + this + ">");
It seems busy to stream/map the list into a list and then join into a string. We can go straight there java.put(TESTER_NAMES, testnames.stream().map(ProjectTesterImpl::maybeQuote).collect(Collectors.joining(",")));
I would suggest to use this instead: this.myField = "";
Here I think the.next exception should be added.
Why do we need frontend changes when we don't plan to expose Jobs in webadmin within its own view like other entities (hosts, VMs,...)?
I'm not sure if this rule also applies to the remote plugin.
I like how this is done in the operation
Is this very time sensitive? We release "2", wait 20ms, then release "main". So on a slow machine (e.g. buildhive) the thread for main could record its message before the thread for 2. If that's the case, can we make this less time sensitive (if necessary by increasing pauses and marking as groups="Integration")?
Can we get rid of this create method?
Please move these out for a private method.
There are some project types that are not abstract and have dependencies. Can we have a common project that is not abstract and have some information about it?
Shouldn't you reset it to true even if the template is not found?
else is redundant
The admin has access to this node. But this is called only once. I suggest that you refactor initializeDisksAndReplicasOnNode to return a Map<AmbryDataNode> instead.
Use getBackend() instead
please move this class to a constant - you can reuse it also in the next method
fp fp?
A good practice do not to negate condition. In this case you can do: if (lbConfig!= null && lbConfig.getPortRules()!= null) { return lbService; } and then check if it is 'null' if lbConfig.isSelectorLinkMatch(targetService.getId()) { //... }
java @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; DefaultValue<?> parameter = (Parameter) o; return Objects.equals(name, parameter.name); }
would it be better to debug this message?
Please fix indenting and rename this map to something more meaningful like "create"
Would be better as the size of the severities as the severities are stored in a variable
nit: following replacement avoids instantiation of a new HashSet object on each call to this method. suggestion Set<String> currentlyTerminating = currentlyTerminatingMap.computeIfAbsent( category, ignored -> new HashSet<>() );
Can be simplified to: for (String childrenEnum : children) {
1. This is a failure and the test will fail even if repairedPoints will be failed. 2. Maybe catch the RuntimeException and log an error?
Should this be in the if/else statement?
s/1/INDEX/?
This will be inconsistent with the calcite branch of the subrick.
suggestion final List<String> userIds = Collections.emptyList();
Better to create a new initializeActivity method instead of using getChildFragmentManager().
I am not sure about this. If we have only one working tree iterator, it is executed before we start processing the entry in the directory, so it is hard to tell the user why. Therefore, we should give falses.
It would be good to validate that the Addresses are the same VOA and Addresses are equal.
I would prefer to use same code as in method getProjectRelease final Set<String> releaseIds = project.getReleaseIdToUsage().keySet(); for (string releaseId : releaseIds) {...
instead of key -> expirationManager.handleInStoreExpiration(key), should we use getAccessInStoreExpiration instead?
Nit: if you are using a BigDecimal you wouldn't need to cast to String here
I'd change this to debug?
You don't want to move them all to hamcrest?
Why do we have a separate pass in the index?
Please remove this variable
please rename to "decimalPlaces"
rename to fragmentSpecification
You can extract method 'createPath()' from base class.
String#split() might be more appropriate here since it is a list of characters.
This will cause the thread to hang if the project list is empty at this point, as for example if the project list was modified, the system will continue to load, and then this thread will never be blocked. Instead, I wonder if we should set a delay to MAX_WAIT_TIME rather than setting the time to 0. I guess we just need to set the default to something similar to 0.
Can you add log for the user? Will be good to know if it already exists
The metrics should be added at the end of the file now
How come the tests are failing if the entry entry exists?
Typo, should be card1
If we are testing and error message, we should also check for links[0], e.g..links[0]rel=true and.andExpect(jsonPath(".links[1].rel").is(Link.REL_SELF));
See if you can refactor/reuse it to add a util method to influenceParams
This should also be moved to call loadFromServiceAsync
Not sure if this works. Can you show a warning message?
unnecessary parens around the return.
Can we make it a log message?
This cannot be a problem since historySize is an array of 1 element.
The pattern is designed to be a field of the class, so you don't need to keep the field for that. We have it set when the field is called.
Shouldn't we be calling setNamespaces on every iteration? Or is there a reason to use same Syna for both?
should this be an error instead of a debug?
Use 'instanceof' instead of a null check.
not needed,
please remove '=='
static import
Consider making these constants at the top of the class. Makes it easier to read.
can we remove this?
static import
cache?
(minor) this can be simplified to just one line java if (!root.isPresent()) { throw new PantsException("Not a pants project"); } return root.map(r -> r.resolve("fastpass/bin/fastpass"));
Is the old method, <code>updateFeedbackQuestion</code> still used in the code?
I think this line should be removed.
Code style: Always use curly braces and the formatting rules.
if you have a loop, then you can avoid the copy and store the local outside of the loop.
There are a couple of copy-paste lines here which has the same issue. try { reader.readEvents(10); reader.commit(); Assert.assertEquals("Expected 0, not: " + trackerFiles, count); });
Is it necessary to set this model instance here? I'm not sure how to protect other occurrences of this section - especially if we set the editor instance to null.
refactor this method to use the non-static constructor in the base class.
I think we should close the StringReader after unmarshaling.
We may want to add a argTypes parameter when possible
This isn't really a good idea, as we're just adding new cubes here and not needing to write them in the cubes. It's also very easy to understand the need of a solution where two distinct cubes are used to load them and be created in the cubes (cube.getStorage() == null which has been added even if it has been loaded before).
Can we change this to the field and use the config-binding?
more readable with size(1)
Please benchmark this. The code was written this way for a reason.
Change the name of the test arg's name to __ when not used
Why is this if statement necessary?
well, of course I can read the code and understand, but - still, maybe enum is better.
Haha, I know :)
Please add final keyword.
I'm not very much sure this is the correct way to do this. The cache must be able to read the image, not only the one that is being edited. So if you have a header with one slash, you could maybe do something like: text.append("n"); text.append(post.id).append("\nCountry: ").append(icon.name()); But that's a bit more complicated too, I'm not sure how much of the performance impact would be.
I would remove this line as well
This doesn't seem to be possible?
You did not think we should expose a bean class here - at least by the annotation @Bean annotation.
Also, there is a missing assert for exact git repos?
please remove the type with: (EReference)feature instanceof EObject) && ((EReference)feature).isContainment() && removedValues!= null)
Similarly, you should use the "catch" clause here.
come from an else
Does this one need to be changed to '...' too?
I would prefer do not split by invocation but with step(1)
may be we can use the method reference
We cannot convert to a boolean value and use it to determine whether it is a boolean or not. The type could be a Boolean, not a Boolean.
Wouldn't it be better to do: if (occurrences.size().equals(occurrence) && occurrence.equals(occurrence)
Why are you checking the members inside the compute block? I smell race conditions since the membership change does not have to lock this map.
please use Backend.getInstance().getDiskDao() instead of DbFacade.getInstance().getVmTaskIdList()
You should use configuration to update domain status
This is actually adding functionality, since in 3.0 only system domain, which is used by org.ovirt.engine.core.bll.storage.VmVmDAO.getDiskBootOrder().
Should this be a separate error?
Should be final
Let's see why there is a test for the _list_ fields.
use the attributeExpressionExecutors[0].execute(event) instead.
rename to event
Should the null check be moved up into the other checks?
If this is a SOAP file, should we use the.exists() method instead?
nit: is it worth splitting the parameters into a separate method and also test one group?
Please remove this >> 24
you can use waitFor(() -> assertThat(directClient.getBatches(), hasSize(6))) in the same line
I would suggest that you can do this the same way as in <LINK_0>
I think this is also a Monitor.
Please keep the original name of the method, currently it is not validated during the transform.
Is it possible to retrieve just one job for a single job?
rules: return after if and log the error, return after continue
We need to check for row -1 (no selection) and ignore it, otherwise it will lead to an IndexOutOfBoundsException.
If you use this method to obtain the defaultTextured row, then this should be prepareAndStoreShaderProgramInstance("lightGeometryPass")
Can we define aliases somewhere in the Constants class?
Could have used Bindings here :D
@zantban 1) This one is not necessary with @Node and @Node prefix. 2) Shouldn't the code be simpler with: java Node localNode = Node.builder(String.valueOf(nodeId)).withType(Node.Type.DATA).withAddress("localhost", BASE_PORT + nodeId).build(); Atomix.Builder builder = Atomix.builder().withDataDirectory(new File("target/test-logs/" + id)).withDataDirectory(new File("target/test-logs/" + id)).build();
There are two generated imports in the same file.
Was it necessary to change this value? I think valueOf is probably enough
Maybe we can also verify that the generated _non-null_ nodes are the same as the one in the ProcessInstanceSummaryTest. But I think it's a bit too similar to the ones below.
Would be better to use the primitive long value, i.e. 0L.
I'm a little confused by this. Why are we sending the ChunkResponder here?
For consistency, it should be.putAll(commonApplicationPropertiesContributor.class)
the names are not consistent. it would be nice to indicate the contents of the diff set
Add a break to this if? Then, this condition is not needed.
Ew, that just looks icky. Admitedly less efficient... bypassing the reservation but still not breaking the loop. Likely less than a microsecond of "spin" even if the pool had 500 idle connections. Reads much nicer: java for (int i = bag.size() - config.getMinimumIdle(); i++) { if (removable > 0) {... } }
I guess that we have to call this method multiple times. So have a completed listener on the heartbeat.
please move the if and else branches to the same line as the preceding if condition.
CacheEntry.values() makes asyncGet() more sense.
Do we need to use emptyMap() here? It's a bit unclear to me.
Minor: I think just passing the current errorMsg straightaway in the string should be append('\n')
If Environment.containsKey(env.getValue()) return null then the method will be executed all the time, right?
this test is not executed by the parser and you're not testing anything
should just be inside try block
this line is gone, why?
Is this change necessary?
s/update/update?
add final
Should be done in the finally block
This will be returning null if the migration failed before, so please add a throws StoreFailureException to the return code, and use that one instead
We need to rework this method (replaceAntiCsrfTokenValueIfRequired) to ensure that we are able to extract tokens even if not previously registered (i.e. use ExtensionAntiCSRF.getTokensFromResponse with loginMsgToRegenerateAntiCsrfTokenValueIfRequired)
Shouldn't this be inside the if(isWifiConn) {?
This is unnecessary, it can just be float.
This check is too early, just for me, the condition is more readable to understand.
this should be moved out of the try/catch at all filters
assertTrue(evaluator.evaluateUnaryExpression(null, "", String.class))
this variable with a little descriptive
missing @since 4.10 tag
The original goal of caching file info is to make read faster by caching the fileInfo for read when we created the ledger, so here we probably need to put fileInfo into both write cache and read cache. And we need to increment refCount by 2 because we put that FileInfo into both read cache and write cache
Precondition to provide more information about the issue.
We can do the String.format inside a CatalogBaseTable, then we can use String.format() instead of String.format().
isUnauthorized 401
when you made this change please change the method name to getHoclo would be more generic and just entity
you can use try with resources here as well
Why use JDK map map and not map?
why do we need this hbaseAdmin?
Please add a log the exception.
Suggest making this package-private to avoid cluttering API-- I think. Also, I'd prefer to leave it package-private to avoid cluttering API changes. I realize that some future uses other static methods here, but it's not as bad as it gets used in production.
NIT: are we sure we don't want to use this inside the command?
could you put an identical for loop for the childStart loop?
@euphzj-Was "i=1" missing? If not used.
Needs to be in finally block.
BoostTargetEffect has to be used with the BoostTarget.
If commonColumns contains some names then you'll need to do the commonColumns same way you've already noted above
what is the point of checking this after?
We have this logic in somewhere else. Consider using CoreUtils.isSRMv2
Replace it with something like this: LOG.info("Waiting for resources to get allocated for request {}, no retries will be issued since host affinity is not enabled", request);
Does it really make sense to have a plugin with multiple secure-stores? What would be the rationale behind it?
break the if conditions
could you make this method private?
The failure mode should be restored before the end of the method after the switch.
Should there be a check to make sure the asset is non-null before modifying it?
Shouldn't this code run even if mHasWifi is false?
nit: "for distribution factor" would be better
I would prefer to see this line wrapped in a method to make it clear that participant is null.
method name should be 'DependencyConfiguration'
You are just adding a new interface for this class. Would it be nice to add an extension to the Context parameter?
androidFacet is not optional, we can remove this check.
This doesn't log the exception.
You can just put this in the addOutputItem.addListener right?
better to add a check for NumberFormatException too
This should be a constant (presto, and Slice) since it is used in multiple places.
In the test class, the sleeps should be the Gold api call. In the test class, the app is responsible for the thread sleeps on the port of the test class
@theck13, I would prefer to keep the adapter and the sans fragment forward.
Can we also check for null?
Checker.fail() if it fails, it will just fail the test. No need to read the code.
this can be simplified using 'newOrEditedBondInterfaceForAttachement' or 'newOrEditedBondOptionsForAttachement'
is the advisor.useResourceLock() should be renamed to increment, where it is initialized (same short lines down below)
FTR this method is available as a static method on the class, but not at the least. You could have a static method in the class that overrides its precedence.
shouldn't we change the order here?
Please use ""
Why is this change needed?
Avoid variable names like eventList
Could be final
Before this change, we had the eventDeliveryTime which was under the queue and was interrupted since we just release and send it to the queue. Shouldn't we change this to WARN instead?
This should be non-null. It was passed in fromConnectorLayout and fromConnectorLayout, since they are the same.
Shouldn't this method should be in the "if" block?
Shall we check if the interval is lower than the minimumium allowed.
Data word can't exceed 32 bytes:
Extra space
The first argument should be expected to be the last argument in this test.
Can you please use logger.error String.format instead of String.format?
Consider using one call to driver.findElement(By.id("WikiaPageBackground"), wikiaArticle.getLocation().x + wikiaArticle.getSize().getWidth())
how about adding a parse method to json in String to avoid parsing the response?
Why not toImmutableList()?
you can try with resources here: try (FileReader main = new FileReader(config.trim())) { props.load(fr); } catch (Exception e) { // ignore the out-of-sync timeout handling = true; } if (prop.isEmpty()) { prop = props.getProperty("socket.timeout.ms", ""); }
pass in the metric registry
I think this should be MLModelBuilderException (or MLModelBuilderException) if we switch to enum and continue making these auto-generated files.
Can you add a debug log with an appropriate error?
Is this really what you want? If you get an exception, you'll be returning null for a query on a record that exists, but that can't be parsed.
RocksPageStore will be closed after a shutdown.
do you need this?
nit: use try-catch block to make sure that we throw GeneralSecurityException is thrown
This is strange..map(CharSeq::rpString) can be replaced with.map(CharSeq::mkString).
final?
please use Logger.debug()
this line seems duplicated and probably can be factored out.
I think that this method is used to update the external/preb entry instead of a localBibEntry. For now, the external consumer can be improved to add a getter for it: Backend.setDataForCluster(updateRefusedEvent.getSharedBibEntryData().getVersion()).
This is probably not necessary as it should be a value.
You can simplify this a bit by using ternary operator: return (List<SimplePage>) getHibernateTemplate().findByCriteria(d);
I think this check is not necessary. When callback.onFailure() returns null, the check for it is to return a non-null.
Another test where the folder doesn't have a specific deposit. I think this is cleaner.
This will use formatTimeForId(new Date(time)) instead of formatTimeForId(new Date(time))
I think you should do the same with the Activity#getActivity(). If the user needs to provide a location, it should be the app name.
I don't think this should be a lambda.
![CRITICAL](<LINK_0> 'Severity: CRITICAL') Define a constant instead of duplicating this literal "customer" 3 times. [![rule](<LINK_1>](<LINK_2>
check if the client is practicable
Why do you need this?
this does not compile.
According to our code style, this is more than a while loop. It can use assignedSplits and then get splitSplits from assignedSplits. So you can just do: while ((SplitIndex < assignedSplits) {... }
Isn't this a typo?
Since this is a public API call, we should rename to toResolveContext. I believe this exception should be passed to the constructor
please use build.getNumber() instead of build.getNumber() + "", make it a local variable for the sake of performance
we should still be gracefully closing the connection#close() method.
Instead of this duplicated logic, you can override the List<Project.NameKey> getParentByParent() method above: public List<Project.NameKey> getParent(final Project p) { if (p.getParent()!= null) { return projectControlFactory.controlFor(p.getParent()); } if (!r.contains(p.getParent().equals(wp)) { r.add(p.getParent()); } } } return null; }
This should be included in the job.
Shouldn't this be a 500, not a WebApplicationException?
let's change this if to - if (storagePoolId == null || storagePoolId.equals(Guid.Empty())) { - this is no longer needed because of the if-condition.
lowestTimeAxisOffset is used above. Looks like a bug in IC2?
per the style in rest of this file, add a space after "if": s/if(/if (/ and same for similar if statements below
I think that this method should be private by default.
I would have checked any not null return value here.
Same as above, should probably be "osgi.resolver.usesMode"
initialize with US_EAST_1 than null and remove else part.
It's better to boolean instead of Boolean
I think that if the configuration properties are not provided, we can use a custom <code>mail configuration</code> </code>
Can you get a custom accessor (String) and assert in the test method?
Can this be made package private?
This is a bit hard to follow. What about just returning values in the while loop? There's no other methods that can return a boolean
If we have a condition on this line, it would be nice to have!thread-style.
maybe use string concat instead of the :?
This works, but the implementation of this method should be changed to use the search action. You need to set mSearchMenuItem to true when it is already shown on the search screen.
Missing space after!
In this case, the 'if' statement is not needed.
assertFalse(e)
So now we're sure it's working?
can be simplified to just if (iconSizes!= null) { closestValue = closestValue; }
I'm thinking to avoid having to work this out later if it's empty at the end. However, I don't think you need to handle the IOException further down by having it in try section.
suggestion RepositoryPath packedIndexPath = indexPath.resolve(IndexingContext.INDEX_FILE_PREFIX + ".gz");
I think this should be SizedUtil.IMMUTABLE_BYTES_PTR_SIE + key.getLength() + table.getEstimatedSize()
I don't think you can cast to TreeIterator<?>
We already have getButton() which is available from builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { target.onActivityResult(getTargetFragment, which); } }));
why not just break at end of the loop?
I don't think you need to collect the classes that are not declared.
Label should be reporting.parameter.onOrAfter
Since both code paths are identical this whole block, perhaps you can replace this with a method to minimize code duplication?
What do you think changing the name to vm. We do not know whether it is in kilobytes?
This code doesn't have to be made static in the DollarSignFromType. I think it's counter-intuitive. It's counter-intuitive to the DollarSignFromType.
I would rename the variable to "configRequest"
nit: maybe we should rename this variable to match the other codebase :)
no need for this line.
I think we should use the  fNot variable here
I thought there was going to be a separate monitor for this CM integration descriptor, the handling of which would be contained in the cm-integration module.
Not sure this would work. but I may be wrong, but the Properties object is not closed properly.
Since this is a singleton, I think it could be made into a local variable.
This inner block down here belongs up with the first block which starts setting productsChanged. The lower if block makes changes based on that state and should no longer be flipping the value anymore.
The defaulting to always false should be in the file ddl URL. For example, if someone created the SQL Dialect Url Review: [hdfs://abc/xyz].
What's the rationale behind this commit? I'd use the commit message for this commit.
@Vertexleick, is this a table mapping? Isn't it the same as the original BloodTestingRule.eINSTANCE?
For OM square braces are better.
Hi Martin, I'd rather do that in a later change. I tried to do it in this change but too early and it led to too many modifications, so I prefer to postpone it. I think we have a weird interaction between MergeMode, that we seem to use in the UI to set the markers on Diffs once they have been merged and the DifferenceState. But that's not really a big deal. I think we either _could_ do this in a follow-up PR, or *could* have a long commit.
Do we need to do another lookup here? We already have the consumer type in the ConsumerTypeCurator, and it's also updating the consumer's UUID.
Can this be static?
The indentation should be in a with the opening brace, and it should be in one line.
Will this be a problem given the task is that logs from the exception to the user?
Is this change related to this PR? I don't see it, so I would prefer to make this protected since we can subclass the RequestTimedOutException
don't we necessarily need to wait for that?
We could have a faster method like this: java public List<String> get() { return Stream.of(variables, Collections.emptyMap(), "skipping"); }
Isn't this methods used elsewhere?
Should this be try with resources? I don't see the reader closed
nit: just use Path::new
suggestion: consider returning Collections.emptyList() instead
This method is meant to remove the image path from the disk, and the delete could be removed. I think this would be better to just delete the image and files from the disk
Can be possibly moved to shouldShowLog of PageData class so that all the checks for whether a emailLogEntry should be included is located in one place.
This is same for standalone as well as domain ;-)
i think this is dead code, the retry policy would be dead if there's an error. Otherwise the retry policy will never be scheduled to be removed.
this method should be private
refactor into class variable
Same as above, it should use Strings.isNullOrEmpty
use.map(expression -> rowExpressionTreeTranslator.rewrite(expression, context))
Could have a max value for duration.
shouldn't we have an array of configs (if there are no values in the builder)?
Maybe better to add the other formats as well?
There is no point in checking if it contains the given url. This can be fixed in a different commit.
You can add a static import for the non-null argument: import static com.google.common.base.Preconditions.checkNotNull;
Perhaps we could compute time.milliseconds() once at the start of this loop and pass it down to selectReadReplica?
Should we get the non-null value here (and in the other tests)?
Can you extract a constant for this?
Does this need to be changed because of rebase? Might be much cleaner to have a rebase of the rebase and rebase to know what is the DSpace related to?
I believe that setters normally return the getter/setter methods, even when the getter is not on the field. Wondering if the getter methods should be private.
I think this should be logged at the end of the method.
Please, use the JLS suggested modifier order.
Could we use the same log levels in the code block?
- This should use the Util.jboss-as-test.utils.Utils#sleep. - Can you use the same one?
please put this (exceptional treatment) where all other treatment of same kind are done
add a space after }
Log message shouldn't be something like "cases", not try.
These can be static
Please use switch-case
Will the segment change in the log about how many tasks were created?
Same here: use SUBJECT_COLUMN
You updated the capabilities as well but not sure if it's worth it.
json string
Why do you use a TreeMap here?
Why we want to use here compara_dbre.getName() instead of division.
Does this need to be null?
Parsing XPathEvaluator should be done in a loop. Make it static, and have a getter for it in TestHelper and call it from that method.
Could this check be in the constructor?
Remove
This should be outside the if block
It seems to me that we could avoid to collect every method by using slicing the found methods.
I think this should be fixed by TemporaryFolder @Rule, as there is a cleanup for the file-handler attribute.
Redundant with version handler and version, if you build it?
This is wrong. OpenShift modules are using IngredientFluidStack.item to remove the container item.
why do we want to set -1 and not a check here?
same thing here, it's hard to read.
Why not do this after the initial call?
one.HAND is not a new card but a new one. This makes sense as if (card!= null) { return false; } card = player.getLibrary().getFromTop(game); if (card!= null) { return player.moveCards(card, new CardsImpl(card), game); } return player.moveCards(card, new CardsImpl(card, game, source, false);
No need for final here.
I would move the logic to the ledger metadata branch, so it is easier to read and there isn't the context of creating a new ledger metadata.
new String(settings.getOauthApplicationId()) looks always more content.
What is the reason for this test? Why are you stop container in finally block?
Inconsistent use of this.
Maybe you could replace these lines by something like AssertJ Assertions.assertThat(principal1, hasGroups().size()).hasSize(3); Let the test fail and remove the "group1" from the "actual" parameter.
Please correct the capitalization of the param names.
Maybe we can extract this part to a helper function getSourceCode(String name)
What's the point of this? If it's QUALIFIER and then the Increment should be the same as QUALIFIER and not the other.
The range should be calculated at the end of the method, and here, by calling getPositionInCells() here.
why not to use the command parameter directly?
This code is not used. This should be removed.
Nope - please no as passing in null.
This should be in the while loop.
the logic in the rule.match() should be extracted to a common method with the logic in the RuleApplication.
java if (!notification.getEventNotificationsEnabled()) { return; }
This isn't Integer.parseInt
This would be better as: java if (projectsAdded.add(targetProjName)) { IProject targetProj =... } That is, use the boolean return value from add to decide whether to add the JavaProjectSourceContainer instead of a separate contains check.
nit: Can we use StringUtils.isTruthy(path) and import java.nio.file.Paths? Then we don't have to have the checks for a file name.
WrongReferenceAttributeValueException and WrongAttributeAssignmentException are not thrown in this method.
Perhaps 'Not unpacking {file name}... 'would be better - this gives the impression that there are no unpacked variables in the file - but this may not be the case - config could be overriding this.
What about this? java if (updated!= null) { return updated.getGroups(); }
Add some more information here, e.g. Isnt it _fail_ if the test has failed?
suggestion String[] configuredAssetFolderPaths = new TreeMap<>();
Im not sure this is better, but this check could return null if the given key is in the array in the for loop.
I'm not certain what the correct thing to do here. If there are multiple concurrent threads waiting for the unsubscribe to happen, do we want to unsubscribe the open process?
We should create a separate, generic class for this execution, since the body of the method is always the same.
Strange... the JDT UI settings in our projects should remove trailing whitespace. Please remove.
looks like you missed these
Since there is only one place to be used in this class, you can extract it to a method
Let's adjust the formatting to here.
This change should be done in more than 1 place.
I can't remember why it needed this? And I get paranoid about it since I spent months tweaking the multi server configurations to not break.
nit: could be written as "return for VERSION_1_2_0_0"
Need to use placeholders for those as well
I would change this to a log.warn
Missed this one before.
Can you use java 8 stream API?
... remove that line
Missing final
Please always use this library to calculate the max size, old-style parametrize it (or provide the max value). It is public API, old API should be deprecated.
What happens if the seed is less than the timeout? The loop would grow during the entire scan, and then we create connection to be left outside of the loop. If this is the case, the connection creation should be done outside the loop.
Doing it this way will not update the actual Pod status. I think we need to add this in createOpenShiftDeployment() PodSpec pods = new PodSpecBuilder().withContainers(container).withVolumes(getVolumesFrom(volumes, workspaceID)).withVolumes(getVolumesFrom(volumes, workspaceID)).withVolumes(getVolumesFrom(volumes, workspaceID)).withVolumes(getVolumesFrom(volumes, workspaceID)).withVolumes(getVolumesFrom(volumes, workspaceID)).buildMetadata()
We should just expose getRemoteAddress()
would be nice to have a more descriptive message here. Maybe something like "Node Name must be available" or something like that.
If you're going to get a EntityType which is a Copy then would this not be the EntityType itself?
'e' is not logged
You should use here errorFormat instead errorFormat
Please don't print the file in this case, but instead use a string concatenation. This will save you a couple of lines of code when you use this.
Please refactor DbFacade.getInstance().getLunDao() to a method...
Suggest doing this on a separate line.
This can be inlined.
You should use configuration to check if the domain is locked, since the domain is already downloaded at this point.
this is a hang... if you have a very slow byte loop.. 5 seconds might be a lot more terser with a default value.
We could potentially replace this with asserts to check it.
@vilchik-elena This method should be imported statically
Let's try to keep it as is, and introduce a method in our class that extends RuntimeException { try { Credential manager = (WindowManager)context); } catch (NullPointerException ex) { // Ignore } } and use it here.
What is the purpose of this change? It doesn't seem to be related to the PR.
Line-184 - Wrapping the String.format() for readability. It's hard to maintain.
child
assertEquals(counts.get(int1), equalTo(1));
We should either delete or use log4j.
It would be nice if you could instead write these lists using Arrays.asList().
This is going to fail out of bounds or logs out of sync. Can we instead simply not print out those XXE tests?
would be nice to use session.query(..).eq here. with the call to session.saveOrUpdate()
Do we need to make sure that CBs's labels are not treated as Hard-coded strings?
I think it would be cleaner to have the check for isSelected only here and inside an else if to avoid calling all the time.
Its possible that the underlying QueryProvider instances are initialized with some syntax that returns true.
rename to childNode
That's too complex. Please use braces around if bodies.
This should be logged as a WARNING log
The method name is 'this' is not really clear.
Why do you add a new message here?
else if
This is a bit longer true. We know the object ID is the same, but if it's null it means the operation isn't marked as volatile, so the value could be non-zero/equal.
Remove this one too, let's keep it.
@ivandalbosco Why not just use parameter.symbol().isPublic()?
I think, that should be hasTime
I don't think this is good but if the cache had "dkey" in front of a few values and <= we update this to "a different min" for the size. This is a bit nit-picky but I don't think this is great either.
I think CDA is not the place to check if DbPoolStatus is not null - as it's an internal exception
It looks like it is an archaius TaskExecutor arch
no need for this temporary image
It seems like you discarded all state changes, but now it seems that you discarded all state changes. It is right now you will just overwrite all state changes stored in the taskManager.
It would be nice if this were the same tests on line 37 as well.
What about if by this some existing user is in UpdatableHistoryStep? What will happen?
Is it possible for the cache to be closed before this method is called?
NPE possible.
We can use.isEmpty() here.
If the option should be enabled also without a DC, then check that it is enabled already with the dc cluster. If it is, then it should be like this if (!getCurrentStorageItem().getRole() == StorageDomainType.ISO || getCurrentStorageItem().getRole() == StorageDomainType.ImportExport)
This really should be equals, but.equals() should be called only once (e.g. "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "this", "fCurlocation", other.fCurLocation);
order of operands
@vilchik-elena test name sounds a bit strange, it's not about test1 (not sure why a test could fail)
I'm not sure if this is right or not but the content can also be concatenated with the actual encoding.codePointAt(i) could be safer.
I was thinking in having REST operations that involves multiple servers under a separate resource: /rest/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf/v2/protobuf
Formatting
suggestion assertNotNull(strategy);
Sorry, I just realized that the ss is not correct. The only thing I can see is that this will set the end of the range of events on the resource end. So you don't have to set it to another value, if it's already completed or not. The only thing I can think of is that you change the range of the events from 75 to 371 and 373 to the end time. That's not the case if the trace is re-opened.
Move this binding to StorageManagerConfig.
2 should be the first result of create table t (if the database is present), right?
Could you, please, explain, why it was needed here?
Should also assert the not null?
You could think about extracting the call to the constructor but we could have it return a new instance of the class.
Same as above, why use a list?
In this case "parent" is not a directory. It is defined as the class name (which is this.getClass().getName()).
I guess the 'this.service!= null' part could be removed...
suggestion return response.getStatusLine().getStatusCode() >= 200 && status < 300) {
Again, these should not pass validateInputs()
You should never write to the Bytes in the Bytes constructor, like we do for Bytes.
the code duplication
Why this is changed?
Before, if there was an error, it would setToolTableJson(null). Now you don't set it at all. Do you want that? I don't know the answer, just raising the question. In theory, without understanding the whole flow, it seems like if there were already a value in that fiel, it would get cleared before your change, and now it doesn't. This happens in at least 2 other places (ran across this one first). Checking that this is as intended everywhere. Could very well be the bug fix :) But I'm still concerned about old values not being cleared.
isEmpty()
can you please rename these variables according to current name?
I think this can be moved to the ElasticsearchWorkOrchestratorFactory class.
If you are going to return true, you can remove nonBlocking variable and the check from the runEnvVars.get() to be redundant.
add "try.." here
BooleanValueMatcher(value == null || StringUtils.isEmpty(value))
Is this really more readable? (IMHO it's not)
_minor_ I prefer using Objects.equal() over session == null.
if getString() returns null then line 202 will throw a NPE
The only thing I see here is that we can avoid anything else, which may be environment dependent on Kind.VARIABLE_IDENTIFIER and have the variableExpression.text() method. So I don't see any reason to, however, you can still use 'variableExpression'.
This variable is not used.
readLine copies the character sequence? That's dangerous. Can you make this throw an exception instead?
Use 'policy' instead of 'policy'.
I think it can avoid some readFullys by using java.util.Arrays.format which takes a long.
Any reason not to log ERROR here? There are issues with this: - If we start to run a process with /home/marc/bin but this is not /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/marc/bin but workspace /home/m
We can get rid of this method, since it is already a public method
Should go into @ After method to make sure it clears authorizations even if an assert statement fails.
Should this be reading up at the start of the init method?
This test passes a ScopedFooImpl instance and not a ScopedFooImpl. If the application has already loaded a ScopedFooImpl, then why not have a private method bind(Foo.class) that returns a List<String> and use the return value?
what if storageDomainDR.getJobId()!= null, won't we need to use storageDomainDR.getGeoRepSessionId and storageDomainDR.getStorageDomainId instead of getParameters().getGeoRepSessionId() and getParameters().getStorageDomainId()
Could this be moved to the finally block?
This can't be true. File comes from a byte array on its own. For example you are dealing with less memory and more memory and less relative to the file name, but we're on the heap.
You could potentially just use computeIfAbsent here. Sorting ad object is slightly more efficient.
Why did you make this variable final?
Is this flag needed here? _is isStageEnabled_ is true_
Refactor into method PatientController getPatientOnServer
please remove the part in a separate patch.
please use toString()
Why this change?
I'm not quite following what you are doing with the Entity Familys. It seems like you are using it primarily to convert each TypedEntity returned in this loop to an Entity. If that's the case, you should be creating a new TypedEntity and use that here.
finalclients are not needed
subMonitor should be used here
Why write it back to the field on every call? In any case, it must be done while the lock is held; otherwise we're back to the possibility of a concurrent update.
If this is never going to happen, why modify this to be less chatty?
can we set this to null first?
This is pretty dangerous because alerts bigger than 1MB will break the emitter
Extra parentheses here (ScanQuery)
Consider using Assert.notEmpty() and/or Assert.hasText() instead of the three checks in the isTrue block. Otherwise, nothing wrong with this. Something like this may be a little cleaner: Assert.notEmpty(configClientProperties.getUri(), "Config server URI is undefined"); Assert.hasText(configClientProperties.getUri()!= null && configClientProperties.getUri().isEmpty(), "Config server URI is undefined.");
Should this use a constant instead of a literal "otherwise"?
nit: I would use the newly created ByteString.copyFrom(entry.getKey()) here instead of this conversion.
Do we want to log this in the future?
Add newline before return.
Could you explain how this will work with an AdapterFactory to make sure we have the right implementations?
Did you measure anything more than just using a double value? Is there a more sense to set the floored bounds to the output bounds?
No need to use a separate variable (especially as it's a local variable, but preferably) just inline the original variable (I don't see a reason to use a separate variable (especially as it's a local variable, but as long as it's not as important as there could be a performance penalty to find the scope of this method. As the default scope is fine, but as long as we don't need to loop for a single call to createXYStepRenderer, we could just do xAxis; if there is no other way to set the link to the play tree.
I'm not sure what the reason for this change: it doesn't seem to handle exceptions on the same block. If it's a bad idea to throw a NuxeoException from a catch, then the exception is caught and the stack trace is printed.
null pointer exception here
if (
There is only one FLAG7 check. It makes sense to define ITypeMarshalBuffer.BASIC_TYPE | shiftedKind | ITypeMarshalBuffer.LAST_FLAG and use ITypeMarshalBuffer.BASIC_TYPE.
this should also use a forEach
I'm not sure what this is for? Why do you need to filter out CaseVariableInstance again? The original code seems to be missing 'instanceof CaseVariableInstance'.
VmNetworkInterface already has a constant VALID_MAC_ADDRESS_FORMAT which you can use.
Why do we need to wait?
nit: maybe replace this with: java Optional<ApplyNode> applyNode = searchFrom(plan).where(ApplyNode.class::isInstance).findFirst(); if (applyNode.isPresent()) { throw error(applyNode.get().getCorrelation(), applyNode.get().getOriginrg()); } else if (lateralJoinNode.isPresent()) { throw error(applyNode.get().getCorrelation(), lateralJoinNode.get().getOriginrg()); } return plan;
Can we reuse the ByteBuf instance? And we have to handle the EOF.
Do we need to init state? Isn't it enough to call it afterInvoke method?
@original-brownbear oh, I see, it's \u
This method should be synchronized.
Better: append this unconditionally, and only append the other part based on the condition.
It's wrong, but if we are on the top of the file, let's say that neither of them should be set.
Please don't introduce labels, as I removed them in anoher pull request because sonarcloud complains about them (and not just sonarcloud)
use this.transform()
Can you rename this to checkContent?
Should be this.incarnationId = UUID.randomUUID().toString()
suggestion if (builder.headers!= null) { Collections.unmodifiableMap(caseInsensitiveCopyOf(builder.headers)); }
This test does not look correct, it seems that "false" means that the removal of the launch will not be scheduled.
This filter is too complicated to follow. Can you create a single metatypeInformationMap(Map<String, Object> service, Set<MetaTypeInformation> metatypeInformations) and then filter for null values?
When passing in exceptions, bad usages
this whole else seems to be a bit redundant.
If oK.yaml is specified then it should be thrown as a non-null value. The behavior must be consistent with the mechanism used in the DigestSaslClient.
And call it longValuesMV
It seems the tab could be null?
This method is never called as the resource delta.
I am not sure this is a good idea. If the link is not found then the file is not found because the current links are not located in the repositories. The path here is linkType
Will this code crash on windows?
s/createPolygon()/createMultiPolygon()
we could potentially simplify this by a method from the apache commons lang3 api, which would be nice for now.
Why are we doing this check and not just set the authorization properties if we are not already registered?
Since the subject isn't initialized until the callback returns. Won't this most likely lose the race and cause an NPE? I think this could be solved by making an AMLoginInfoTask subclass that provides latching mechanisms like AMSubject and Subject. So the code here would look something like (super approximately): LoginInfo info = new LoginInfo(); info.execute(); info.await(); assertThat(info.result(),...); // Even more approximate if (info.legacyAuth()) { Subject subject = new Subject(username, password, null); subject.execute(); subject.await(); assertThat(subject.result(),...); } else { AMSubject subject = new AMSubject(username, password, null); subject.execute(); subject.await(); assertThat(subject.result(),...); }
if statment needs to be at least one line
I'm not positive that updated won't be called with a null for the config parameter, for whatever reason. It's safest to simply return in that case.
why not just use toImmutableList()?
what's ".jor"? can we extract it to a constant field?
It should also use DiscardAttributeChecker.UNDEFINED
null check.
Maybe we can just use a LinkedList here
Could the method name be changed?
I know I have a split opinion. I'd would take a stance that this constructor should be used only when we start writing in V2. Until then, its confusing why the callers are sending in defaults. This makes the caller assume that toBytes() will serialize in V2, which is not. We have to come up with some standardization wrt this new version upgrades in general.
Should this go into doReturn rather than raw values?
Please extract to a constant
I'd prefer to have a test that verifies the span type, and call equals on it. java @Test public void testClientIsInstrumentedWithTracer() throws InterruptedException { ///.. } Then update your test to check the type.
This will create a new Story description - Success, Expires, on assignation
nit: newline
Why is this extract as a separate method?
Please change this to use the same format and refactor the parameter for the different formatting if possible.
Suggest a check if action exist for the workflow or not.
In general, I think we should start the tasks that need to be started, and then stop the tasks that are supposed to be stopped. The other way around could potentially introduce latency.
Should be the first filter of CREATED
Could you have a LayoutClient with INVALID_EPOCH variable?
* There is no need to create a new instance of this object if the User selects the domain, in the xmlns attribute. * The CSM is responsible for doing the validation to validate the DomainClassValidation and that should be moved to VSM.
nit: not sure if close starts for anything else but this would break for more likely use sites
typo in var name
lets make this an exception
please put in a separate method or rename this support method accordingly
put the log in the for loop so its clear
Shown on the UI so should be i18n aware.
change this to AssertionError
Hm, why is this CHANGE_INITIALIED? Can you please describe what this bridge is on, and set it to ONLINE if nothing in the bridge?
Not sure if this is the right message to the user. The sirius Data "representation" is something that is defined in another package. Maybe "Project TreeRepresentation.presentations"?
Can remove the 4635 and make it final and add a null check
Please use PSQLState instead of Exception.
[minor] Use IllegalArgumentException instead of Exception?
hmmm... could you write this one more?
we should check if mMediaUploadHandler!= null before accessing its methods here, as they are only created in onStartCommand, I believe there's this slight possibility onCreate is called and then onDestroy gets called immediately afterwards (without onStartCommand being called).
Minor nit: maybe move the blog here into the else clause since it's not used above?
Looks like this now should be withing if (result && this.fullStatsEnabled) as well.
In most cases, when you don't want to pass this to the Entitlement object, the only way to do that is to get in the context of the event. We can always create a custom Entitlement object for the concept, or we should log it.
There should be a check here, if it exists in the beginning of 'fFeatureIndex'.
IIRC anonymous users will crash here because they have no user account to get the prefs from.
I think it is fine for the message to be "Sparql".
I'm wondering whether it's worth to also extract this into a field, like is done for trees. This method isn't on a hot path as far as I can tell, but having the symmetry and separate code might still improve readability of the code. What do you think?
do you think it would be more efficient to filter on the partitionKeyFields directly?
Please remove System.out.printXX, as they are done via logging instead.
If you use assertEquals(false, equalTo(expected)), then the error message will be printed in case of "expected" exception.
maybe use dnsRecordFactory.getInstance()
Is it a test that retrieves the yaml files? It looks like a directory which is not in the directory.
This code is already non-static. It can be simplified to: if (vungleBanner!= null) { publisher.getParent(); }
I would move the logic to the RestInvocationException class, and remove the catch clause.
Yes, I should have an assertion for simple boolean, but this is more like a test.
We should have a test for the case where the default is false
Can you check that addr.get() is the same?
The monitor should be made in its own background thread. I think you can inject the repository repository in this JobHelper class.
Wrong method name here.
It seems like it's safer to use the builder pattern to generated generated stream stream without needing to add/delete that
Local Math.min()
We should log a warning here too.
BarcodePrintPrintPrint?
Use the else bodies even for the switch/case bodies.
Fine to move, but I'd like to have a faster lambda here to use a filter.
This is confusing to me. What about the following? Set<UMLRTProtocolMessage> protocolMsgs = new ArrayList<>(); for (UMLRTProtocol protocol : allProtocols) { if (ProtocolUtils.isCommonProtocol(protocols, protocol)) { addProtocolMsgs(protocolMsgs, protocol); } } return protocolMsgs.stream().map(new Function<UMLRTProtocolMessage, Event>() { @Override public Event apply(UMLRTProtocolMessage msg) { return msg.toReceiveEvent(); } }).toArray();
Do we have a use-cases that need to override this?
I would prefer to add a handler.setControllerListener(false) on your handler.
just use an Enum here
Could you rename the animationListToLoop to animation and animationListToPlay to animation?
What happened to the checkbox between name and potential value?
This may not be needed at this point.
This should be inside the if block, it's not just a reminder.
can we also include a test where we set the role to be true?
"Must have a snapshot" or "Must have a snapshot"
s/type/type/
Why 5? It seems the constant is not being used.
You can [just](<LINK_0> try with resources to close them. I think you should be able to use the try-with-resources pattern here.
Should this really be../FOO/FOOFOO and.._FOO/FOO
I think this test is just verifying that one transaction has been created?
Should these be removed?
can we use the azure-core library here?
I would raise it to WARN as this would cause it to be an exception. Or do you know how many offset we failed to report?
Can we use aggregateStorage.map(AggregateStateRecord::commit) instead of this where it is used?
You are not using the getDrawable() method here. If you want to keep it in that case you can always use ContextCompat.getDrawable(Build.VERSION.SDK_INT >= 21)
log the sleep duration maybe? and maybe remove the exception?
If you're going to assume that the pre-state means that you don't need to test this anywhere, then you can just do: java this.direction = GeneralMethods.getMainHandLocation(player);
Please remove the System.out, e.g.:  log the relevant information?
[\n\r]+ would perhaps be safer
This doesn't seem right. Pull it up and then call getConfig()
Should be a.filter(lock -> lock.getAcquired().isBefore(limitForAcquired))
If we are in the future, should we also check if fullState.get(fQuark).getStateValue().isNull()?
Same as above, use method modifies
Why is this needed?
The whole test we registered multipleClusterListeners in the same cluster. to avoid the repetition.
Should do "region == null".
Should we throw an exception?
Should this be an enum?
you could use Entities.removeAll(attachment) here
Think @sandeepSamudrala mentioned in the another pull request. Should add location to the resultObject.
This can be small D double
why not use the human-readable message of the mediator with the attribute?
checkNotNull
s/Started/Starting
Minor suggestion to make this less readable: if (p.getFullProtectionType.FLYING_INTO_WALL) { PlayerProfile profile = HelmetefunItem(p.getLocation(), Sound.BLOCK_STAING); if (item instanceof DamageableItem) { ((DamageableItem) item).damageItem(p, stack); } }
Why do we want to return here? Even if we retVal is null, we can initialize retVal here and the list can be added with the output of fListenersByPartId.get(listenerPartId)
Should this test that the task is returning AGGREGATbyTask?
Shall we use ROOT_PATH instead of "/"?
I don't think it's the job of this class to invalidate a valid offset_s. If the user wants to handle timestamps in nanoseconds using long, the user should check its own overflows.
could we have a message explaining which operation is being retried?
This should be done in an else statement where we make the test easier to read
> // "configuration" [](start = 7, length = 4) // "request to", which is the case, so just call this endpointArguments.forEach(e -> e.getKey(), e.getValue());
we still need this snapping logic if the window is not divisible by the step size
use get() to create new Location() if it can be null.
addChangeListener(this)
This could just be a nested if statement. The "else" block would throw an exception.
if the node is not the first node, the node will be the first node and the node will be matched, probably the lastNode will be the first node and the node will be matched, but the first is not. I think the code should be changed.
This looks a bit like a debug statement - could you please remove it?
assertFalse(...);
Please use GTK4.
Check what happens with an empty file: Looks like on replay, both openFile() and closeFile() calls are skipped since there are no recovery entries for that file.
Can you pull the Math.min call out of the loop in a 99.9% sure we don't want to request more than one element?
In my testing on Linux I see another SWT.Selection between MouseDown and MouseMove. Maybe you can also do this in Selection instead of Selection.setOnSelectionEvent?
![MINOR](<LINK_1> 'Severity: MINOR') Refactor your code to get this URI from a customizable parameter. [![rule](<LINK_0>](<LINK_2>
close streams
We can probably use a constant for this.
The loop above has the potential to problem of n-picking: for (DataSegment segment : runningSegments) { if (toBuildInterval.get(interval).equals(checkVersion(interval)) { taskMaster.getTaskQueue().get().shutdown(runningTasks.get(interval).getId(), "version mismatch"); } }
Not sure this is finally correct. I think this may still execute measure... two times for the same FileStore. Consider no value known initially, then Thread A: Starts future F1 Thread B: executes future F1, puts lock in map, calls measure... Thread A: times out on the get() on F1, return fallback Thread A: comes again with the same FileStore, still null Thread A: starts again a future F2 Thread C: executes future F2 Thread C: obtains lock from map Thread B: returns from measure... Thread B: sets value Thread B: unlocks Thread C: sucessfully locks the lock, calls measure... Thread B: removes lock from map Thread A: times out on get() on F2, returns fallback Thread C: recomputes the value, eventually puts it into the map Probably should check before line 239 or at the beginning of measure whether there's a value known by now. Same as why my code checked again while the lock is being held.
I don't understand why this change is necessary.
Should this return a MigrationException instead?
You forgot parent class name and it also must be aliased name
lets make the account name into a constant of the account name.
This handler is used at several places, so it's probably better to reuse some code-specific methods to add the logic to the addHandler method.
this continues not just load "msg" from line 72. Do not use "e" as a loop in line 97
@grkvlt3 let's also describe the use of the _cluster_ variable and the corresponding argument.
This should use the LOG.error() unless we want to log the exception.
Why not compare the version?
I'm not sure that we need this to be a default state. What is the impact of it?
This is an example.
No need to get the exception here, it will only cause exception to be thrown. The Exception in the line above will be logged.
This IntervalUtils.compareLocatables(o1, o2) -> IntervalUtils.compareLocatables(o1, o2, o2)), is just a bit confusing.
It's definitely not sligible to create two map. The map should be adapted to this object
There's a typo in RyaInstanceName. Should be 'RyaInstanceName'.
This block only compares the MethodAccessItemDto objects. It should compare them to the MethodAccessItemDto objects from the corresponding indexes of the MethodAccessItemDtoList.
There are a few checkstyle errors left: [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:24: 'if' construct must use '{}'s. [NeedBraces] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (found 145). [LineLength] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (found 145). [LineLength] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (found 145). [LineLength] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (found 145). [LineLength] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (found 145). [LineLength] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (found 145). [LineLength] [ERROR] /home/circleci/AntennaPod/./app/src/main/java/de/danoeh/antennapod/dialog/FeedOrderDialog.java:29: Line is longer than 120 characters (
This is a bit clunky, it should be read using a try-with-resources pattern here.
[minor] Maybe we could try to use TestUtil.verifyEpier() here?
Shouldn't we be moving the elevator while we're moving the clamp?
"for method..."
Can you remove these?
change to List<Issue> issues = Lists.newArrayList();
Can use else if here.
Is this always a ((NameCallback) callbacks[0]).getName()? I have this block of code with a more toString method
Add a check for if it is required here
Minor: Instant.ofEpochMilli(ime.getEventTime()).toString() is unnecessary?
bricksButton.edit(brickModel); has been added here.
change to: if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
This is not going to work on HTTPS. Dstance
This doesn't necessarily make sense to update the version. Previously... the query could be re-used.
This block can be return without knowledge of null.
Please refactor to different methods
This seems to be changed, but change it to use startTime instead.
is this only used in tests? It might be confusing to have a migration migration every time. tearDown would be more descriptive and easier to debug.
Is it safe to change this to return Optional<String> and remove the returned value? The result is the same, simple code would call it 'void', and might be easier to read/understand.
Consider using the one-liner for this if statement.
Should be "#exists"
Can be simplified to use PAD::new
also need to handle case where programArt == null
I'd break this up as java StringBuilder sb = new StringBuilder().append(formatExpression(column.getName(), parameters)).append(" ").append(column.getType());
I think we can avoid creating a variable for the mediaCharset stuff and just return the result immediately.
This is an internal implementation detail of the applications, and the implementation is not able to properly incorporate the underlying network proxy as well. <LINK_0>
Instead of using Streams, can we just use Stream.concat?
Use logs instead?
I'm not sure, but it seems like it might leave some commas in the case where we added a method to the Haxe classes. ( UsefulPsiTreeUtil.getChildrenOfAnyType(), is it possible that a component is added between a module and a Haxe and the class, where it gets used.)
s/any(List.class)/anyList/
Could you add a log message to the log?
This would be a nice change; original exception was not thrown in the catch block
Since the connection getting passed as a parameter to this method, it shouldn't close the connection inside this method. Need to close the connection in the original place where it originally (create and )close the dbConnection.
Would be nice to have a different test that verifies that the intent was set and that the FedoraTransaction.startTransaction() was correct?
[minor] Throwables.propagate(e) takes a Throwable directly and should be redundant.
The "key" and "value" looks different from the key.
I guess the idea is to have this as part of the builder pattern, but we should be consistent and use the builder pattern that most of the time will be used - deploying is only really needed if we explicitly create the class with the default binder.
You can use the code style here: if (now.getTime() - date.getTime()) {... }
You should add a null check to translations.get()
what do you think if writablePartitions is empty, otherwise we won't be able to write again?
Guava style in this way: java return getBySingleKey(key, rangeKey1, rangeKey2, limit);
this empty line should not be here but missing
We should probably test both cases with a try/finally block.
I don't see the difference between testWriteAdvHandle and testWriteAdvHandle. I image you need to verify the different behavior between without and with ledger id. but the test cases don't actually do this validation.
i18n
We can update the ChainingStrategy to be consistent with the line 79-70: <LINK_0>
if this is a problem, please add an error message to the exception.
This should be an error rather than a string that we can see in the logs.
Use the primitive long type.
I see what you're trying to do. So we can assume things such as the following will be processed correctly, right? 1 2337032 rs1129171 C T,<NON_REF> 480.77. BaseQRankSum=0.218;ClippingRankSum=0.103;DB;DP=45;MLEAC=1,0;MLEAF=0.500,0.00;MQ=60.00;MQ0=0;MQRankSum=-1.344;ReadPosRankSum=1.046 GT:AD:DP:GQ:PL:SB 0/1:19,26,0:45:99:509,0,330,565,407,97 2:9,10,13,13
I think we should return something like "element with name"
@cvrebert let's use static imports
do we need to sleep(1000) here? can we make this test sequence more deterministic rather than depending on time, to reduce flakiness?
nit: this can be private.
You may want to allow this to be a Id that is already set on the Id.
should be renamed to show that we are not adding a forgotten instance of the UI.
This is certainly wrong. You should probably output something and pass that along.
This method makes a huge assumption that the user invoked the command as "-option value arg" when really they can also say -- that stops option parsing.
Maybe we could replace both two lines with NLS.str("tabs.smali"); with NLS.str("tabs.smali");
style nit: no braces
If the interpreterGroups list is empty, it doesn't mean that we called EPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CHECK_INTERVAL);
code formatter missing? At least there should be a space before the curly bracket and you have a lot of tabs in here...
The logic is in ServersInfoExtractor. So it is better to extract this logic into a static method.
I think it is better to return an empty collection instead of null.
suggestion throw new ExternallyManagedException("Result group: " + resultGroup + " is externally managed!");
If this is not the thread, I would prefer to throw an InterruptedException.
I would suggest that qualifier gets already non-null for the default values.
I think this should be a java.lang.String. Also, it appears that we might want to use isEmpty() in case of a value e.g. -1 for state, or -1 for limit.
I'm not sure about this one. The configuration is not stored in the cache, it's not necessarily a hole.
please use more descriptive names here.
Do you want to be swallowing this? Don't we want to be logging the exception if we are throwing?
This looks like a bad condition to me: makes the code throw an exception if the default case is missing. Do we want to check this? or is this handled by the default case?
Any reason to handle this?
You should check isDelete()
Can we use already-defined constants for the following three strings?
This will throw an exception if the logger is not found.
This line is not needed. Remove it.
relevant non-logging code change here
I suggest to move this method after prepareServiceRoles(sess) only. So if method is changed, we can get impact of this file on the next moment.
For loops inside of other method I think you could use splitForColumn() here as well.
Seems like this will return "null" for the toString() method.
duplicate code
can be a RuntimeException here
nit: Change.equals to.equals.
Since this block is repeated in above, shall we move it to a separate private method?
I would recommend using AssertJ's assertNotNull() here instead of the asserts. In my opinion it's better to leave the assertion error message in case it fails to give a descriptive message in case of failure.
Please remove the debugging output
@gianm Looks like this is in-line, since we are returning null in getScheduledArrivalInfo() - maybe we should return an Optional instead of returning null?
.take(limit) is the default in RxJava, limit is an alias (but in ReactiveX world, the normal term is take, so lets use that)
When an empty list is returned, it has a name that is just the empty value.
could you remove the tab and use spaces for indents?
Please introduce custom error message (<LINK_0>
Can we just use builder for this?
Any reason not to use this at all?
ditto :)
We already have a private utility method somewhere, but we should make this method private. We will not need to modify it in the future.
Shouldn't that be UNKNOWN for GlusterStatus?
This may be OK in this circumstance, but there's a restriction on the implementation type. Is there any chance this restriction will be violated in this code as a surprise?
Suggest "false" if we're not using anything else, right?
buffer size 1, why?
Please, use try with resources and avoid explicit close()
The AllCleanRule should do the work of lines 158..159, so you can skip this code.
you could merge this to 1 line above
Minor thing: "referer!= null"
can this use increment util?
use new names?
Do we want to turn this on by default?
I think you could make the path path configurable.
Not sure why you don't use ctx.client.reloadIfRequired() here, like this: java if (replaceExisting) { //... }
please throw an exception instead of returning value
does this test throw an exception?
Curious why we should have a separate DASH than preferIPv4Stack?
an option in a follow up PR would be to avoid this
You can inline this variable: state.getSumC() == 0? 0 : state.getSumC()
This duplicates the previous one?
this check is ok, because we some piece of data structures that have the same piece of code there.
nit: just simplify to throws Exception
Add stream id to exception message, so it is easier to debug
This should come from the DataSegmentInfo cache, and instead we should do a assembled table to get all the CF map associated with an HColumnFamily properties.
plz format this if only one if.
Why this get deleted? Your code depends on this function?
ping
typo. previous constructor?
These is not used anywhere. You probably don't need to pass the string as an argument to this method.
this is not needed if you already returned a task so it would be better to just call addPendingTask(taskRunnerWorkItem) and return it inside addPendingTask
Should we check that the StarlarkData contains the StarlarkData?
better to do this in the loop instead of using index
Seems like you can re-use the same code.
Maybe this should be: final DWORD result = new DWORD(privileges.size()); final DWORD stats = new DWORD(FILE_GENERIC_READ);... The test could be less verbose, until the call to CBUtil.formatMessage(W32Errors.HRESULT_FROM_WIN32(Kernel32.INSTANCE.GetLastError())));
s/x-xsrf-token/application/x-xsrf-token/application/json
This is kinda a duplicate, as it can be misleading.
I think it would be more readable if you use Preconditions.checkNotNull(rs, "ResultSet should not be null when iterating");
I suggest to call this method "availableSizeBytes"
Looks correct. I think you can just do result[1] |= (shard() << 6) & 0xFF << 6) & 0xFF);
Is there any purpose to check for null, rather than accessing it on the client?
Should the API be new WebTarget(secret). It's currently a test, but in a case like createSecretResponse() throws an exception, would be nice to have a test that fails with a status code.
If this vector is constant, it would be a good idea to create only one instance of this file to create only one instance of this file.
When we get here, we're going to have a race condition because of above. This should be synchronized
@bxf12315 if you're including SECOND_EVENT_ID, you could even change this assertion to EventsTestHelper.HOST_NAME?
if we fail here we have a stale VM version in hand. we should roleback
This is a bad idea with the hard length. How about making the method DIRECT_REPLY_ERROR as a constant with the int value?
@garydgregory I think this can be the default byte length of the entity.getContent() above, but the check for null is not necessary.
move to channel close()
Since we are new ArrayList<T>s in Java, I think we can replace this new ArrayList<>(cachedPostMatch).
This change is now wrong. The project name is built using a project name that contains the name. I think this is fine for me.
Assertj has a fluent API. You have to do assert.
Can we use method.getModifiers() here instead of TYPE_LIBRARY?
nit: newline
I think we shouldn't just catch and silently ignore? Would be nice if we could somehow alert that there is a malformed URL.
If you are returning an empty map when the key is null, you should return an empty one.
We should not just assert the exception and not the expectedCurlHeaders. It might be better to set the protocol and not the exception itself.
Ye, but it causes a PMD warning.. :P I will fix it, that will be easier. ;) <review, layout
Can we simplify the if statement?
Can you break this long line?
Needs to be unboxed
Please remove this retry variable.
Consider changing to a constant
I think that this should be in an else clause.
This needs to be changed for every ldi ldi
why not to use file.getCanonicalPath() here?
Overall the method name looks a bit weird, can we use Config.TOPOLOGY_TASKS instead?
Check args?
Maybe we could make this a method to append to a file and if the file isn't available, and if it returns -1 then the resulting file can point to the caller, and this way no need to check for empty bytes anymore
suggestion String messageDTO = new MessageDTO("1", "1", "Title", "Test Body"); Source<JsonNode,?> in = Sink.foreach(obj -> {
Could this be merged with my logic below?
@mackaypeter When constructing the SmsSender, having the constructor take a Continuation argument and an instance method would be nice. Can you rename the method to something like setCampaignToken(SmsSender) or something along those lines?
Missed it for the change - it looks like the action is taken care of by the framework
Since this will appear on client side, my only concern is the date format that may not match what is expected by the user. Also, for the UI this is just a string to be rendered, no further logic since no further information is provided (e.g. type or format).
same, can be a last statement
pls change to: for (int i = 0; i < stackFrame.length; ++i) {
Typo.
Maybe a test for Lalls of the cases for logging instead of logging _value_.
I think we can use TestUtils.assertResult
nit: throw new PrestoException(NOT_SUPPORTED, "map key cannot be indeterminate: " + e);
Is this still required?
How about adding a new code to the existing "setNull" and argNull like this: java boolean argNull = args.length > 1 && args[1] == null;
nit: if diff > 0 &&!diff > 0) {
After that it's a matter of personal preference, I'd say it's >=1 instead of >=1.
I would suggest to change these to if (authType == null || authType.equals("auth_type_email")) here. It would be more consistent with the rest of the code.
Could be replaced by _this::replaceSubRelation_
boolean includeTextDetails = true; and send that value in the call below.
nit: we can just do java if (conf.getBoolean(ParquetInputFormat.SPLIT_FILES, true)) {... }
We should not be hard coding this path. How about adding a method like getMaxPath()?
seems like all these extract to a method
Do not return null; also, add the username and password out of the if/else.
Not sure about this. Arrays.deepEquals will compare elements in order. However, this is redundant as Arrays.deepEquals will compare elements in order.
The logic should be inside Converters.convert() since we can get rid of the Converters.convert() method.
Why is this _compressed strings? Should not be to constant.
We shouldn't need separate methods for create/update like this. Do what we can in one, pull the unique bits back into the callers for the rest.
Could you please log the transaction ID here, instead of the entire transaction?
I think this is a bit too abstract, would be useful
@danielezonca I don't understand this.
'resetValue(Double.NaN);' is redundant.
Same here with not needing the local variable.
invert
Would it be a good idea to set a final variable for a set?
We should not log and throw. Exception is too specific.
Same again with the log level, can you set this to w? Also can you change that message to something like "couldn't list font assets from %s" so it's less ambiguous, it's not really failing to load fonts if you get me!
Nitpick: might be better to use constants for these.
This seems unnecessary. What advantage is there here versus before? Both guarantee the order is respected.
Wouldn't it be better to detect the lastConsumedOffset < endOffsets?
Move this line down. We don't need to instantiate a new object if it's not an IContainer.
We should update the message slightly here. Maybe something like "The data schema should never be reached."
We can drop this System.out.println()
is it easier to use constant instead of using magic numbers?
If we move MessageTest to the internet package (and rename it to MimeMessageTest, which is what it is), these can be package-local. Also please annotate @VisibleForTesting
What about using a boolean as the first check?
As I understand the intention, if we catch Throwable the same exception is thrown, we know that the catch block is a dead code path. In that case, the Throwable will be re-thrown as a cause and then catch-chain is visible. This can be fixed by: java } catch (final ExecutionException e) { throw new InconsistentStateException("Unexpected error occurred when getting subscription time lag", e); }
Same as above, try to simplify this by adding a method to the first pass the point and then doing the subsequent check.
This can be handled by waitForRunningTaskToComplete accepting a callback function to be executed that can contain the following code.
Should we check that the branch state is nil if the branch state is not null?
Missing "assertEquals"
- please, move this check to a io.airlift.MarshallUtil class, so that it will be easier to unit test.
Are you sure this StrictMode.setResources() is a better name for a service?
Don't call ConfigConfig.getConfig() twice.
java val response = BucketResolver.constructBucketName(bucketName, i);
This seems really weird. What about ensuring the failure occurs? For example, if we call exec.execute(new Op() { @Override public void attempt(Connection cnx) throws Exception {
java switch (id) { case DIALOG_SHORT_WAIT: // default to 'true' }
Can we return the challengeFuture, if there was an error caused by request.
this is not the job of the BuildThread. There is no need to know whether this is the job's view.
This should be called before super.onBind() in case of 'AbstractErrataListModel'.
Shouldn't this be an int?
Worth adding the FIXME here to check that the params are not null?
Should we also log to prevent double log statements?
Just stuff all this logic in "selectMarketingInsightToGenerate" so you have no if statement. Then the case statement just has return pickRandomInsightCategory(marketingInsightPool, marketingSeenCategories, random);
What if the save is false?
Hasn't the code under 'else' block be removed?
Second parameter of Status is the pluginId. Why to pass path here?
I think it is better to move this into PAResourceManagerProperties.RM_TOPOLOGY_DISTANCE_ENABLED.getValueAsBoolean()
why do we need to change the order of the parameters? can u move the initialization of the VolumeContainerCommand and from the snapshot to parent command?
Maybe refactor this block to be a private method?
Because there's only one column in the schema, you can use SchemaBuilder.create().
I think the check should be moved into the separate function, not just the validation if the order is not null
May we detail the logger message a lit like > error in cache flow trigger <PojrectName_FlowName> in Quartz,
This is the only place where the reference is of the identifier. I tend to think that we could better remove this
Why is setoomRatioInternal() being called from setoomRatioInternal()?
this is a little hard to read
Can we simplify this logic?
> Can you use try-with-resources to ensure this is properly closed?
:ant: Deserves a functional test.
I would prefer if we would want to stick to throwing an exception if the page is not present and trim() the content and just return null.
would this still full fill the smooth transition path without checking the predicate?
Remove System.out.println
You can put a check of File.exists() here before creating the directory.
Please move this code to a Handler class and have a default method to get the subject from all environment rules.
I'd choose to check for a static_BROKER_CONFIG.id here.
why not check for the EMFFormsDatabinding first?
Is there a possibility that jetty.home is not empty, but jetty.base is? In that case, jetty.base will be left empty.
Hardcode the error handler to accept in these cases.
This will change the discovering of the exception to "The current implementation uses 'this.toProcess' but there is no reason to go so many times. I would suggest to create an internal copy of the DiscoveryRequest and use it in the constructor instead of in this class.
Maybe we could make the strings a constant?
using ConcurrentUtils.withLock()
@rohitsoni77 suggestion if (_metrics.size()!= sizeJVMMetrics){ _metrics.clear(); }
You can use a foreach loop of the form for(BibEntry entry : entries).
This block is a bit convoluted. Do you think it would be better to move it inside the if block?
We can use final here.
The key should be renamed to something like "data"?
Use the correct formatting to match in [i].
Can we change this to something like: java if (future!= null && future.channel().isOpen()) { future.channel.closeFuture(); } The same applies to the other handlers as well.
I think we should _not_ do this here. (for a reason, we need to be changing it to use from inside the base class)
Reduce the complexity of this on the warning and just say: LOGGER.debug("Fetching promise: {}", key, e);
I think the following is more readable if we put the if around the while clause that is outside the try/catch.
we tend to like initialization like this: final boolean left = false; final boolean nomatch = true; if (cond) { left = null; } This make very clear when a is set to null;
This is more efficiently stored as: java if (bean instanceof Transformation<Bean<?>>) {
Shall keep this declaration as before
may be a good idea to be more defensive: (existingDonation.getTestBatch()!= null && existingDonation.getTestBatch().getStatus()!= null &&!existingDonation.getTestBatch().getStatus().equals(TestBatchStatus.OPEN))
same question about this change
See above about title, description, and active parameters.
Ah, yes, I understand why this is used? It is only available for numReplicas and the first partition.
How sure are you that these values were null, even before the rest call?
Also include the values here?
Wrap in try-catch to allow the error flow to be visible for the user.
I think all of this is needed and will not execute the thread.
I think it is better to put the logging of the function to the startKerberosLogin() method.
workerMetrics.getTable(inputTableId) can be final.
this should be the last thing after the error log
What does this test actually buys us anything?
Should this happen in the transaction state? If so, then the consumer.pause() call should be on the queue size. (also we don't need to check for CLOSED, but "false"?)
i think this should be moved to the inner class?
Probably better to name the cookie in _http_
Should also handle the case where currentBatch.size() <= deleteBatchSize).
Please'm not sure what's best to use 'POST'
The same about PERUNADMIN and VOOBSERVER role. We should have authorization checks for all servers in same group.
Cast to double[] to avoid compilation errors.
Should this be caught/unwrapped?
missing null check?
You could probably move this line to a new line which will make the substitution more clear.
Not needed?
why this kind of exception is thrown?
Just make this an int and use getOrDefault? int physicalSlotId = slotMapping.getOrDefault(mSlotId, -1); if (physicalSlotId!= -1) { // for loop }
.collect(Collectors.toList())
If there is a location, should we just use location?
I'm a bit confused by this line.. why is this private?
category
shouldn't need the throws declaration?
I don't think these checks are required - the NullPointerException will be thrown down the chain anyway?
I believe this delay should be performed only once.
This seems to be wrong. If the user is back to the screen to display the button, they should still be notified about it.
Can we not use ArrayList<> here?
Should be externalized.
is 500 seconds a retry strategy?
We could rename getClass() to something like "processorName" or something similar.
If it's not correct, this test will pass even if: SingleColumnValueFilter filter = new SingleColumnValueFilter(COLUMN_FAMILY, qualifier1, value2)
If value.getSum() returns an int, this check should be done no need to check overflow variable.
I think you are starting to use.m(s) for this, as it might work.
Wrap in try-with-resources
In this case I don't think it matters, but I think in general as we write new tests with operations we shouldn't use the constants. It's mainly a regression check to ensure the operation names don't change in the constant value.......though I should probably bring this up on wildfly-dev and not this PR :)
I think we want to log the exception here.
The name of this function is not set as a member of the parent class.
I would prefer to make the test read more as expected, i.e., the only change that is to make sure that a specific sql is expected should be used.
It is not clear which is the exception message here. Add a note to the log.
Isn't it a RuntimeException?
This should be done using a progress dialog instead of showing the entire activity as loading.
Let's use BooleanUtils.parseLocale(context) here.
The semi-colon is unnecessary. :)
This returns a body of the above method, which makes the tests easier to read.
vector.info -> application constants
"{{..}:{}" may be more readable as well.
The contexts is only relevant to the pipeline, true or false. We should add a check for WORKFLOW_CONFIG_MAP.name() method.
check if any roles has role "a" and we can save a couple of lines
There is a potential bug here. The app is destroyed in the background and non-empty text. We are allowed to use the R.color.grey_lighter_name preference. This is a larger patch.
nit: missing space after )
After all, the test has deleted the test already. So, it is not necessary to worry about that.
The idea here is "Incompatible schema between master and not Master" because you could avoid these types of problems. Could you add a constructor that takes "Master" parameter, and make it more specific? Then the diff would be more robust.
set a flag here saying : atleastoneunsetevent
Please use KPaths.makePath(SERVICES_FORMAT, entry.getKey()) instead of KPaths.makePath(servicePath, upstream).
Sorry, this should probably be something that actually gets broken. The test should fail with an exception saying that the test was failing.
Line is longer than 120 characters (here and below)
any specific reason we have to use FormulaClassName here?
no need for the cast here
Looks like this is wrong.
going to incorrect here, too, if a request comes back from the site it has been entered the right way to request the link to the user.
please have a test with if (Objects.isNull(includedElement.getLink().getUri())
![MAJOR](<LINK_1> 'Severity: MAJOR') Remove this call from a constructor to the overridable "addTask" method. [![rule](<LINK_2>](<LINK_0>
This causes the test to fail if you have to use taskScheduler.test() to see the expected exception.
add whitespace to coalesces on same line
Can't we use n.isEmpty(n)?
Does it have to be the same reference or an isomorphic body?
I am sure that this first part is an exact copy, but as you mentioned below, it would be nice to use equals() on the file, and then check if the read was "null" afterwards.
please reduce to debug or trace level. like logger.info("Discovery package sent!" + responsePacket.getAddress() + ":" + responsePacket.getPort());
Could we somehow add the table name? So the exception could be more informative, right?
Can we please mock the Future?
I'm not sure how we should handle this; I was thinking about the constructor using the factory and the constructor(s) in the constructor. The factory may not be really useful, as we do now could have a single factory method in the new classes. I would go for the factory methods to have them.
We're no longer using the IncrementalIdGenerator strings. No need to use its own strings, please use a proper i18n.
Please remove extra semicolon.
Does this English ever change? If it's not, it'd be good to use the word "look for MPI site id..." instead.
suggestion while (length > 0) {
Curious why you needed to set the volatile flag?
Setting the style isn't needed for this component as this is the default already.
minor: can you put the "{" up a line?
You should also lazily check the exclusion and group names when exclusion is not provided, as it will slightly improve performance when calling the rule on multiple files during analysis.
Use of this.getClass().getName
> if (networkExtras!= null) {
Also verify that the response comes back.
Shouldn't you create a method in the RuleSetFactory#wrapExternalEntry()? I don't think it needs to be called with data write operations.
I might have missed this in the description, but in a separate addMember method, it seems like we're going to allow to also provide the existing member name, perhaps it's not to to just provide a helpful error message.
Remove this.
It would be nice to have the user type name and the password in the error message.
Can you make these 5 Log.w(TAG, "AuthenticationActivity was not closed")
null check?
instead of a magic number, can you rename the variable to failureFuture?
This method should be used to construct the list, not to it.
As a reply to your TODO in line #126- Seems that your code ("moveMacsFromOldMacPoolToNewOne();") should be moved to line 92. And should be in the same transaction with "getStoragePoolDao().updatePartial(getStoragePool());". Line 91 includes the update of the dc mac pool. So in case of a failure (crashing of the engine for example) after the mac pool update and before moving the macs to the new pool, the dc will be in inconsistent state and needs to be reverted.
Can use slf4j instead of string concatenation here
0 is the default value for an int field. We do not make assignments to default values in constructors.
Did you mean to keep this magic number?
Why is this method protected?
return platformLoginAPI.login(System.getProperty("org.bonitasoft.platform.username", System.getProperty("org.bonitasoft.platform.password"));
Maybe we could use a Redis pipe here as well.
Should be t!= OGC0,.TYPE
Why not just use getVersion() from the native container? There is no point in making a cache.
No need for final
Since getArguments() is mutable, the map might be modified, which makes sense to me.
I think that this test must wait for the page to be cancelled.
I'd use output.format here: throw new CredentialNotFoundException("Credentials '"+credentialsId+"' is of type '"+ credentialsId+"' is of type '"+ credentialsId+"'.");
Is this line removed by mistake?
I think we should add "host" to MemoryUsersRepository, right?
This variable should be declared inside the loop, because it is not used anywhere else.
File.separator
Curious for my understanding - I'm assuming you are not using the downloadedDateTimeMap in this method. If you are _not_ using the downloaded one, the variable will be updated in the middle of the loop.
... and this one
Why we need to add this special handling?
where does this get used?
Don't use builder, this could be final by using
why? just don't set _vds, and if _vds is null then do not enforce. I think we talked about this. Always use the engine interfaces.
Can you remove "MOBS" and use "Util.close" as part of the rest of the codebase?
Can you extract that part of the try-with-resources block?
rename to fileName, obj
Why not use model?
UUID.fromString can throw IllegalArgumentException. There's no reason that we should be attempting to convert the correlation id from the server since there's no reason that it has to be a string. That's not a bug that you introduced, but removing the catch all exceptions clause will allow a new, potentially app crashing failure mode that didn't exist before. Your change is correct. But now we should deal with the failure mode that shouldn't have been there in the first place.
if you're doing a log and throw as you expect to have errors in this code path, a variable with the same name as the other variables.
:ant: We may have a race condition here. if there's an error then we should try to migrate a file with the source store.
How about adding a break; after the partition is full?
Should be Reflections.getAllConfig() to get the Disk Type.
why final variable? :-)
folder.listFiles() will return empty array if no files in the directory. We do not need to do a null check here since folder.listFiles() will return empty array if no files in the directory.
This should be something else.
If possible, it should be null. We have a possible NPE here
It seems we don't need to check for null before calling equals.
Should we make this intermediate commit point *configurable*? I'm hoping committing every 10,000 is a sane default, but just wondering out loud if it's worth making this a configuration setting.
try/catch
Is it better to assert that it's not equal to the expected value?
you can use " progress.newChild()" here
should we check for this value, or does it (MPEG_4 interned) instead of MPEG_4?
Consider making it private.
This should be used when the result is used, I think
suggestion logger.warn("Could not add {} with key '{}': {}", element.getClass().getSimpleName(), uid, ex.getMessage(), ex);
@cvrebert let's inline this one
>.subscribe(unused -> {
Please remove, I think is an improvement in the file [{ method (which was a read-only version of the data).
Any reason to add a line when the partition >= 0? Otherwise, when it is equal to the initial capacity, the byte stream will be lost.
Some left overs..? :)
This should be moved to the blockBlobClient (right before the transferTo). Otherwise it will just log the exception and rather than throw it.
@jglick In this case IMO it's better to log the exception too.
deadlocked_monitor would be more typical. I'd suggest expanding the help a bit too so users will get idea of the difference between these two metrics.
Why did you add this to the constructor?
Use an empty map instead of null, as it's the header.
The "if" block should be inside the "if" block.
Consider using getClass().getSimpleName() instead of this
could use the same log format as in the other log statements.
Whitespace
Change to: if ((operation instanceof CreateGraphicEditPartOperation) && (diagramType == null || diagramType.equals(currentDiagramType))) { return false; }
This could be changed to StreamOptions.fromView(TableRegistry.getFullyQualifiedTableName(namespace, tableSchema, startAddress), or something along those lines.
SegmentLoadingException is specifically checked for in a few places that treat it differently from a generic runtime exception. Please keep it.
Can you add the head to the log message? So the entire block will be receiving or send error content?
This method is not used.
Code style: try { SimpleFeatureWriter w = new DefaultTransaction(); } catch (Exception ex) { }
This is not very important, but I think this is just a debug statement.
I think, the case where template was null, but the model entity is not in the backend. This case should be removed and should be written as: if (entity.getId()!= null) { model.setDescription(entity.getDescription()); }
it is not reasonable to ask the KeeperException code for the original cause. We need to allow retry even if it is not a leader error.
This is not directly related to the information, the Bundle bookmarker should be logged as well instead of the hard-coded +
You can use aliases = ImmutableList.<String>builder().add(getChecksumAlias(column)).map(field -> getChecksumAlias(column, field)).collect(Collectors.toList());
again IBM-specific i would go with "IBM specific"
What is this else branch for?
Could be simplified to: suggestion final Quaterniond.fromPrimitiveType(sionType.BIT_SIE, rotation.get()).orElse(Returner.getLocation().getPosition());
You could simplify this by calling setMustExist(true) here.
Is there a way to check if the definithement is not null?
Do we still need to check the non-null value?
I think it would be better to check for [months](<LINK_0> and throw an exception if the user does not want to contact from ISO.
Can we make this a compactEntryLog method?
I think this should be 'else' rather than 'if'
Space after the cast?
It looks like there's a problem here, that will trigger this method.
We only have to iterate over the values. I can think of something like "myAudiUtils.isEmpty()".
please check if getDbUser is null.
Since we already have a mechanism to access it from the cache, I think we should remove it from the server thread too.
I don't think it's required to update the host_uuid here. It should be biosInfo.getDdsStaticDao()
If we decide to modify the message, I think it is better to extract here: "Name must be specified"
This is a bit too complex to understand. I'd like to avoid having to trim the input in the listener, and having it split up the output.
There's no need to create a local variable for this.
return missing
Yes, I think it is better to declare check for negative values before simply checking (diff > 0), as the maxItemsBeforeRefresh is always negative.
Is it sufficient not to compare getId() because TrackInfo#equals already considers mId? (ditto for others)
Would it be better if this method's saveVisitWithId() only once?
You need to check that the contents of the file are the same as the expected one.
Does this need to be public?
nit: can remove final here and other examples.
Can you please add curly braces for the if statement on line 951?
add a log line here, or maybe log it as a debug log.
we don't use braces around single line blocks
The old code was to revert these fixes, but we should really fix that.
May be you can give a more widespelling: throw new IOException(String.format("Error occurred while closing BufferedReader"));
Is that method needed?
removed
suggestion.map(bibFile -> bibString.endsWith(BIB_EXT)).map(bibFile -> bibFile.toFile().exists()).map(bibFile -> bibFile.toFile().exists()).collect(Collectors.toList());
I'd suggest extracting it to a class field since it's repeated in many places.
Shouldn't the above line be moved to cacheManager.getCache(name);?
Minor: have you seen a constant for "Offending token"
I would name this static. It's just being used for the JobGraph, but it's larey enough for logging of the class. It was created as a class variable (say, to being passed to it as is).
I think this can be done without'serverVariablesObject' local variable.
Probably, there is something wrong with idenations.
I always thought this was the original behaviour. The thread pool was based on the metrics's thread pool. So it should be able to request a simple "return" - but this way the thread pool should be aware only if thread pool updated the metrics was successful.
This and the other modified test can be removed?
Don't forget to remove the System.out
This cast is redundant. You can get the rocIn >> 24 and rocIn < 0
you should use a system.out.println() instead. This should be logged only once and only once in the method.
Nit: Unnecessary catch blocks.
Another or more readable: assertEquals(parameterSet.inputTimeString, parameterSet.inputTimeString);
code style: could be extracted into a method because it's very hard to read.
This entire method is redundant. What you should do is implement updarteAllInBatch(Collection<T>) in MassOperationGenericDAO in a similar fashion to updateAll(Collection<T>) and then call it from there. There's no point in having this type of method in all the DAOs.
not sure if this is a good idea. The zero copy pasts the size of bytesLeft and bytesLeft will be used for file uploads.
use isEmpty() instead of get(0)
Remove this line.
This is the actual fix. The bug was correct as managementRegistry.pushServerEntityNotification(serverStoreBinding, EHCACHE_SERVER_STORE_CREATED.name()); but it would be good to have a refresh before you made the client mistake.
please use the HOSTED_ENGINE_SD_NOT_ACTIVE log in the log.info the Hosted Engine VM.
It's better to use local variable here instead of breaking out into two cases.
lock is present?
Should be extracted to a method.
Pull this uri logic out into a separate method and then call it from these methods
This should throw a exception, something like verify(clientSupplier, times((numberOfExecutions / EXCEPTION_COUNT_BEFORE_REFRESH + 1)).get();
Hello @mcimbora I believe the changes and the approach is good, but the invocation to the ValidatonService and this logic here should go in the Presenter
should we assert that this value will never be positive?
suggestion.withObj("cardholder_name", "PayMc").withHttpHeaders("request-name", is(value))
It's better to name the variable name to "getDecimalScale" so that the name does not match
Not sure. I think this can happen.
nitpick: wouldn't it be easier to just use the KuzzleRoleAdapter.class.isInstance(result) method?
anyway we are doing this for every user of the repository. Is that possible to do it? Because if it is not, then we should do that as part of the new check.
nit: I'd add a cast to Optional to avoid having to go this way over.
you are passing'rebalanceStatusEntity' to'rebalanceStatusEntity' here
nit: remove this line
Why do we need this test?
This is not needed and should be handled in the interface, no?
As before, it would be nice to not expose the class type. I think we should use the connection interface here.
Check source data. And same for below.
I feel like the previous code was better, since we still create a new map for our own internal data structure. What does the new code fix? We could change this code a little bit to be something like: if (parameters!= null) { glueParameters = glueParameters; }
Do we want to create the schema for this in the new APIs? This way, if it's not possible, this method is called by the "validateRequestAndReturnStudy()" method.
This is bound to a non-null Buffer in the frame, so leave it set to the current time.
This should be changed in the QUERY_LOGGER.buildSearch() method.
try to exploit map and co for this method
Looks to me like it was left from debugging. On my machine there is it
This test happens in many cases, we don't have, so we should ensure it's the same.
why not just pass the NUM_HEADLINES configurable with a default?
Please add the permission needed => "Requires 'Administer' permission on the specified project"
assertThat(x).hasSize(2);
Would it be hard to track the user of the filters by their identifier?
See the else you introduce local variables for channelName and publishCount
I think we should rather handle the case where the deployment spec is not null and CLUSTER is not available.
Why do we need to check this?
Add this logic to not be in it.
I would prefer to take the opportunity to update the GeoServer model to support this.
This appears to be unused.
Why use getEventKey() and not getName()?
Why is only a remote lock? I know right now we don't actually need the lock.
wouldn't this method always return false?
Just try to write this instead: NucleusObjectNotFoundException nfe = Util.log(String.format("No " + clazz.getCanonicalName() + " found: " + clazz.getName());
Can you simplify this assertion by using a assertTrue(alleles.isEmpty())? then you'll have a nicer error message.
If you're pulling out the extra code, it should be included a call to the above method, and it's not just a nullstatement. There's also no need for the.equals() statement.
should it be internationalized like others buttons?
I am still confused why this is a public method, while it's probably only used here. Why is it made public?
Is there an easy way to make this a bit simpler? I think you could use replaceAll to match the regex, and then replace here with: java String deckName = modelNameInput.getText().replaceAll("[\'\"\\n\\r\\[\\](modelNameInput.getText().length());
Is there any reason why we use BAD_REQUEST instead of BAD_REQUEST?
Why not using an injected TestingDispatcherGateway for the test case?
I think we should handle this case in the same way as we did for the baseQuality depth.
the set of dataSizePerContainer is not used.
I think you can use mRemoteJpSettings.serveImagesFromOurServers here instead of mRemoteJpSettings.serveImagesFromOurServers
Rather than use this, I think you could just just call Screen.getPrimary()...
nit: this might look nicer if we collapse the code into a single line.
Why did we switch to throw BadRequestException?
Also wondering why this condition is always false?
Can we use TemporaryFuture instead?
Pattern.compile should be done once in a private final field
I think we can copy paste this method from the linkstatic branch.
Aren't you just supposed to remove the deprecated annotation and not change the method code? Because it was already delegating to the the DefaultComparator anyways, i think this deprecation was invalid
would you want to change the isFragmentActive method name to isFragmentActive(SurveyFragment)?
It looks like you're missing the level of log message here.
This is a bit strange, because you are copying the value from an array to a String, not the identifier, you're splitting it into two lines above.
Use Cubes.size
Another option would be to check if sTargetInitialized is not null. If we give a Throwable, the cameraX will always be non-null, so there's no need to return a new future.
Please use the method instead of the method both here and the method instead of doing the same thing.
For this kind of thing, I'd prefer that the conditionals are handled in a "crash" button, and in the "cancel button" button by default, in the button by default, the button will be paused and the state is all handled in the progress bar dialog.
suggestion LOGGER.error("Cannot delete container (" + container.getPath() + ".shortcuts.reader\");
Please use the java7 template to retrieve the Class and pass it to the constructor.
I would add a private method that returns the privateDnsRouteSet to indicate that it is a valid sign in there. Then you could add private methods in Log and call them from here.
Doesn't this now need to be @Nullable?
Oh, so the number of iterations actually includes the first try as well.
Is this in preparation for multiple-tick operations? I don't see how this would ever be false, there's no break for the outer if statement.
we could use a constant for i.e. 1000L
No need to add the type check.
Does this line have to be too long?
Please remove as this is related to the fix required in #6610
assertThat(statistics).hasOnlyKeys("keyA", "keyB");
Similarly, can you make this part of the equals() method to make it consistent with the rest of the codebase?
You need to make sure that it works on Windows using the CI plugin.
OPEN_PET_FACTS = 6; is the name of the product.
don't need both of these lines...
style nit: we don't use braces around singleStep, more below
We don't need to log this here. If we log, we can consider using {} instead of string concatenation.
final
Multiple space before {
I would prefer you use here the representation of the widget type.
Not sure if you can modify this method anymore. The reason is that there is no check on BL than the new user is passed. @gaunun can you create a new user with ponsored and check if it is removed?
Remove the redundant log.
Same question here, if the resource is a reservation resource then the value is the same as the resource?
same here, just return here.
Again, "owningCommunity" isn't a concept in DSpace. These variables (in this method) and this error should be renamed to say something like "parentCommunity" instead.
Same here, this line is too long
This is a catch for ClassCastException. Try to declare such that if it's an Exception, you don't have to catch it.
rename to fDirToLook or at least fFileName
"Fatal Error".equals(matcher.group(3)) is clearer.
does it mean we should remove one of them?
I'm wondering whether it's better to catch a specific exception type here.
This is not a temporary file, can you change this to assertThat("ogrgeojson_8b0dc300.prj", true);
change the session status here.
ERROR->NOT_FOUND.
This check should be added to the GridQueryConfig#timeComparator. The cases where we have less than one result in the GridQueryConfig.CTX_KEY_PUSH_DOWN_LIMIT, and we have two cases of the same behavior.
You could use keyBuffer.remaining() here.
the principalRecords is not a parameter of the method. It's initialized in the constructor, and it should be closed here.
I like the approach of throwing an exception, in case case we could add support for it. It would be safer to explicitly throw an exception, e.g. NullPointerException. Some other code (e.g. NPE) could be thrown.
I don't think this is necessary. If an exception is thrown from cleanupSim() it should be logged correctly, otherwise it's a fatal error.
This should probably be removed.
I wish we could move this to another method, because that would allow us to switch between a call to hangupWaitingOrBackground.
Can this be logged as an error?
this sNPs can be replaced with getEnd()
- why postSetUp isn't called from applyInlineDeployments - should we use pushInlineDeployments here? - use of deployContrib with a test contribution
Another question: would it make sense to include the path in the log message?
This check (and the one above) are going to break DEX preverification. Can you instead move these to a util class, similar to this:... if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { OreoUtils.setColorSpace(options, colorSpace); }... }.... import com.facebook.annotations.DoNotOptimize; @DoNotOptimize private static class OreoUtils { void setColorSpace(...) { options.inPreferredColorSpace =... } } }
Revert the changes here.
Can this be equal to the method parameters above?
Can you explain what your doing here? What do the following variable do: for (ILogicalExpression expression : ds, i - 1)); I ILogicalExpression typeId = expression.getTypeExpressionTypeArgument(expression, ExpressionToolbox.findAllFunctionExpressions(expression, BuiltinOperators.CHILD.filterType,ElementType.ANYELEMENT, typeId)) { references = expression.getStatus(); }
style nit: we don't use braces around single line blocks
Is it really correct to mark the method as RexCall.isItem and cast to OTHER_FUNCTION??
Unused variable
please print the value
@yingsu00 Ying, could you please add a check for isEnabled. If user is not already deleted, we should show the user what the deleted code is.
Please add a log statement.
I know this has been here before but this can easily exploited by holding normal shears or even a multi tool in your off hand and then using a normal Wind staff. It would probably be better to check if a wind staff is held in any of the two hands, you can use isItem(...) for this.
You can reuse isTimerRelatedEvent here.
I'd suggest having all these sleeps in the constructor as it was done before.
A minor grammar error is in the description: Input should not display any of the output [#Text](<LINK_0>
Static import?
"the input %s list must not contain nulls", roleName)
nit: "client"
Thissignum() shouldn't be the correct way to calculate this. The signum() should be the actual value (which I believe it should be the default).
How about use [Hasher.firstLong()](<LINK_0> which will handle the assertion?
We can verify that we have noAcl. Is it required to assert that there are noAcls returned by the addAcl?
Please do not use val in function arguments.
Is it possible to still call execute() here?
add log message
@slubwama Instead of the null check I added here, an NPE is thrown if the encounter is null
This may be an improvement.
This could be given in isCustomPage.
This should be improved by naming the method, the user knows what the retries are.
Name of this property is not good, as it is just for example not tested.
This is a bit confusing. We have to read the id and then the file is in the log message. I would suggest to add a warning with the id, and add the server id to the log.
could you also test the isInFileDefaultFileSystem
We could highlight this in the error message. this should be an WARN, and should not be a warning.
Before this change, we had the publisher as triggered by the lock on top of the queue, so if we fail to reset the state, this will be true and the ack will not be lost. Wdyt?
Why do you use this variable and not 'empty'?
I'm not sure about this here but I think we should use the equals implementation to check each of the fields. I'm not sure of the effect here since the write is handled by the AtomicTransaction equals checks.
This won't be closed.
Same question as above.
I think this could be more readable as: java long rowsPerPartition = node.getPartitionBy(); double rowsPerPartition = (symbolStatistics.getDistinctValuesCount() ==  0.0)? 0 : 1;
Should be a constant.
Same as in [L1 ](<LINK_0>
This is modifying the existing method which is modifying the existing one.
Can't find a way to avoid this duplication?
The empty builder is probably not required.
Can we set a fault with some info on the command somehow? Also, no need for the time - the log itself should contain it
style nit: missing space after 'if'
can this be moved to a method in getModel()? in this case, i can't see how this method is used.
I don't think it's useful to have the info log displayed to users.
this test is not necessary because it is annotated with @Before by @After
nit: space between ) and!
@vmaletta 6000 can be a constant in all tests
You can reduce this to a single line return monitors.stream().map(monitorName -> monitorName.replace(OLD_METAMX_PACKAGE_NAME, NEW_DRUID_PACKAGE_NAME)).collect(Collectors.toList());
Let's put requireNonNull around this.
lookup in the multimap here
Same here, I would suggest catch (Exception | Exception e) {
"Successfully wrote header" -> "Connection header"
Why didn't you add it to 'f' like the 'param name?
@Suseika hm.. looks like code duplication to me. how about this: if (this.users.containsKey(user) && this.users.get(user).equals(pwd)) { } else { }
You could provide this as a method in KoreUtil so if the logic for when to show the kodi button is centralized and not copied over 3 places.
not sure why we need this. Why not just call this from the OperationController?
shall we have try-with-resource?
This block was removed.
We should further simplify the code by removing Optional<URL> historyServerURL = historyServerURL.map(URL::toString).orElse(""); and also include the empty value in the try-catch.
same here, unpacker is not necessary. The unpacker is a byte array.
can we explicitly have a test that verifies the order of the parameters, and make sure it is the same between the actual and the URL?
Previous version checked T as well here. By the way, there is something basic I don't understand here. Since Instances table has all the TaskColumns as well, does it mean that all those values are always in sync? Shouldn't we always test both tables for those values then?
Could be simpler to do: Collections.singletonMap(key, ", "value");
can we move this to the else block block?
assertEquals(excpected, actual)
nit: you can get rid of the negation and just use takeSnapshotSync() which does same thing.
s/x/partitionKey/.
Does this get returned to the user a cause or is it just an empty string? I don't see any examples of the API that would make it worry.
how do you handle "BEGIN" here?
The original exception is just swallowed with this test.
Suggest moving the call to reset() (and return it in the if block). That way, we don't need to set the ref count again.
This logic is quite common in multiple places. Suggest extracting it as a method as it's used when calling the method.
java /** * @ tests void testThe method name * @testThe constant name in code. */ public void testAvoiding_method; * @test public void testAvoiding_method; * @test public void testAvoiding_method; * @test public void testAvoiding_method; * @test public void testAvoiding_method; * @test public void testAvoiding_method; * @test public void testAvoiding_method; * @test public void testAvoiding_method { // _test_method; // @Test public void testAvoiding_method. Applies to other test too.
We should log this properly too, no?
nit: unrelated change
Map instead of concrete type
should be mAirplaneModeObserver!= null before this
please use Cluster#hasGateway
You can avoid declaring a local variable and just return on the next line.
Style inconsistency: space after 'if'
It's better to log the size of the map, it's not important to keep this log entry for each disk.
Why not just move the line above to the end of the if statement?
Can this use a similar method to getSegment()?
If the log4j log is meant to be the standard log file, keep the internal message instead of printing to the console
The method should be private.
If you are not going to export the XML file you should add a same XML file extension to the xml file and the selection is empty.
We should use android.R.string.ok.
Missing braces.
you should set the default, i.e. make sure the row alias is also included in the select dialog, to make sure it is as table name (for example if you want to have the same, but got a warning when trying to add it).
change the name to 'network'
I think that only the tests using this class is verify() is the correct approach. So I would remove this one.
This needs to be assertEquals(String message, String expected, String actual)
This if statement is redundant.
why not replace the condition with 'getParameters().getStorageDomainId().isEmpty()'?
This is not the same as the field. Please pass all of this logic to getAttributeValue(sess, user, A_U_D_preferredMail), and use it in the method you do not need to set it to the attribute object.
can be: final Contentlet reward = new banner2 = new LanguageDataGen().nextPersisted();
Are we missing the String.format?
This could be moved into a separate method
400 errors are Bad Request errors which are usually populated as IllegalArgumentException errors.
Why ookeeperIO?
I think this would be better as: java if (queryParameters.isEmpty()) { return ""; } return queryParameters.entries().stream().map((Object) paramEntry.getKey(), String.getValue().toString()).collect(Collectors.joining("\n"));
After that line, you're asserting that olf is already closed but it's already closed. Using the same line as the next line is a great opportunity to confine this particular line, and the same here.
I believe we should catch a specific exception here.
This should be a field so it gets an instance of DfsPackFile.
The error message should use the authentication attributes from the table expiry period.
Should we check the context of the setting of the awsConfig here?
Delegate to the behavior of this and the above
why setRevFilter()?
I would use Stopwatch it is more readable and gets rid of the ternary.
Braces
lets keep this one line :-)
Typo?
I don't think it is necessary to construct a list of other nodes manually. From the original code, I would prefer to make the original method use of Util.removeAll() here.
Please add a space between if and (
remove.
We should mention the exception using the Logger (not just printing the stack).
Do we think we need to check if queueName is empty or not, instead of assuming we have a message from the queue before it has been initialized?
I'd also change the assertion to assertion.equals(taskProps.getProperty("someProperty1"), "someValue2");
If read fails, why is this always true?
I don't think it's the right place to do this.
I'd left this as-is because we don't want to have a server side response if no server is able to retrieve the error which makes the response harder to read because it's not a valid response.
shouldn't you return temp boolean here?
please implement equals() to provide debugging state information for debugging purposes.
why not check if the backup file delete succeeded?
Might be worth adding a fail() here.
@m_thing => : What is the reason for this change? Is there any way to distinguish between a Context or a sub-classes? If so, this one is fine.
+1 with the class name.
should call ch.modifyEvents() here.
how about this error message instead of e?
I don't think the variable updatedChange is needed here. atomicUpdate returns what the update method of the AtomicUpdate class returns... which here is always null.
If we are doing this it means that we will be able to read the tenant ID by system. If that's the case, we should use a generic TTL that will be injected with OAuth.
Is this really a 400 or is it a 500?
should be on /api/api
No need to make the variable final, instead of re-generating it each time.
We should have something like: assertNotEquals(connection, validUrls[i]), "Tenant ID=1");
why not set the default constructor path to NIOServerCnxnClass.forName(serverCnxnClass) (to NIOServerCnxnClass.forName(serverCnxnClass)), right?
why not use MultiValue.valuesEqual(i, expectedValues, actualValue)
ImmutableMap.of(
Would be a good idea to have a test that deleting an item into the table, deleting, and deleting items from the table.
Maybe better to create a list of available ids instead of located in the list?
Another idea. If you have a'single window data' and 'currentBatchCount' have same size. Is it possible to explicitly clear the state here?
@mbarbieri you could also make this line a method and use it in both places.
Did you mean to leave it as a String since it's always an int?
What is the reason to validate the results if the queue is empty?
I think you need to rewind the copyBuf reader's index, otherwise it might only print the part of the buffer that's unread.
What does this change do?
Use a switch statement to avoid 2 points, i.e. line 171.
Is this needed? It looks like we'll be getting rid of the single field from the session, not the token.
Is there a guarantee that the resultFilePath is an HDFS path?
since this is not initialized, better to save it to a variable
this logic should go in the HistoryButtonBuilder
Can you please add className to error message?
This is awkward as a singleton. Strongly prefer new.... In particular, it makes it possible to edit the singleton state without going through Network which makes the code harder to explore and reason about. Instead, expose a getter or, better yet, have Network offer the register methods directly and forward them internally.
the test should check the deleteIdempotencyCheckOp.
Please change this to spriteBase.move() and remove the call to setChanged().
Extract the building of the ResponseMessage to it's own variable?
This method is a java.util.Check method.
Was this supposed to be removed? I'm not sure how this code was supposed to be affected by this PR.
Do not use union() to merely set the min value. Use setMin() instead. suggestion BlockRegion region = new BlockRegion().setMin(mins.get(i)).union(max.get(i));
This should be allowed as a Set
![MAJOR](<LINK_1> 'Severity: MAJOR') Change this condition so that it does not always evaluate to "false" [![rule](<LINK_2>](<LINK_0>
Remove this try/catch and wrap with a Function<Void, Void> and let the exception be thrown.
It looks like the default case can be removed.
can be replaced by List<IMember> list = Arrays.asList(membersToPushDown);
can you explain why this check is throw?
You should be able to run.toLowerCase() in here.
won't this be package-private?
@sebing we put a space after the brackets
You're using String.format here, perhaps you should use %s?
This should be public, or @Deprecated
Why add empty string?
This throws an IOException at line 110 and be removed. The finally block is doing Utils.deleteQuietly(toFile);.
Could we get the current exception?
A knowledge of the query is not necessary here. I think we have to use target.collation.addAll(theQuery.collation); to get the suprised of the query and then do the setMeta call here.
can you please explain why to put false? the absent of property is a good marker... what is it used to?
is this conditional necessary?
Looks like you missed a space after the {
Does this need to be public?
if this is in the condition below, how about using Assert.assertTrue()
If the "filter" is not null, we can just have the predicate return quite
Would a query break here?
Don't we handle this case as well?
abbrevs is not useful.
Since this and the tumorFwdPosMedian check already have been moved down to a separate method, I think it's cleaner to have all the check in this method only have to add a new boolean flag to the option of "tumorm" to the tumorFwdPosMedian && MTAC.PIR_MEDIAN_OFFSET_KEY!= null
For readability. Same for other checks suggestion Preconditions.checkState(arguments.contains(column), "The arguments of transform function '%s' should not contain the destination column '%s'", transformFunction, column);
Why this is also done by union operator?
you can put the entire exception all over the place, so that you will prevent the stack trace from being sent to the user.
Name 'queueName' is not needed because we're not doing anything with a MessageView.
Braces
I think we should close the 'this' symbol here, but I don't think it is a good idea to use it in any case.
rename to occurrence
A view might be better to avoid the "for each" loop. It is a way to get the diagram from the model and will avoid the update of the model object, and just call canvasElementUpdatedEvent.fire(new CanvasElementUpdatedEvent(canvasHandler, node)) instead.
as above: > We do not need to check for the full statement
Please remove System.out.println from tests.
Getter should be a static variable.
@marcaurele I think this needs to be changed back to java.net.Requiring.connect(src, src);
should be 'ddf.home'
please use asGuid() instead of asGuid()
this is strange to me
@vilchik-elena Suggested implementation to avoid having to declare the list as final.
This is a bit redundant, with the call to disableMenuItems() you already have.
We should also catch the exception in case of the promotionment failure
this change is not going to be in the future?
By the way, I understand that the logic is done elsewhere, but it seems it is mostly duplicated from DefaultComparator. Can we move it to a private method?
If you removed Optional from shardDeltaMap, this check can be simplified as: java return createPageSource( context, hiveFileContext, columnNumber, columns, predicate, attributes, transactionId, columnTypes); Same for the below one.
here you may want to partition the list of blobs, as opposed to the size
Revert
one more :-)
Is it possible to merge multiple groupers together with one batch, to ensure it was <= maxDictionarySizeForCombiner? I feel like it would be worth having a method for this, like updateMergeDictionary(List<String> facet, String key) and return a List<String>.
Maybe use non-zero as parent.
This _is_ wrong with an estimation on the number of element sent to the split rules. We need to know which element it is about to be allocated and which one is not going to be used.
What is the purpose of this test? For situations where how often the slicer is called? For the client, yes, I can see the point of this test where we have something like: java /** *  Write a slicer * @param path The string to be the content type. */ public static String readLines(String path) { return getPositionCount(path.length); }
This API shouldn't be visible in the test.
I think it would be better to name it createMergeOperator, createPartitionOperator, and move the code below it to the mergeOperator.
That is confusing. On the other hand, people have two query contexts and the same one. Could we pull the result of the conversion context out into a variable, instead of passing it all in each call?
Can we at least log something if no retry is found?
I think this one needs to be unsigned
can you also append operationTimeMs?
Same as above, we should test that the result is correct.
Since you are changing the original test, I think you can use SWTBotUtils.waitForJobs() instead.
"Idf" should be a constant
Why only the view id? I would rather have the viewId as the view id. Also, I'm not a fan of the name, as it could be hard to understand what the view id is.
Could the check for null instead of!= for an empty int?
Suggest to add a retryAttempt = -1 to make it consistent with the rest of the code. So we can never get here if we add a prefix, to the log, and then throw the exception.
You should rename the all these variables to the context.
I know it is not part of this test, but we can get rid of the duplication with this one: java assertThat(copied.hasUnresolvedTypeHierarchy()).containsExactly(() -> { copied.hasUnresolvedTypeHierarchy(); List<String> copiedSpec = copied.declaredMembers().stream().map(Symbol::fullyQualifiedName).collect(Collectors.toList()); assertThat(columnName.currrentTypeHierarchy()).containsExactly(Symbol::kind); });
I think this should be made final
This log message is quite long, maybe at least include the name of the filter.
why not for(int i=0; i<2; i++) {
I understand this number of times, but did you intentionally remove it?
This is fine, but I think you could more easily use Objects.firstNonNull: java this.login = Objects.firstNonNull(Strings.emptyToNull(gitHubUser.getEmail()), author.getName());
You can return the actual type DTO type.
Do you think we should catch Throwable?
This is a constant, so we should use it in both places.
This message is not valid for getReplicas, but maybe it's not worth changing, since it's a trace message
Why is this necessary?
You don't need to pass in null..
Is there a possible race condition here where multiple threads could reach this method and then the rest of the logic is already done? I think we should introduce a common function to set the started flag of the object.
This is now unnecessary.
Can we refactor this to use a string format? parseDatestamp(String line, ParseInformation pos) is a better name.
We can pass the exception in here too.
could this be a final long mb = 1024 * 1024;?
use bindings.keySet() instead of calling getScript()
I know this is supposed to work, but I am pretty sure if we are creating an object on the end of the Parser. The next time, we can do all the checks, but let's avoid making it into the wrapped exception.
Is it possible to convert BlobProperties and userMeatadata to bytebuf first, and then use Bytebuf bufferToSend?
no need to create the variable if you get it once.
just remove this system out in the test
Do we need to check Null of the input?
Ditto.getName() comparison.
i haven't looked at all the edge cases, but can buffer.length() - offset ever be less than 0? if so, i suspect this could throw. is it worth wrapping it in a Math.max(0,...)?
> I think you can use <code>@CheckForNull</code>
The name of the parameter seems right to me. How about just calling the addObjectInstrumentation(...)?
Is this the same as the previous check?
Should it be something like the following? suggestion Set<String> pairsToFill = gson.toJson(queryPairs, new HashMap<>(source, Map.class));
If some of the functions, then we need to be able to simplify these by using the java switch(statusCode) {... } case HttpURLConnection.HTTP_FORBIDDEN || statusCode == HttpURLConnection.HTTP_AUTHORIED) { // throw the exception } This isn't more readable and doesn't make sense.
It would be much easier to follow if we leveraged utils from org.apache.commons.lang.reflect. They seem fit here perfectly :)
Isn't it better to also mark all 3 files up?
Is this not just a variable?
seems more logical to me to have a method to be called to see if this is null. I would add a null check at L160
Can we drop this?
Why do we want to keep this in the only place?
nit: we could name this class (and other places) as well
These strings need to be externalized
You're still deploying the chat messages in htsjdk, and tracking the player's heads up still works as expected. <LINK_0>
Why not just create a real ID by the test?
Could you move it to the "else" of the "if" above?
I think you want to also fire mMap instead of fing on the UI thread.
The PopupMenuAddFormHandler is about to handle the events. It could be better instead of this, but for the other cases, you could avoid the need for the [this.](<LINK_0>
Could you use ConfigurationItemMap.of("org.persistence.jtaDataSource.class") here? Or remove the new from the interface and add the new ConfigurationItemConverter.getIndexMap(String, String) method there.
Curious why you needed to set the action.setStatus() at the BackendVmsResource as well, could be a constant.
Can we remove this check and just set the list to empty list?
nit: please break this line into two
Can you keep the method order closer to the previous revision, so that the gerrit diffs can match them?
nit: extra space before ) {
This should probably be a FilePathUtils.
This doesn't seem right. If there are two possible values, it will return null. We need to check for that first.
The same RuntimeException
You could use a filter, filter, and filter to make sure that the code is indeed the same. That way you'd be able to end up with a non-zero return value.
Why not just call getRequirementName here?
1. You can put this to the setup 2. Leave the test as it is for test only. That way your test is more specific and not hard to tell what it is doing.
[minor] Please put curly braces around the if
Log the index id here, and above
Collections.emptyMap() could be used here
And here, the code is duplicated by maybeAddAdapter.
if (jsonInfo.equals("err")) {
newVm().getCommandType() == Plugged?
I would rename this variable to isCompact or isCompact to indicate that it is not compact
I suggest to try-catch instead, because the SWTBotTreeItem has an attribute and the reference is already linked.cell(1);
This is unused, so why make it?
What is the problem with catching the exception?
Could you please add a message in the exception message?
No, this method should not throw interrupted exceptions.
This should probably use Guard methods to also check for null
I would prefer to move this logic into the mbean class.
Why is this not also NODE?
By defining a encode and decode function to the Format enum itself, this switch statement can be eliminated which improves performance. Also the error handling should be improved, like e.g. catching the not-found enum.valueOf exception and turn it into a user friendly "Format 'foo' not supported" exception.
I think we could have two different different different different different properties: * inside the dmnTypeService#call and DMN. * inside the DMNEvent. It looks like we do not need to fire any events for any kind of future feature - the event could be raised by the DMNEvent.
FileNotFoundException is a subclass of IOException, so there is no need to catch it here.
Simpler proposal: registerResourceInCrossReferencer(sessionResource); It should be equivalent, but putting the adapter at the resource level instead of on one of its root elements (there can be several roots now) feels a little safer.
Separator again :-)
It is like a hack. Probably reset() would be a better choice.
Should this be moved into the method "isSecurePath()" too?
Keeping accesses to intermediate list.
@maciekberry here is missing "duplicate"
Could we use defined constants for strings, so they could be changed in test messages
remove finally {
this is a bug, but I think it should be handle both the first and the second.
Should we assert that the "bad" name is not valid?
this should not be an error, as there's no need to handle the exception
Use FileUtils.listFiles here as well?
please add the details (the bad ass what the caller is doing)
Arg may not always have a shape. We might have some place holder logic we want to put in here. At least checking for null shapes before you do this would be good.
Does this need to be final?
Wonder if this would work/read better if PDPrintStyle had the default values itself and we could just return early instead of creating new objects to make the rest of the code work properly.
when would this happen and if it happens then the window will simply have progress indication and actually nothing will happen
This line needs a colon, to make it "TypeId" lower than "TypeId" lower.
To be consistent with other flatMap operations, you could return an Iterable<Value> instead of List<Value>.
remove 'd3Creator' and just add 'new 'if' to the model.
you don't need that line, verifyTitleUrl is already included in the filePage.
I think we should put the password into a constant like this: <LINK_0>
Just a bit worried about the problem here. If the commit is OFF but the QA has been created then this line will fail. The link to the Commit on line 137 below. I would expect that: if (operation == Operation.BEGIN) { // NON-NLS-1 } The link to the above is not necessary. This is a redundant check may be in the wrong place already and it will be matched with the above line 147.
The polishing of my head wondering if we could use a different strategy than the [whitespace-ignoring diff](<LINK_0> (and perhaps the unit tests).
@pynicolas Can you please use org.sonar.api.rules.RuleParamDto instead of List<RuleParamDto>?
why was this removed?
This may be more readable with a single call to the non-null method.
you can move this else block to where you have it in the if
Add an assertion to check that the new container is no longer set
Hopefully this does not happen often.
![MAJOR](<LINK_1> 'Severity: MAJOR') Either log or rethrow this exception. [![rule](<LINK_2>](<LINK_0>
This will change the semantics of the 2 getAllPaths method. 1. The ONLY public method that is non-static, is a code that is not part of the TableItem. 2. The method getAllPaths() may return null if the table isn't one of the supported files.
s/glusterd/EXISTS/
this should be a Map<String, List<Object>>.
At this point, the info log should probably be updated.
I still don't think this should be needed. We already check if it is a avro gen. All files created at the end have been created as a container type (or no avro type).
:bug: this is not clear. I believe this _should_ be one of the paginations, but this PR is mis-read. _Shouldn't_ be throwing an ISException.
I would prefer to see these short-circuit returns: public List< ToolInstaller> getDefaultInstallers() { try { Class<? extends ToolInstaller> jdkInstallerClass = Jenkins.getInstance().getPluginManager();.asSubclass(String.class, boolean.class); } catch (ClassNotFoundException e) { return Collections.emptyList(); } }
Why not just assert that it's equal to the new question visibility?
Can this be set back to protected? If we want to allow it to be used by other classes, the default no matter what it will be set to.
Does this reconstruct the entire content of the UI from the plugin? Imm ok with this - but I do want to make sure there's no more efficient way to reconstruct the content from the UI. From what I understand, it should be a separate method (like Strings.isNullOrEmpty()), which would simplify the code a bit.
I think this could be an issue.
how about moving the 3rd expression to be before the previous if?
If I understand this change right, these changes need to be _necessarily_ deployed to the server first and then the front ends? If that is the case, we need to make sure we remember this fact. It seems like we can _read_ both versions - but write only in the latest version.
This would need to be a assertEquals(int, int) as that would expect the value to be of the expected byte array.
We don't need to get the editor from the Preference store. For our reason, the IEventBrokerUtil should still take care of that.
This should be split into multiple lines, i.e. move the setup of the ReportExecutionContext to the end of the test.
The state system scales well. You need to have a test, and test the case where you can get an exception and call refresh() on it.
why do we need a cast here? The logic below seems to reduce the amount of colors it would be done in the input constructor and its content could be modified while the input is modified.
The url doesnt give a sense that the request is to get "metrics". May be something like this? /v2.0/:tenantId/metrics/info", new HttpMetricQueryHandler()
The other formats are actual formats (HTML or MD) whereas all other formats are actual formats (HTML or MD) whereas the plain-text would be more appropriate here.
@tmjee same here shutdown complexType and complexTypes
Looks like we will need to remove this line.
You can do this in the constructor.
I would council you to omit the "List" here since you are always using the list values and you will have no duplicates yet.
How about a test where it fails if no barcode files are found? How about a test if not all the tiles were found? My apologies if they are already there.
Why have you provided a LTS to an deployer?
this change is not required, since this is set in the ctor
This is just an observation, but we need to continue to read with IO exceptions when the account doesn't exist. Even though we have not seen that, we can simplify this method by using Arrays.stream(accountByEmail).filter(x ->!accountByEmailOptional.isPresent()).map(x -> throw new WebApplicationException(Response.Status.NOT_FOUND).entity("Account not found").build())).collect(Collectors.toList());
I think it is better to fix the message in the MessagingException directly here, because the lock might be acquired by the same thread.
Why is this called from two places?
suggestion Deadline.fromNow(Duration.ofSeconds(10), 20L);
static import?
this is now outside of the if (isImagesAlreadyOnTarget()) scope. is it on purpose?
Should be _firstMatch_ instead of _firstMatch_.
I don't know how this Build works, but can we have a whole project in it? We usually a whole whole project and a text file in it.
Just an idea, I will remove it from the old PR.
Unclear to delete?
what is this change does?
This exception makes no sense to the caller and it will always be false. If you are just sanity checking, throw an AssertionError.
Will it be better to also pass config config here? I remember that we set this to all other getters in the configuration class.
Are we sure we want to keep the previous behavior? i.e., it's not clear to me what's the case?
I believe we should be returning a LongTransportException here.
We are adding the default case here. Might want to add the blink id into the list.
isn't the default 2?
typo: variable
7
That's what I meant. But now that I see it I'm asking myself why we don't use diff.getPath here, it returns the old path in case of a directory. It would be useful to be able open a file that was deleted in a commit but was later restored. Could you change it to just use getPath and also change it in Action#run? Sorry about that :).
suggestion final DateFormat f = new LineTransformationOutputStream() {
Why can't we return here?
This isn't what you want. You need to append the name of the interceptors to the entity model - it doesn't matter if you add the class or use the generic type.
It might be better to rename PerformanceMonitor line 75: java PerformanceMonitor.startActivity("rendering/copyImageToScreen");
it seems that storeId is unnecessary, can be removed
why was this removed?
autobixing?
do we need to manually register the handler?
can we move this null check into the ProcessorContext constructor (line 488)?
![MAJOR](<LINK_1> 'Severity: MAJOR') Reduce this lambda expression number of lines from 22 to at most 20. [![rule](<LINK_2>](<LINK_0>
Nitpick: this should probably be t.sendResponseHeaders()
why use toString()?
As links[0].rel", "abc" and "https://server/1/base/request/1e", they are not supported.
isPmKdumpDetection == other.isPmKdumpDetection() and vdsType == other.changes?
Can we get the logic of SortOrder.DESCENDING and why is the same?
Update this file with the body.
Why does this need to be done?
Better to use: File.isAvailable(f.get())
OK. sounds good. Anybody step up and tell me where to put the code and parameter, and I will happily do the work :)
Can you use { } and } else {?
assert fail
Probably better to make it package-private for testing.
java if (next instanceof String) { return (String) next; } // then you can delete the else {} also below.
This function should be private.
This one does not seem to be an efficient way to find the current file - you could scramble the file and s/the/s/in/ and do something like: if (file.endsWith(".dat")) { dp = new DatParser(new File(file)); }
I think it would be better to use the EntityType.FEED here instead of EntitySLAMonitoringService.
Let's change this to a callable rather than a callable.
this should be a "schema-version" not a "preamble" (I remember this the old way around)
need to be a final
Do we need to care about the error case here?
Code from line 137 to 154 can be extracted as a private method (createLegacyFile) to be reused in the testFindLiveVersionFile test and also to leave the test shorter and cleaner
It's helpful if this method is called toolbox.getIndexerMetadataStorageCoordinator().updateSegmentMetadata(segments); instead of calling toolbox.getEmitter().emit(metricBuilder.build("segmentMoved/bytes", segment.getSize()));
Use getLastInsertId(model) method
Shall we need a config for this or can we i think?
prefer to have some string utility function into SegmentStoreStatistics, like now it's done in the merge
No permissions needed to make the test pass.
I think you can add this new method to OS.getConfiguration() which returns the system metrics.
There is a lot of examples of this and the actual fix. Could you check it's best to use com.fasterxml.jackson.databind.jsontype.NamedType.
This test would be easier to read if you extract some of the 75 lines of code into a separate method.
rename to substitution
Let's add a default case
Does it make sense to use the default value here?
do you want to output the result of the cycleLogs?
Maybe it could be the case that the session was not created and this test actually failed.
Exception is not logged or thrown
Shouldn't the log message be: "Invalid syntax and will not be supported"
nit: Should we make metricsQuery non-final and change it here (e.g. metrics=...)?
In other places too, this could be final.
Not sure how to be sure that explicitNulls are not null. The code should be like if (whereItems.size() == 1 || explicitNulls[i]) {
Are we checking that the mod file exists in.jar? If not, it might be better to tweak the message to say that the mod file is not loaded.
(nit) s/still/the same for "is yet implemented"
The above if was not properly indented
This is throwing an IllegalArgumentException and the one above a line above this one is not necessary. You could simply add the message to this method in that case: <LINK_0>
above should be validated too.
is the mini cluster required? starting a mini cluster takes time and prone to flaky failures. Would be nice to avoid using it.
I think it should also check for the response code.
unrelated bug fix?
add message to exception
I would divide this method into 3 methods. One for final aggregation, one for final aggregation, one for final aggregation. Why not just keep it as a parameter?
what about conflicts? if a user with json file is updated it will get worked. can this happen?
This check is not needed
![MAJOR](<LINK_0> 'Severity: MAJOR') Either log or rethrow this exception. [![rule](<LINK_1>](<LINK_2>
Why did we remove this catch block here? How about the default implement Closeable() method?
You can leave this one with the requireNonNull
previously it was also 'null' for the operand, but now the operand is not null (although this is not a valid sign). I'm not sure why you decided to handle nulls in the code later, but this could be a problem because SizeUnit has BigDecimal type. 'null' for instanceof SizeUnit to be an array (or a StringUtils) in this PR.
You can use String.join directly.
This is a bit of taste, please change it to a line by using the tree to reduce nesting.
How sure are you that these values were not already false, even before the rest call?
you cannot loop only one time on the full entryset?
This code block is duplicated within the test, it can be extracted to a separate method.
Opening a stream without closing it - it should be handled by our own exception.
The key for the properties is unnecessary, we don't have changes in this patch.
The merge is flipped. You're trying to fill the SneakingData with data from the Entity, so it should read similar to as follows: java final SneakingData old = checkNotNull(function, "function").merge(old, old);
Missing "run".
If you want to make this more explicit then you can add a SingleInputCheckpointWriter that also checks the state of the instance. And then validate that the DataTreeInner contains the values.
Add final keyword.
You could have simplified to (system): Boolean.parseBoolean(args.get("sftpPort"));
Can we have a test instead of catching xpath exception?
I'd suggest to change this to logger.debug("Unregistering service {} at {}:{} ({})", description.serviceType, instance.getInetAddress().getHostAddress(), description.servicePort, instance.getName());
This is a duplicate of line 59, maybe you can extract to a function?
What about adding a constant instead of using "binarytext" here?
Shall we also test the write of the exception case on line 138?
same, this is not worth a method with the task-id prefix.
I'm wondering why we are consistent with the first approach and not the other. One of the reasons for this change is that we _could_ modify a single assignment strategy, then we pass along the current assignment strategy as well, and not as a separate field for the consumerPartitionAssignor.cooperativeSubscription(topics, assignment) method that is called in cooperative mode instead of the above. One upside of setting owned by the ConsumerCoordinator is that the PartitionAssignor no longer needs to know/save its own assignment. However what we lose here is the ability for the PartitionAssignor to react to anything other than the currently owned owned by the ConsumerCoordinator. I think the first alternative is to transition the PartitionAssignor to another partition with the current assignment. (Or as a suggestion, we could actually just pass along the current assignment to the PartitionAssignor prior, or as a separate PartitionAssignor.) method that is called in the first place. I also wonder if it would be cleaner to remove the public from the first place where we are consistent with the public api.
It is strange to ask the workbench for the display: PlatformUI.getWorkbench().getDisplay()
I have a concern here, we introduced WorkbenchFeatures.PLANNER_AVAILABLE as local private constant, while WorkbenchFeatures.PLANNER_AVAILABLE is still used in org.kie.workbench.common.workbench.client.authz.WorkbenchDockEntry.createWorkbenchDock(WorkbenchDockEntry.java:134)
This is not good, but to be safe, you should use the!isWorAuthenticationHost.isEmpty() method to check for null, to avoid NPE.
nit: "Only data"
This method may be obtained from the parent class, cause each click here. When you want to check that device is an instance of DiskControllerType, the if-else statement may be delegated to the parent class.
Extract this to a method please
@vack-shoylev Do you know if the message is null?
I think we should add the new icon, something like "Unexpected type 'for' and SELECTED_KEY' that will have the menu's menu.
Perhaps we could return an Optional instead of null?
Is it safe to not using epsilon value for comparing double type result?
Should also outputExpectsExpiredEvents
sorry, but Line too long.
I'd left this because <LINK_0>
This can be simplified as Assert.assertEquals( resolveResult.kind, InodeMountPointFileSystem)
Needs null checks.
you could do here itself if(getSelectedItem() == null) { return; }
This would deserve a protected static method.
This should be StringBuilder.append(m_metaGroups.keySet()).append(g).append("=");.
What does it mean to be applying workspace specific name?
Shouldn't you be using a logger here?
Why the change to Level.FINE?
I think we should add a proper error message to that case.
In this case rather than throwing the RestException here, you can return the error message here and below.
BUG? Should be log the exception instead of logging it.
Is the check needed in the first step of the upload? Ideally, it can be moved to the last step.
It might be better to add the param to the log?
nit: I think the map is not thread safe. The usage of containsKey is to check the result of the concurrent map, which is not thread safe.
Prefer Assert.assertEquals(actual, loadedVertex.getAttributes())
if (Build.VERSION.SDK_INT >= 18) {
is that a bug fix?
one more call to setting /withoutPath could cause races... that would be better.
Nice catch. The method will be unchecked.
I think we should change the API signature here. Should be STANDD, not 'Password', I guess, in this case the API clearly says that the password should contain at least 8 characters, the issue is that it tries to update after this line, Tyler says that it tries to update after line 28
is this a *nodo* log statement?
II think this code was also inherited but I think it might be clearer if we refactored the code into a method and also re-use the code in the NavigationFragment.
just a thought, why not newIdentifierName.equals(fetchedIdentifierDisplay))?
I would put this.sourceIncludes = ScansDirectory.DEFAULT_INCLUDES to the log message.
@sakama If we use both idGetter and idGetter, then checking this for you. Is that not enough?
this is an improvement.
objectCollection is already of type Collection so no need to check object.getClass().isArray()
Is this change related to the fix?
Can this method be private? It should be no longer
This condition will be false in case of isConnected()(). Do you mean to remove the watcher?
lambda java if (Boolean.parseBoolean(System.getenv("CHE_SINGLE_PORT"))) {
we've already stored this value in the array, can we do a Collections.emptyList() to save you from doing this array copy?
Why not do this in the loop like we do in the sorting of the partitions.
We can just use theme().getResources().
The logic is a bit hard to follow. I would suggest instead to write it like this: java return perAPI.getUsers(inode, permissionType, filter, start, limit);
rename to ignored
What is the difference between this if and the else block? Looks like a bit strange.
this should be an atomic operation. Wondering if there are two threads involved in the race condition.
This might not be necessary, we're sharing this method anyway.
This should be moved inside the constructor
Should this be in a try-catch block or so?
Please add a space after the commas.
orElse(null) is easy to read. IMO it is better to write something like this: try { Resource resource = airdResource.getResourceSet().map(repResourceURI::getResourceSet).orElse(null); if (res == null) { resource = resourceSet.createResource(repResourceURI); } else if (res == null) { res = resourceSet.createResource(repResourceURI); } return resource; }
a copy should be avoided : just include the files here and then it would be great if it was a directory instead of something else...
Please use a more meaningful name for the variables here.
This looks wrong, in the case of a missing field, the reference is not a valid field.
I don't think the multiple-resource will be returned here.
getClass().getClassLoader() is not necessary. I'd suggest to leave it as is.
Looks like the logic is in the wrong place. Does this make sense?
can you extract the test to a method and reuse in the test?
The warn message should probably be changed from "Couldn't resolve plugin dependency format: Endpoint is not loaded."
Here too, is this duplicated?
please add getMessage : {}\n{}
this PR is added
This method should be private
unchanged partition, nothing to commit:
We can simplify this test a bit by using if/else statement.
I'd prefer to use getHostName() to ease correlation with other issues and logs
Nit: the style guide would ensure the correct spacing between if and (.
I think we cannot do exceeding maxrety at the end :(
Because the "filter" statement is now only for the "if" statement, I think it is better to split it once and not onClause.lastIndexOf("_").
I'm not sure this should be equals and hashcode.
Can this be done outside the loop?
note that this fails in the "move" code and there is no need to pass the VM object so only the message here (in the "fail" method), no?
using log template is preferred
@vilchik-elena Why don't you simply return without the else?
Missing method header.
Something wrong with sorting. Home absent and it should be loaded
this can never happen now, can it (assuming you are checking for bytesWritten < size).
Can we create a function to get the status/health for StatusResponseHandler?
should probably be named m
Tip: consider adding a custom message for the correct value and check the argument order.
You should use singletonList
can we use a Stream API here?
"assert false" will always fail. I expect this is because this is a state that should never be reached. If that's the case, throwing a more explicit IllegalStateException, with a message, would probably make things easier to debug in case it breaks.
I would make this more readable like java List<Pair<Mutation, byte[]> localUpdates = (indexUpdatesItr.hasNext()? new ArrayList<>() : indexUpdatesItr.next();
If we're already doing this in Hawkular, we should also update the Device/Application Panel (with SSL) to the bus. That we can have the app lifecycle by now in time and the app lifecycle is already present in the fragment.
nit: move these messages to a separate method
I think it would be cleaner to have all this logic in flattenParams in the query itself. You can then just put it in the query string.
Probably a nitpick, but we need to test here that getEditorSetting is mostly duplicated. How about we have a helper method to get the getEditorSetting?
Why not to test with empty string?
Since we need to do this work for all data source in this method and HTTP layer API, we need to update perunNamespaces map to have only one look for the link.
please catch missing space
I see this is not part of the 'else'...can it be extracted to a method?
It may be useful to add some information about the routing data.
checkNotNull(param.SegmentStoreScatterGraphViewer_xAxis) + '=')
assert return value
nit: could you move this allocation down to line 540?
why log and return null here?
This will be called only when per experimentAccession is true, Contrast is true. You know it's not to add filter types to filter out the list before calling it.
nit: ThemeBrowserActivity.setEmptyViewVisible(mAdapter.getCount() == 0);
Refactor to deal with the CG tag that will be used as many CG tag values.
Calling the method here is unnecessary.
It would make sense to assertNull here.
You may want to use ObjectUtils for this null check.
Would make sense to mExportFileName here as well.
Is there any way to test that there is no CI support?
"consider changing the plugin filename"
If Ctrl is not right, it doesn't have the actual info available at the end of the test. So it should be false.
This seems like a side effect of having the configuration outside of the factory. Is it possible to simply pass the configuration through the factory? Perhaps I'd prefer my own solution but I don't see any reason for that, and I'm not sure it's worth it.
assertEquals(excpected, actual)
Think @sandeepSamudrala mentioned in the another pull request. Should add location to the resultObject.
The test is not testing the new row between the first and the second and the second, so it should include the entry in the list
is calling removeClientListener thread safe?
The 'NonAvailable' button is probably need to be hidden in a utility method.
you could use one if statement here.
I think it would be clearer if this type of test methods were just included in the returned list.
Why this sleep? It's necessary to verify the creation of topics as well.
Great catch! The pluginMap should never be initialized, but instead it should just throw an exception since you are expecting a null plugin to be returned.
Unable to locate hdfs configuarion folder.
Yielder already has not made a difference in practice. See that you can remove this.
This does not look right. We have figured out a possibility to use [Guava's code](<LINK_0> to see if the possibility is more complicated than it is.
Feature should be moved to condition should be part of else if (continue) to make sure there is no task to continue processing
I think we get rid of this line: startCipher.setEnabled(dateFilter.getEndDate());
If you want to return false, don't you want to return false?
Nit: Add a space after the comma.
I'd like to remove an extra setFallback method here, one should be fine. On the other hand, the EntitlementManager will re-read the context from the outside of the try-finally block, will be created.
I don't think we need this synchronized block here.
put arguments on the same line: input.readBytes(Slices.wrappedDoubleArray(samples), size * SizeOf.SIE_OF_DOUBLE);
Please use bitset.asBoolean() instead of assertTrue
maybe getOrPut/create?
ident
I think it's a common part of this error message. Should we also catch Exception instead?
We could use TcpIpConnection::close instead of this duplicated code.
this should be either separated or runtime exception
Can we move it to private method?
If you're looking at the code, why not move the VisibilityEvaluator.unescape to a static variable?
minor: can be final.
1. i don't think this should be based on the "potential" of the host, rather the DC its in. 2. also, if my DC is 3.0, you shouldn't let me create a useless V3 storage domain since the host i selected is 3.1. i wouldn't be able to do anything with it until i have a 3.1 DC. 3. while at it, I'm guessing this line is buggy and would cause quite a headache if a 3.2 vdsm would be released, collections.max would return 3.2, and the getSupported(3.2) will return an empty/NPE/etc. on a 3.1 engine.
This is fine, but for future reference there is also a instanceOf method.
> off topic: I'd go with a simple "//x" and "y" in AbuseFilterEditResult.java, the two classes of this class doesn't need to be declared there. The utility method can then be used in AbuseFilterEditResult class, and the one to get rid of the class.
suggestion log.warn("Encountered {} while trying to fetch offsets in the next loop.", id, partitions);
Alternatively, this could be written as boolean flags = (flag - 1, HIDE_MISCELLANEOUS)
I'd prefer to move this constructor call up and return it directly.
You can just use.orElse(null) to avoid the null check.
Can we add a check to validate the data loaded. ReviewDb.open() can throw an exception if the data doesn't exist.
Nice fix. I'd suggest just one improvement - let's add two methods: - RingbufferContainer.isStaleSequence(long sequence) - RingbufferContainer.isTooLargeSequence(long sequence) We can then reuse these methods in the operations and in RingbufferContainer#checkBlockableReadSequence. Otherwise, I always get confused when checking the sequence - should I check the tail or the head, can it be equal to the head or strictly less and so on and so on.
I think we should also play autoPlay notification here. isMessageDisplayed should be true for checking for device is not null.
Please improve logging or remove... also use parameterized logging were possible.
Remove this System.out.println please
I don't understand why we need to expose shortcutRead to be false when the Fragment task is empty, like why it is not empty?
Why did you change this to a regular finally block?
This must enforce the sort order. When is each step of a multi-row node?
Transaction is opened the fun begins
What happens when the query fails to commit?
@ivandalbosco You can use anyMatch(symbol -> symbol.usages().stream()).filter(symbol -> symbol.scope().equals(symbol.scope()))..anyMatch(variableToken::equals);
will it work fine if the path is not available?
This method is not necessary. You might want to leave it out
if you invert this condition, then you'll avoid the null check.
When using Dates, Validations are designed to behave differently. When startAt returns a single parameter, consolidate the logic and the ColumnBatcher just sets the value to "null".
The name of the parameter is misleading.
I'm not sure if it would be better to check the type of the read operations at the beginning.
I would have put this into its own column. You only have 41 characters defined thus far on a line, and we usually have an 80 character wide terminal.
I don't think this will work for multiple package types. For example, why you test the interface to make it more straightforward?
This function must be called before the for loop.
This can be replaced with assertThatThrownBy(() -> message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.
any reason for two ifs instead of if? if (domain == null ||!domain.isEmpty())
This check has become too stringent since you're not checking if it's zero.
can you rename the variable to translator?
I think this should be able to be removed from the genericQuery method
The Exception is never thrown.
So why is this necessary? See below?
throws RuntimeException
Is the order of bits in the result?
could this just be an if statement? i.e. java if (dueRequesters.isEmpty()) { return WAKEUP_INTERVAL_MILLIS; } return Math.max(dueRequester.nextRequestAt - now, 0);
- This should be useless now.
Shall we use Host.cluster_Version here instead of hardcoding this?
Missing the super class name.
This is written as: bitmapRect = new Rect(x, y, x + width, y + height);
"Downloading via proxy: {} to this is silently slow
If this array isn't meant to be modified aftewards, you can now use ImmutableList, which will have better read performance (and no potential synchronization issues).
Move this in the "else" block to make it clearer?
Minor: We might not need to set response code if we don't care about this.
assert that the expected state is the same as the other one?
You can move all this logic to the first line of the method and return QueryResult.singleResult(List.getOnlyElement(channelSchedules(schedule, query), query.getContext()), query.getContext()));
I think there are only two locks being acquired here and in the other tests that the RedisLockRegistry did not have the same ensure-lock. 1. They are created from different JVMs. The RedisLockRegistry vs registry1.obtain("foo") of the RedisLockRegistry Test is not bound to the RedisLockRegistry Test. If it's possible then you can not have to obtain the lock in one of the tests instead of using the regular lock.
final
make this method private
Please add message entity here by describing the error.
I didn't know the purpose of this change. If the project is a project, but I alteredFiles are set to false after the change. This will read the file's content and it will read it correctly. I think the intended change is to add the files to the view to make it clear that this change is a dead condition.
Can this method be package private?
Please consider adding an overridden version of the'scheduleTaskShutdown' method that takes a task name as parameter. This will allow you to get rid of the one in scheduleTaskShutdown and call it from the 'async' method.
Line too long. Maybe you can extract it to a function and call the variable?
Declare templateStream hear, as a local variable.
@forclo maybe instead of letting this NPE check be used in collectClassesAndInterfaces? The error handling is not really used in this PR, but it is better to check it later.
rename Range to Range
During the build, when the info == null, we need to keep the first exception instance. All the method returns, we can then return the command result;. Remove the call to sashWindowsMngr setup.
This variable should be final.
maybe this could be'should not reach here'?
This could be improved by checking if fieldNotInitializedTest(ifTree.condition()) and if (!fieldNotInitializedTest(ifTree.condition())) { return; }
Is there any chance of this, or is it the other way around?
Just pass it directly. We are the bad hashcode implementations here.
why not use an iterator?
Any reason for this change?
I think we need to move these lines up to the following: java Table table = classToTable.get(clazz); if (table!= null) { table = transaction.getTable(realm.configuration.getSchemaMediator().getTableName(originalClass)); }
Let's use a logger.
What's the difference between the else branch and the else branch?
Is it more likely to be severe?
I would prefer public execute(Method.PUT, US_EAST_1, bucketName, null, headerMap, null, null, emptySet(), headerMap); Other parts of it are not used.
do we need a separate logging here?
else we should probably just be here. If we are only setting the bean to null, should we instead validate that the class is aGroovyPresent?
Why is that removed?
"err".equalsIgnoreCase(str)
This is a pretty expensive operation, except for the role name, which is pretty unlikely to be used. I would prefer to use a switch statement here just to simplify it if possible.
This should continue to use the ParseUtils for the already existing PrimitiveType() method. Use Types for those cases.
Would it be better to just catch IOException and make it throw new IOException("Failed to create a temporary file in "+ dir,e); if (Files.exists(dir) &&!Files.isDirectory(dir)) { throw new IOException(dir + " exists and is neither a directory nor a symlink to a directory", dir); } if (Files.isSymbolicLink(dir)) { throw new IOException(dir + " is a symlink to a directory"); }
why not to run this from DB twice?
@ivandalbosco Why did you make core changes here? I think we should consider making org.springframework.web.context.test.Assert so we don't support for any new tests.
Why?
Should probably be refactored out some method also, like: java public void onViewCreated(View view, Bundle savedInstanceState) { view = new onViewCreated(view, savedInstanceState); }
Why are we incrementing this with the list?
This doesn't seem to be the right name. Why remove the index?
This block can be optimized to avoid having a similar issue in histograms, meters, and timers. Users can implement counters by MetricFilter.
why not to use assertEquals?
Same here, I think you should use the @BeforeMethod setup
I think we should throw exception.
The logic is Simplant. It's not limited to the maximum call.
This is always true right?
Would you mind to change this to: if (way....) { // Don't do anything. }
The log statement is unnecessary, the publisher can log it. Just remove it.
Perhaps use Math.min() here before the if-then statement?
Redundant braces
Your existing code should be replaced by: File[] driveFile = new File(filePath); if (filePath == null) { //... }
This should probably be a NPE. We should try to remove this in order to make this NPE safe.
This equals implementation should include attributes from the Command super class.
why not use the relevant Exception handler we have to catch when something is wrong?
I think you will also need to check for null, since havnet or Cam
The fix here should be to assign sortBy[0] to the result of the invocation below, that was not assigned to anything, instead of creating manually a specific implementation of SortBy
This should be protected by a default method 'public'
Should this be done in the BeaconHandler?
please decrease to TRACE level
I think this method should be private.
Can this be new ProjectListPopupOnOpenRowEvent(descingUp, row).getName() for Reviewers
Will this in a whole bunch of log statements be removed?
@vilchik-elena This condition could be simplified to!sameSymbol(element.parent().parent()!= null && element.parent().is(Tree.Kind.CAST_LIST))
use stream instead of collect
Can you make sure that if the topic name is hint_name is not provided then you can use the zk URL?
Is it really needed to remove this, or can we change this to just a logger instead?
You should log also "Group id".
should the return value be VNTRequest?
Could you please change this to if(newConfigurationMap.containsKey(stringMapEntry.getKey())) { newConfigurationMap.putAll(stringMapEntry.getValue()); }
rename to simple
This DateFormat object never changes. Maybe make it static final in the class scope and save a bit of performance?
It's a debug level?
Why do we need separate test?
This is more efficient, but maybe the first check should be "== NFC and expired."
Why this change? I think it should be ERROR
I think you should be able to check the outcome of the tx tx in the same try block.
if (monitoringId!= null) {... } else {... }
@ikhvostenkov why not have this local variable?
We should also introduce a test for the case where the file cannot be read.
This is a potential performance issue. In an early-exit case I would use a variable with descriptive name not including any null value. Perhaps "furnace" makes sense.
Can be replaced with: hosts.stream().map(VDS::getName).collect(Collectors.toList())
@droneboost this should be in a constant since it's referenced from the R.string.xml.
Use the stream with try with resources
Spe
Please put identation into a method and change the prefix so it will not be translated
why not just put it as a lambda???
File
This setting should not be enabled by default since headers may be C++-specific and not protected by #ifdef __cplusplus
Another issue I noticed while trying this out: getDefaultLSLocation() can return null (e.g. if the chosen language server is not found in your PATH), in which case the next line will throw a NullPointerException. So we need to add a check here.
Minor: please move this method to a private method so this can be reused by both places.
We can't catch this exception, but just ignore it
I guess we could have a bit more logic here with an unparseCall().
Now it's preferable to return directly
This is a race condition (at line 74) since TumorType instances are created in the children. However the constructor will potentially do nothing in normal processing (as this is a common pattern in the children, which will happen in the constructor. So maybe we should move this line to a private method that would create the TumorType, and do the copy there.
If we are in the format format, than we should use this to be in the same format?
You're not using the current indentation, backwards
maybe consider using a ternary here. if (color!= null) {
Magic number
the return value is not used. I suggest removing it and throwing an IllegalStateException if a message type needs to be handled, but there is no mapping to a handler.
unusual
This is too much of a test, please change it to use own date parser.
Can you move this method into the getLocalArtifactUrls class?
Instead: java if (consumerCapacity.get() == 0) { onCompleted = new Subscriber(); } child.onCompleted();
I am not sure why you changed the formatting here.
Maybe it'd be a personal taste, but using stream seems simpler to me as follows: dataKeyRanges.forEach(keyRange -> { final Map<Integer, Pair<Long, Long>> blockToSubKeyRangeMap = blockResolver.resolveBlocksForOrderedKeys(keyRange.getFirst(), keyRange.getSecond()); blockToSubKeyRangeMap.forEach( (blockId, subKeyRange) -> { blockToSubKeyRangesMap.put(blockId, new LinkedList<>()); } blockToSubKeyRangesMap.put(blockId, subKeyRangeList.add(subKeyRange)); });
Use error logAndThrow
This message appears to be wrong. Can we fix that? Also, it would be nice to use the same message as the ConfigurationException (without any permissions).
why 4.
It would be nice if we could skip that when statistics.isStatisticsEnabled() is true. System.nanoTime() adds some overhead.
Why not use a Set<StoragePool> here?
This doesn't look like it should be a retry call.
Why is this needed?
s/ luns/clusterVersion/
Could you please elaborate on the change in this PR?
This is already fixed in [this file](<LINK_0>, so shouldn't this use ObjectUtility.getTaskInfo().getJobInfo() instead of DataUtility.taskState(ts)?
Why does this check be outside the try block?
Could you please rename this to ChkMedia + ChkMedia + 1?
this will throw NoSuchElementException
Change the null check to something like: if ((task.projectName!= null) && e.controlFor(user).isVisible()) {
This is common enough that there's a util for that and is used extensively: suggestion Utils.closeQuietly(retryWithToleranceOperator, "retry operator");
No new line here.
How about: if (repoRelativePath.isEmpty() && includedResources.isEmpty())
I think we can change these calls to time.timer(0) and then use time.current() in the constructor to avoid the long running call. If an existing feature is not enabled, we should not change the state of the previous ConsumerRecords in pollForFetches(). > If an existing feature is not enabled, we can use data from this feature in the previous call. Having updated data from the previous call will lead to duplicates in the past.
If we throw an exception and this is null, we don't need to handle it.
Why do we need to write to the stream while it's not the cookie? If anything could be more complex than just check for the header.
Use Preconditions.checkArgument(id, "Device identifier cannot be null.");
Would it make sense to move the getName() method out of the if condition?
ERROR->NOT_FOUND
i18n
I don't think the timeout is necessary in this test, the test would still pass.
negotiatedProposalNum > reqProposalList.get(negotiatedProposalNum - 1)
This is a brittle test. If the RVVV is null, it's likely that the value that's changed might be negative.
I'm just wondering, if this would be more logical to just call a findCompileTimeConstant(ASTPrimaryExpression expression)
The second null check is unnecessary, as equals will return false if one is null.
I would suggest to add a method that will shutdown the executor, and use that in all cases.
remove this and following our.println?
throws IOException is not needed; remove it
This should probably be done and no need to mock the executor
I don't think we need to have build.getDistributionManagement() in the write repository. This may lead to some issues with the unkown build being executed by a different thread.
Weird to have producerMethod method public
Remove all System.out calls. If they can't be removed, please update all System.out calls in your tests.
I feel like we should use a bit more generic name _maybe_ "createComponentsAndSet". Not a big deal, but maybe we should rename that method to something like hasNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNoNormalizerNo
[nit] Use the full path.
Again, I'd suggest doing a pretty generic check on the whole map contains(processor) method that is not throwing an expected exception.
mapAtRoot is a map. No need to do it here
Move the creation of the pointables object to the constructor. In the evaluate, just reset or clear the pointables variable.
i think this logic works to identify the given resource group is static or not. But a much cleaner way would be, if we mark each segment of ResourceGroupId being static or not when we create them via group.expandTemplate call, then we can easily put the flag here. And no need to rely on the context. i.e. this line will become something like this group = parent.getOrCreateSubGroup(id.getLastSegment().getValue(), id.getLastSegment().isStatic()); And i think we may need a separate method createGroupIfNecessary(SelectionContext<C> group) here.
Perhaps you can make the condition here more readable?
This seems to be a translated string.
This variable is used only once, I'd suggest just calling the method more readable.
Get a reference to the hardWrapSegmentListener on you
a QuadrigaStorageException should be created inside the loop. You just have a map of the networkNodeInfo to the network interfaces and use that.
please include assert text
This is more readable reader declaration in this test.
these debug statements are redundant - please remove them.
It would probably be useful to return at least the information, which has the issue.
I wonder if we should have a static method somewhere getAbsoluteUrl(String) and call that instead, making the code ever so slightly higher level. Config.getAppUrl never returns null?
Great catch! The static import of "org.junit.jupiter" and "org.junit.test.com.myplugin.json.plugin.xml" is already initialized, but you can just use the one in InputPluginProperties.java
I'm assuming this function is only used once?
You could move it to where it is used.
List<Host> pools = pools.stream().map(host -> HOST.getId()).collect(Collectors.toSet());
Please remove the return statement
I would like to see a fail fast if there are no result changes. I'd like to see an issue with a file that did not start with a script.
These two lines should come before the if. (Remove in the other branch.)
How can this be moved out of the loop?
Please update test date/timeInMillis so it would look like an Wrong date.
Please remove as this is related to OAuth2AuthorizedClient
nit: %s
@TShapinsky nice find! Store the retrieved view in an instance field instead. it should be available as soon as this is called.
Since this is a "if (validChildType == null)" block, it can be removed as you don't have the!childType.equals(target) in the block above.
Does this test actually work if someone calls the "backspace" method and then the reader reader is closed? (i!= 0)
We can replace this whole block by: event.post!= null && event.post.getLocalSiteId() == site.getId().
It might be better to serialize the string value into an object into AzureAccountInfo.
@since 3.13 missing
It's strange to me that here you don't have to consider the null-check (as well as several other places). Please verify with a situation when you are using null as expected.
This causes _any_ exception to be thrown, which means only the submitted topology runs, it should be fine to submit it in a separate thread (as opposed to submit the command line checks).
Why not: values.add(object);
I think it'd be better to catch more specific exception like IOException and rethrow it. So we can get rid of the catch block.
i think we can move this logic inside the if statement. Look for example on VmDynamic.getVmDynamic().getId()
This technically isn't needed since we throw an exception in runtime...
We need to understand why this is being called, but after a few ms, or if you look at this, which can lead to a bug: running = false; scheduledExecutorService.schedule(eventCaller, toNotifyTime - currentTime, TimeUnit.MILLISECONDS); no more than necessary, but it's already called very often. You could just change running to a boolean to indicate whether you should be a syncronized block, and call cancel() somewhere..
please do not use hard coded strings.
Not that it's good practice to declare the assertion as Assert.assertThat(toAdd, Matchers.hasItems(1));
![MAJOR](<LINK_0> 'Severity: MAJOR') Change this condition so that it does not always evaluate to "false" [![rule](<LINK_1>](<LINK_2>
This can be private static final
You should do a null check here instead of empty string
perhaps we should log the exception to RuntimeException, not just that exception.
Hmm, so sometimes we could use uploadFileImpl which allows to use the path to upload multiple times. I'm not a fan of multiple approaches, except I don't care which class is useful here. Can we add a private method that could be useful?
Shouldn't this be "4.0"? If so, also we should add to the constant.
@sebing we have compilation problems here as well
Can you explain this change?
you can use the following code: public boolean addPredicates(AbstractSqlWriter writer) throws OseeCoreException { Collection<String> ids = criteria.getIds(); if (ids.size() > 1) { writer.addParameter(seqId, OptionsUtil.areDeletedArtifactsIncluded(writer.getOptions()))); } else { writer.write(ImmutableMap.of(seqId, startElement)); } }
I would prefer to use GeoServerResourceLoader.parse() and then use the ResourceLoader directly.
Missing the toString()
Can we pull this into a isGoodPath helper method or something?
I just noticed that this is already handled in line 403, is it intentional?
Please use Camera.CameraInfo.UNASSIGNED
This should probably be BIGTABLE_DATA_CHANNEL_COUNT_DEFAULT.
Please consider adding the following characters to the message to explain the motivation.
@pynicolas can we check that condition is always of type CfgBranchingBlock?
Needs defaults
I don't think this is safe -- won't it mask other types of errors that have nothing to do with connectivity? And do so indefinitely since we'll never pass those ConnectExceptions along? We do want tasks to fail eventually, we just want them to retry for some time if they can.
I think this line should be moved to its own method.
This should be a private static final String ERROR_DIRDIR_MAPPER = new File(targetDir, "tacococo.cp").exists(); You can change the below lines to if (new File(targetDir, "tacoco.cp"))) {... }
Hmmmm. So, this kind of thing is quite ugly. I would remove the line.
This will be a whole lot of work just for iSCM, maybe we can add a flag to keep 'local' flag.
The result of get() has the same functionality.
<LINK_0>
I would prefer to remove the System.out here and add it to the request.
Missing the tapped field at the end of the filter
It could be interesting to see if this method is only used for events. But maybe it's better to do a Set<String> instead?
Nice check, I think.
The full name of the test isOracle() and what it does. Should be something like: assertThat(result.get("field_length"), is(nullable_value()));
please use configuration to have per version values (it will save doing the per-version checks)
Please update this implementation.
Use [ResilientOperation](<LINK_0> Using the [CLAC](<LINK_1> produces a warning.
Can we improve on this?
This else block is redundant since the if block returns.
Is this more a loop than a count? Maybe use a for loop instead?
Just double checking: Was it intentional to go from ExecutorTest to Thread-sleep?
suggestion this.primaryKeySymbols = new InputColumn(clusteredByIdx, tableInfo.clusteredByIdx).valueType();
The logic in here is strange, as I don't think it makes sense to return a Stream or even Stream.empty(), the constraint could be set to 1. This is better than returning a stream 2.
I'm not sure if we need to wait for the cursor to complete to prevent all other operations that are needed.
we can keep the previous line shorter and use the 'try' with 'catch'
I would just propagate the original exception instead of swallowing it. there is no way to tell the user that some kind of error was thrown and the stack trace will be printed.
It seems this could be defined as a constant somewhere?
Coding style :(
This doesn't take a context. It should be named 'location_uuid'.
This method name is misleading, it doesn't give you the model, but you are calling it. Is that really needed?
Use CollectionUtils.isNotEmpty
Better to use stream api here, it's more performant
Do you need to restore this property?
You should create your own test.
Can you define this variable outside the loop?
You could probably move this code to a property and use the property name here to determine the type of the label and it would be a property and there after the "access.role%s.noparent" string.
We could rename the test method into executePredicate.
.split(","))
Can you please update the condition to with the first argument?
add check for!params.isEmpty()
Format
Please, use Collections.singletonList() which performs a null check.
what about memory and network costs?
I can see the code follows the [project name](<LINK_0>
why changed toBuilder().id(null).event(null)?
this is dangerous. This means that UNSPECIFIED will return something that is not set by the parent context of the trace manager. I don't think that's a good idea.
Are you logging this as a debug log?
This should be: OOMOUTFACTOR, shouldn't we instead apply the zoom to all the landscape?
assertTrue(queues.isEmpty(), "Expecting empty queues but was %s", queues)?
You can use the method reference instead of the 2 inetSocketAddress.
Why caps ANY_VALUE?
It looks like this exception is handled by parser.getCurrentLocation()
minor: could you use TimeUnit.SECONDS.toNanos(mapName) instead?
I guess that we have to set the data. And also, we should probably display Vectors.md for negative values and display them. This is a negative change. Or we should be caching the data.
Please move this line into the if/else branch, e.g. @Override public void initSelectedProfile(ListModel<VnicProfileView> profileList, VmNetworkInterface networkInterface) { if (profileList.getItems() == null) { profileList.setSelectedItem(profiles.stream().filter(profile ->!Objects.equals(profile, VnicProfileView.EMPTY)).findFirst().orElse(VnicProfileView.EMPTY)); } }
I think it would be better to use the constructor of CommandInterpreter
Same here. We don't need to do this.
For all asserts, provide a 3rd parameter "message", which will be printed in case if the assert fails.
Can cellProcessor be null? Is it possible to do this?
I suggest using getPath() instead of append(), it's not efficient to use path.toString()
config.getPluginDirectory() this is ok without locking?
this will still work well, when the file is expired, it shouldUnzip = true
You can use ListenableFuture<?> instead of Boolean and pass the value to allAsList(currentlyBlocked, blockedOnAggregation.isDone(),...
I think we can do some more elegant: 1. fetch the first devices. 2. map and then fetch the second device for the command 3. Get the first device and fall back to the second block.
long hashCode;
do we need 44 + _ here?
We do not want to replace the whole if-else with: if(isCucumberService.getQuiets() == ScenarioForceTemplate.UNASSIGNED) { // setDeploymentDeploymentForReinforcements(); }
Please check exception message
since this is probably changed, it might be worth doing a query on the ProxyHosts and not ProxyHosts.
@vrushaliwaykole @dhanasp -- There is a null check inside branch.getBranchById and we're already checking null value for branch.getAssociatedArtifactId() as well.
Missing return after the if (dimensions == 0) {
"Failed for user {}."
Should we validate that it's a non-null value?
I'm wondering if this would be more readable if the JobRepositoryFactory.getJobRepository().getJob(context.getStep().getJobId() is called only once?
I don't see a reason for this Exception.
White line between methods
The same goes for all the changes in this file.
Same question. E. g. in constructor, it uses NullHandling.emptyToNullIfNeeded(value). Could you also self-review once again ALL usages of emptyToNullIfNeeded(), emptyToNull() (if there are any remaining in the codebase), and reverse methods?
I'd prefer to have this return an unmodifiable list.
why do we need to wait here?
This is the wrong error message. Should it be HIVE_PARTITION_DROPPED_DURING_QUERY? Or a generic HIVE_METASTORE_ERROR?
Is there any case where users would want to set the same summary for the app? Could we extract the actual value from the database?
Null check on the RyaStatement and check if it's not null.
suggestion if (!TextUtils.isEmpty(login)) { I think this should be negated.
this will be entry.getValue().executionDelay = entry.getValue().executionDelay - POLLING_RATE
I'd prefer to format these in TalkBacks, and only if (log.isErrorEnabled()) { - if (log.isTraceEnabled()) { - }
There's no need for this.
Use FileUtils.mkdirs
please use StringUtils.isEmpty
isEmpty()
LOCATION_SPEC?
Please throw an AssertionError instead of an error.
suggestion Preconditions.checkArgument(authentication instanceof InternalAuthenticationException);
Small int is probably enough?
Single line for or split into several methods.
If this method is called, why we still want to return null?
This test should also assert a literal, which is being tested, which is the correct behavior, and slower.
Opportunity to use it here.
I guess it's possible that field name is NULL_MARKER? null : constantValue[0]
Typo: "Command Shell" should be a constant
Did you mean to close the stream here?
I don't understand why we need a delta delta delta delta. If anything else is true, the delta delta is set to true.
Can you use getOrDefault()?
suggestion Assert.state(!unitOfWork.phase().isAfter(PREPARE_COMMIT), () -> "It is not allowed to publish events when the last Unit of Work has already been published.");
Being paranoid here, is it possible that the checksum retrieval code is failing and returning empty strings?
why the.poll()?
We may want to log the operation / chain id? I'm not sure "this operation" will be useful in the server.log.
variable can be initialised with null
suggestion throw new TableException("Sandas Python UDAF cannot be computed with Java/Scala UDAF currently");
You could just use Process proc = processBuilder.environment();
This should be public
Is there a reason for not using assertTrue(SourceWindowManager.isMainSourceWindow())?
Make this readable? e.g. java return i == Const.POINTS_NOT_SUBMITTED || i == Const.POINTS_NOT_SURE?
This failure should not be required. The test should catch both exceptions and its not failure.
Looks like lastAckedTs.getTimestamp() is an Optional. Then you can just get rid of the lastAckedTs.getTimestamp().
This message should be updated at debug level.
1. this file isn't related to create snapshot flow. 2. do you persist the placeholder to keep it compatible with the rest of the code?
Why is this necessary?
Sharable??
Can we use 'cleanConnection' to try to avoid it?
Should we consider performing this update in a separate patch?
Please check whether task is shutdown or not.
It's better to use the method name here as well.
Could we avoid throwing an exception? Could make it more specific.
Perhaps we should add a message to this? I think that it's easier to debug the rationale with the failure.
Will this cause trouble later in this method? I think this is super simple and running in this method is more complicated than necessary.
I'd rather use a if (visible) { return; } before the if, or add the else to strength variable above this if statement, as they are necessary to ensure the flip won't be negative.
suggestion public void induceDeleteFailure(int count, ServerErrorCode errorCode) {
"Failed to get lock for file 'fileToLock'. [File.lock] ] The lock is held by the tryLockFor() method. This spaghetti method. Also, it should be named "fileToLock".
"protected" is redundant.
Missing whitespace.
It's better to use MessageUtils.getRabbitTypes() here
I don't think it's the same test that the user can set in this case.
Shall we use assertEquals(String.valueOf( EnvironmentVariable.VARIMENT_DESIGN_FACTOR_RCBD_ID), property.getValue());?
These are missing the originatingAndId?
Shouldn't it be template.2.3?
Use parameterized logging instead of string concatenation.
I don't think we need to use PojoIndexedTypeIdentifier::convertToLegacy here, otherwise we'll be making the assumption that we are actually not using it.
refactor
Please move gzip to something like this
@cagryInside Could you also add a default value in R.string.analytics_label_regions to the user? This value could be a default value, but it's not advised to add a default value.
We should probably also update the log message to the lock state.
nit: you can use Objects.equals for other classes
The runtime-level API is a bit strange, this could cause runtime exceptions, like for example when used to bind to a field, maybe up to the method name, and override the method accordingly?
By default it is not really a test. Should we consider two user cache entries?
Please use the common [Method names](<LINK_0> class: java.util.StringHelper.
Please have test for this branch.
Should also verify that the generated body is the expected one?
If you really want to test this behaviour more than once, nonDisplayThread is created outside the thread that is actually created with a "default" thread, while the test is still failing.
I think we could simplify this code by using Stream API
I think this should be: assertThat(symbolicValue("42").isAlwaysNullOrUndefined()).isFalse();
Is this intended for debugging? If yes, then I'd remove the check.
nit: Removed stored segments
Again, multiple exception types that are handled identically can be grouped in a single catch block.
It seems this is an unnecessary change and should be removed.
Should this be an interface?
The TechnicalException thrown here is now non-null. With the new exception suggested, I would keep the original exception unchanged.
I think it would be better to call it 'hosts' here as well.
Also with explicit contentType check java if (contentType == null) { return callApi(data,..); } else { return data.windowUntil(..).flatMap(fluxes -> { var contentType = getContentType(cachedBuffers); if (fluxes.size() == 1) { return callAPI(Flux.fromIterable(cachedBuffers)); } else { return callAPI(Flux.fromIterable(cachedBuffers).concatWith(fluxes.get(1))); } }); } I think we just have to cache in the windowUntil operator i.e. no contentType check in windowUntil, the check can be deferred to flatmap operator.
You're missing a space after the parenthesis.
Do we need these escapes?
plz remove all this code
please log the exception before processing this.
I would suggest to move this try/catch inside the finally to avoid the leak.
Move this to the test
> The message should be MarshalledCredentials.
Errr... you should verify this before you even push a new commit! =)
Why public?
This doesn't seem to be related to the changes in the other PR.
why not keySize? from all parameters of the called pattern, we select the bound ones... so the source width should be the number of symbolic parameters
This hashCode() is probably not working, as it's always the same, but you can use Objects.hash()
What about doing one thing at a time? java assertThat(error).hasMessage("Lakers", "Bulls", "Spurs", "EpadTo", player.getName().getLast()).isLessThanOrEqualTo(3)).hasMessage("Lakers", magic, 30))).create();
Should be removed
nit: you can replace those 2 lines with : final List<Node> testNodes = retrieved.values().iterator().next();
It is worth changing the test to set up a global config just to make it clear that it is not needed as we are asserting on this value
you can use values like key_values_size_of("foo", "bar")
Doesn't get instantiation return a null value passed in? Can we give them meaningful values to the JVM?
Can you change this to something like below? java try { return entries.stream().map(file -> new JarFile(root)).collect(Collectors.joining(",", ".jar")).collect(Collectors.joining(",", ".jar")).collect(Collectors.joining(",", ".jar")).collect(Collectors.joining(",", ".jar")).collect(Collectors.joining(",", ".jar")).collect(Collectors.joining(",", ".jar")).build())); }
Nit: missing space after equals.
Instead of this synchronized block, can we just use a method directly?
i think we should have logic of this method. Can we make it private?
Could the above two lines be refactored into a method?
can we just be a RuntimeException?
This is an unrelated change
no need to cast to Map here
Since the VM instance is being initialized just once, just remove the "isWindowsOsType" variable.
could arr[0] be null?
Can you move these declarations to the if block?
should probably be Integer.valueOf(100) to avoid any confusion.
Could you please keep the above change?
This will fail if the if we have a 0 array.
You might want to use Stream API here, but for the sake of readability, it seems we could easily use Stream API with a bit more SLAP wrapper around it.
Would it make sense to have a table with the following values \t as well? That does not seem to be correct.
Instead of a hard coded String can you use BranchOperationUI.parseFromBranch()?
I think we should create a defensive copy of the Map
this catch block is redundant.
what is the difference between this build and the above build?
This line can lead to a DNS lookup (blocking call). Would createUnresolved work as well?
Please, use try-with-resources
I assume, this looks like a reasonable fix. If I have a cache to the invocation in the destroy() method, then it looks like it will be more safe to just call get() on it.
final List<CompletableFuture<PhysicalSlotRequest>> executionVertexSchedulingRequirements.stream().map(ExecutionVertexSchedulingRequirements::getExecutionVertexId).collect(Collectors.toSet()); final List<PhysicalSlotRequest> executionVertexSchedulingRequirements = createPhysicalSlotRequestFutures( physicalSlotRequestFutures, executionVertexSlotRequestIds, executionVertexSlotRequestIds);
woudln't it make sense to have the system register only if all dependencies are present? (Also I am not sure if this is a good concept in general, but since some people want it i won't object)
reorder
I think this should be IMAGE_SIE since you have a vanilla StepVerifier
Return empty string instead?
You should encode the 'file' with the name to avoid to length and store it as a char.
binaryKeys
This again gets logged.
nit: if the only usage is to find diff b/c if it's now replaced with System.currentTimeMillis() might be preferred option?
Suggest using a local private method for this in the activity.
can you update this path to set in TaskRunnerUtils
Should we return null in this case? Or would it be better to throw an exception?
Why? This sounds that we have a constant, and a constant.
I still think you should use pluginInfo to be null, so pluginInfo can be null
Can this be moved into the finally block?
please replace this with an import rather than org.apache.maven.plugin.PluginContainerException.
We should turn the auth system back on after creating the test data.
I think you want to use [this](<LINK_0> instead.
This logic is duplicated in the createEndpoint() method. Maybe we can introduce a new method that returns the poller and the the the poller to the async one, so that we don't have to do the null check here?
You should probably not store the previously started true value until the user completes the changing room and proceeds to the map, so in case the action stops in the middle, you don't leave an inconsistent state
Now it's correct! :+1:
Again, instead of returning Observable.empty().
no need to do it.
When you open a repository you have to ensure to close it after you're done with it, so that the resource handle is decremented. I think you need to have a finally block where you call repo.close().
I think we could have a protected method here that takes a byte buffer instead of a character here. Something like void putKeyValueSize(byte[] keySize, int valueSize ) { byte firstByte = (byte) (keySize & MASK_ONE_BYTE_VALUE_SIE ); if ( hasAdditionalKeySize ) { cursor.putByte( (byte) (keySize & Flag.MAX_VALUE_SIE ); } else { cursor.putByte( (byte) (keySize & Flag.MAX_VALUE_SIE ); } }
You should not remove these changes.
Does this have to be the same for all JSON files?
Extraneous whitespace
I think you can just use Objects.hash( ) here.
This should be too complex.
what is this new condition about? is this related to the original story? anyway, this seems a good place to use 415/Unsupported Media Type
I don't think you need to add a default case ANY_ADDRESS and SUBNET_MATCH?
Might want to wrap the lhs/rhsMaterialized in a try/catch, to make it consistent with the constructor and line 44 below.
Can be cached inside the CollisionCategory object. Then it will be stored in the setCollisions.
@piddubnyi full path LastModifiedCachingWire.LAST_VERSION = "this.scvh"
No need to use UriBuilder
I think you need to assert that the return value is 0.
I guess that it is already done in line 55, no?
You have to fix the typo here - "AdHocTo send"
You could just do a [Expected TreeMap](<LINK_0> here to avoid the extra indentation?
Add doc Add @Override
This is not what I was thinking. Wrong method name says: "org.apache.commons.lang.Validate..."
Use.orElseThrow(() -> new RestClientException(new RuntimeException(message, Status.NOT_FOUND)) instead
Could we change this to StateTableViewer.createProjectSelectionTable?
This will be kind of something a second step too?
Not sure if this is good, but I'd prefer to use ContextCompat instead of letting isJdkOnHost()
You should better catch NumberFormatExceptions here and set 0 as a fallback.
It is not good to use "--".
Could you also check that the timeout wasn't set?
Why not collapse these two lines into one?
Please use String.format(...) with multiple quotes.
this code is not handled properly
A double negative. Use isEmpty instead?
> It seems to me that in the tests, the pattern is a whole lot harder to read IMO. I'm a bit not too crazy about it as it is. I know the only test is what this method does, but since the search would have a lot of sense if it didn't have the regex. That's why I didn't review the code to yet, but I'm not sure what's the point of doing it.
This is not the right way to do this. It needs to be revEdits or revEdits, or.
If result is an instance of Map then we can just make it an Object
Here is an example. Suggest using a factory instead.
I think it would be more clear to log the exception in this case?
Consider extracting this into its own method called addBuyOrderToOrderBook or simply addBuyOrder. Extract method refactoring.
Method on the minimum level of the name.
if(getWindow()!= null ) {..} may help
pleas make sure that if compensation is empty then compensation but not compensation.
remove changes in this class
To make it easy to read the code it would be better to handle case-insensitive comparison.
rather calloutContent.setText(String.format("PlaceName", "StAddr").toString(), graphic.getAttributes().get("RIS_USER")
This seems to be always the same as the first time MavenSlf4jWrapperFactory is used. Is this the reason for the change?
this should be an error instead of logging
The idea of creating the span is that we don't want to use the method. Couldn't we just do this in the constructor and want to store it?
If a debug log level is configured, we should specify error message in warn
Could use a multi-try-with-resources try (FileInputStream | X509CertificateBuilder.DEFAULT_SE) { fw.flush(); }
Do we need that log?
remove all this
if you have enum... never will append it anyway
if we already pre-commit timeout, can we just do the same here?
consider using org.jboss.weld.environment.Platform.DefaultLogger.IS_UTF_8.
probably should remove the andFinally() since the return value is already handled by the call below.
What if value is null?
Let's keep the s() business rule for now.
Super nit: unintentional additional white space I assume.
Should we use the attribute name here too?
This is not going to work. The plan tree JSON can be the json for both "test" and "test". Have you tried that? I would get the empty string.
I don't like System.out.println, even when tests go to stderr. I would prefer to use log4j (the parameter) and log it as debug
You may well remove this catch block and then test for if else.
Why isn't the test for the version being null? At this point we'll have stale data, at least it's not.
Better to use forEach here?
You should create the FileChannel in a try-with-resource block, otherwise it is never closed.
The logic in this method is quite common in the GroupsAPIImpl. validate(List<String> errors) method. Can you extract it to a method?
You have to use psiElement here. E.g., on the left you can use psiElement.isIndexFile() to check for an array of ErlangFileType.APP and then you can use.isIndexFile() to check for 'void'
I am afraid this is wrong - it should be 200ms and if it is in the fork, and if it is the test will not run it on the server.
.min() isn't needed since.orElse(createHeadToken()) will return an empty list if it's null..min() would be enough.
I'm not sure this one is correct. In the method name uniqueId is the UUID that was passed to the FileAssetContainer. I think we should keep this behaviour (it is not a good name, it is the same as the one in FileAssetContainerUtil or at least we can get a better name)
Will this still be smaller than the original? Instead of introducing a new snapshot, we should keep the existing SnapshotInfo object and just return it in the else block.
Please use HrjoltEventPublisher here.
[minor] style nitpick: no braces around single line blocks
add the '!can't we use only one string?
I think we don't need this else. If user does does the job, it is not supposed to execute the task while it is running, which makes the listener long. If the listener cannot be null, the exception will be thrown.
We need to add an assertion to make sure this is valid
please add this method to the nested class.
Can you please make it public?
Consider saving beginTransaction or commit() to final and use it in the while loop.
This should not be here; it's part of the gtk_size_allocate.
I think it is better to use PathCache.get(key) instead of calling.get() again.
this is a bit of an odd way to compute how much time can we change it? I'd rather see this method be called something very long, e.g.: private static final String ASURMENT = -1; instead of duplicating the code and then using it in the test methods.
Please don't print stack trace like this. Log.error(e, t);
Don't bother. This doesn't help, as we found out.
what if the user changes a port from a previous version of this PR?
This seems to be duplicated. Can you extract it to a private method?
You should probably split this into a method so that the code doesn't get called if the filter is false.
why do we need to put the String.format() logic inside the constructor? (Line seems more readable to me).
call super.hasMailAuth()
Constants.DEFAULT_PREFERENCES_DIRNAME + "/" + ".png" would be better (and avoid the ternary operator)
I don't really like this variable. It looks like it could be very hard to detect where the conditional context was "return" and we'd really need to detect the "master branch" more.
Please use StringBuilder.append() - otherwise will be easier to miss if something like this: java bob.append("SCREEN DATA: " + mainStage.isMaximized() + "\n");
what is the motivation for changing this method?
Shouldn't this be the thingType id instead of the modelId (modelId can be logged as well, but the primary information should imho be the thing type)?
Extraneous whitespace
If you want to use the RuntimeException of the return value of the method, you can use here.
No need to use refresh here.
suggestion if (args.length > 0) {
This is inconsistent with the test on L43. When this method is called, it is always called after the if (false), but now it is "false". (so the change in behavior). This may be avoid conditions for someone reading the code.)
It's a warning. Do we want to log the complete stack trace for a warning? Check with <LINK_0>
Hi @stevenschlansker, I think this should be Throwable (_the father of all errors_). The Error case is very specific and I assume it was only provided in #1405 as an example to demonstrate the problem, but in a wild there is a bunch of Throwable monsters (especially in Scala) which are neither Exception nor Error but which extends Throwable and can easily flip stack trace upside down. Therefore, if there are no other reasons to limit a range of throwables being caught here, I think this should be changed to: java } catch (Throwable t) { Both Error and Exception are instances of Throwable, but the Error is **not** instance of X extends Exception. I guess this works only because IDE or compiler did not pick it up, because generics are erased in compile time and X extends Exception disappears, or maybe, just hypothetically, because Error is a magical monster which can be cast to any other exception (but I'm not aware of such magical Error properties).
why not use the static String.equals(resultLine)
nit: Could statically import these assertion methods.
There is no need to test this logic so that the next line is overloaded.
I wonder if using type().toString() would already perform the same thing.
nonVmMtu5000 ==> nonVm
is this the 'button' described in commit message? do we really need this Label?
This line does not match with the previous check
this is not needed, you can put ".includeSLA=true" inside makeHttpGetRequestAndCreateCustomResponse.
Could you rename the variable name to distinguish it from the message and nitpick to?
I think we can even call entry.getValue() here.
suggestion pullWaitStat = pullWaitStats[threadId];
You need to do early-exit if you're interested at this.
We should get the LASUtils.BLACK_TEAM for the check of the team.
please use.collect(Collectors.toMap(
Please use diamond operator
This isn't necessary.
[minor] this can be replaced with binding(TemplateInterfaceListModel.class).in(Singleton.class);]
Woulds nice to have the default value 4 minutes as well
suggestion if (instance.clouds!= null) {
For better readability, we use ParseObject.Builder#withUser(String name, String param) instead of adding a new parameter. Can you add a method that takes a boolean expression? What does the method that says?
Is it possible for userInfo to be null? For example if it is null, I would prefer if (userInfo!= null) { return getUnregisteredStudent().orElseGet(this::getStudentForEmail); } else { return logic.getStudentForGoogleId(courseId, userInfo.getId()); } (And a little up to you).
if tracingToken is null, we dont want to initialize this with null.
s/test/search
I think we could use.stream().anyMatch() or.collect() to make it more readable
This should be assertEquals(params.get("include_granted_scopes", Collections.singletonList("user"));
It should be new TajoRuntimeException(new UnsupportedDatum(new UnsupportedDatum(new UnsupportedDatum(new Inet4Datum(new Inet4Datum(new Inet4Datum(new Inet4Datum), new UnsupportedDatum(new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(new Inet4Datum), new UnsupportedDatum(
This method is too complicated. Any way to avoid it?
You probably want to add null checks to the XAStore and get rid of the boilerplate etc.
Should we change this to!TextUtils.isEmpty(subject)?
you can use org.assertj.core.util.AssertJUnit.\* methods instead
Should be here ac.stateChangingCheck(); @zlamalp?
Prefer using ExceptionUtil.getStackTrace(Throwable) to handle the response code
Wouldn't it be easier to debug if we don't have a exe instance in the middle of the app?
I tend to do this as a static import so the code at the start is more readable.
You are right, but I would say this "if" is not necessary, and removing the first item will stay in memory if you have a partial Inventory class that contains it. InventoryUtil.createInventory(java.lang.String, int, String) method
we can use private method createLogEventSecureObj() and createLogEventSecureObj()
Why are you using assertEquals() and then another one for the expected result? Is it to compare the content of expectedException?
That's a separate behavioural change, should be done in a separate patch, if at all ("just wait for the varints bro").
Redundant parentheses
Please add null check for entity.
Any reason for tests using the methods?
you should use it
should be 'continue' rather than 'break;'
this can be moved into the else block.
Expected before actualScores.size() == 2
do you need to create a variable with a name?
This will do a.append(System.nanoTime()).append(sql)
The MappingImplementor must not be null, so that we are doing an unchecked cast.
You can use CollectionUtils.isNotEmpty() here.
The purpose of the 'if' block is to put the else branch in a single line after the return.
Cannot render interstitial ad. -> Cannot render interstitial ad. AdMob console -> AdMob console
Same here, if we have >0 and set objectMapper in the constructor, we don't need to have the if statements here.
Why do we have 2 different steps?
add notebookId to log
White space.
I would throw an AssertionError here - this must be impossible from the platform's perspective!
There is no need to create a new ResteasyProviderFactory here. This is not a main issue, but it is a bit easier to read.
Please remove unnecessary parenthesis:!ag.getVdsIds().isEmpty() || ag.isVmAffinityEnabled() && runningVms.size() > 1 && ag.isVmAffinityEnabled() && runningVms.size() > 1
Missing method name
It looks annotation is only used in the if (injectedTypes.contains(parameterType)) so this part could be moved there (and we will gain a bit)
Can you make this method private?
Maybe we should stop using String.join as we are doing string split.
This should be in the try-finally block.
Hi Ravi, First of all, congrants on finding this out. Second - I think that while you're on the process of working on KerberosManager, I think we're making a mistake here that we're not throwing an exception if krb5 conf file in case we do want to use kerberos auth. Regardless, I think that the system property you discovered. should be set only if the krb5File exists.
I don't think that's right. I find it easier if this method were written more cleanly: java if ( tok.hasMoreTokens() ) {... } else {... }
We should use StringBuilder here
while(it.hasnext())
you should use the merged log method - that way it is easier to debug.
Doesn't it override user decision when user de-selects this radio button and rotate the phone?
This looks a bit confusing. I think it should be java } else { throw new EncryptionException(e, Mono.error(e)); }
Why is success variable in 'false'?
onErrorMap?
Please rename to activity or fragment.
Please use a utility method for duplicating code.
why are we catching the exceptions here?
might be worth logging here, JiC
Shouldn't the method take in a list<CsvRow> instead?
Can you elaborate on why this is necessary?
add a check that no bitstreamformat has been created
Optional: better to invert equals to avoid potential NPE
You probably want to keep the index at the end of the list, since it's not an.
This is the tooltip, you should be able to disable the widgets and you can get it to the trace (e.g. by sending the timestamp to the view and press the button on the first click or even better the text of the view.
Please simplify this function (then, it returns the value of the 'name' variable).
this is not code correct
Shouldn't the state of the enqueue be not at all? Why is this not just read the value from the user?
This should be public. For example, you can create a private static final instance of this class with the default value.
You don't need this, as the default is "keystorePassword".
Double negative.
does it make sense to return null here?
Why do you need this? The loop goes into the previous method.
this will break the loop
This should probably be done using the logger instead of printed stack.
Can we use try-with-resource pattern here?
Add a space before "("
nit: assertFalse(table1.getAdmin().getVersion().instanceOf("reject"));
This was going to cause OOM on the client - the caller is in the lock.
why is this synchronized?
Do we need these escapes?
I think this can be simplified to: java return!(currentTime.isAfter(startTime) && currentTime.isBefore(endTime) || currentTime.isBefore(endTime) || currentTime.isBefore(endTime)) { return false; } The'return true' code is now identical to the method above.
This seems to be doing two separate externalization of the same thing. If the module comes in an XML and then the name of the file is "jboss.server.data.dir". This is because the module may have changed and no subjects to a directory. It should be passed in through the module to the read-only module.
IMHO, we should move this to a common utility function.
nit - move the deceleration one line up..
just do if (file.exists(dumpRoot)) { return null; }
I would think that you should have some kind of synchronization/locking to avoid that several threads are requesting the client concurrently and executing the initialize method in parallel.
set.isEmpty() is better
Can we remove this and "new" from the list?
Please change the methods to use assertThat
Would you also add an overload for these methods?
This statement is never executed because the nextReadyCheckDelayMs is set to 0 before the backingOff, and we only need to check if there is a leader electionion.
nit formatting 2 spaces.
Minor thing, but we could also use a single synchronized here.
This could be a for-loop. No need to increment and decrement after doRun
does "can't wait anymore" -> "can't wait anymore"
Why not use AssertJ?
suggestion throw new SearchException( "Trying to use Hibernate Search without an Hibernate Hibernate entity: " + delegate.getClass() );
Use 4 spaces for indentation.
The null check above won't be necessary.
Why is this method required?
final
Slightly different logging, but I'd rather see more info in the warn log and throw exception in case of scatter count is empty. At this point there would be cases where the system has quick bit of log information.
Can this method be declared private? I know it will be called in a unit test class, but it will be better to change it in the unit test class.
I don't think this is the right thing to do. When could _not_ be closed, we'd have to check for closed before the call to get() on that (if the callback is closed) - if the dq is closed, we'd be closing a record to a flush, and that would cause it to be closed as soon as the record has been received. Instead, I'd suggest to check the _if_ the dq_ is not null, and if so, call free.add(batch) on that buffer, it will be null.
Please change to ProcessInstance.STATE_ABORTED and ProcessInstance.STATE_ABORTED.
What does this test mean?
Does it make sense to return false here if it's not needed?
Can we think of any user attributes in the response? Should we be checking that the user is logged in, not by the server?
check whether Exception throwing
Please use the "PERQB" variable, not inline it
Exception#printStackTrace goes to stderr by default.
Similar
The job is executed by the job.
println
Use parameterized logging instead of string concatenation.
Better to use private static final String PORT_RESPONSE = "CHECK_ALL_PORT".
:bug: this will fail with an out of bounds.
if we log this as error, maybe we should only show the user name that we was not able to parse.
Maybe this should be NamedStyleUtils.removeBooleanNamedStyle(createBooleanNamedStyle(editingDomain, table, NatTable.class) instead?
More constants like "SEPARATOR" are usually in the name of the class as well.
In general, this checkBasicAPIs is unreliable because of negatives.
hmm, the hasSize.. Maybe the test should succeed if the management registry is removed from the default.
@SuppressWarnings("unchecked")?
should be '!='
You could use projects.isEmpty() here instead of asking for null (which is what is used before).
When there's no object in the test, we can use Collections.emptySet() instead of Arrays.asList
Typo?
please use bracket {}
<code>home</code> and <code>j!= null</code> should be present in the rule
Shall we include the table name here as well?
white space
I think that we should have a more efficient way to query the size of the list once, in case there are more threads than the size.
This change is in the original code.
Is it possible to break this out into a separate file as a subclass? I think adding too much to an Activity or Fragment is tempting but once we get a third card type in will start getting a bit hazy.
getItems() can't be null, when empty, check for it.
these three lines can be put in a method to make them shorter
"Hadoop in your classpath. For more information refer to the sthth. Please change the wording. Maybe "Hadoop in their classpath. For more information refer to the sthth.
Ok. But so to be extra clear, we should still always block commits from happening during a rebalance when eos is used, yes? I'm guessing it has to be that way since that makes sense, but if you have any thoughts about a possible alternative fix for eos let's at least make a ticket for now. I guess so long as we can still return data during a rebalance then 429 is still useful for active throughput of eos..
Is this needed?
instead of better reference to tuples of the filter and check if the property is FALSE.priceprice doesn't exist
The relaxedNames can be null, but not enabled.
Can be removed (this loop is not required)
and empty string,?
isTrue(property.getType() == String.class, "Version property %s must be of type Long"
It is better to use projects name which should be exported after the workspace name change.
What's the purpose of this change?
I would suggest to add a boolean otherUrl = createOption() method to the csvDownload object and use it here.
![MAJOR](<LINK_0> 'Severity: MAJOR') Reduce the number of returns of this method 5, down to the maximum allowed 3. [![rule](<LINK_1>](<LINK_2>
Add context specific message without using e.getMessage().
Shouldn't this be: if (StringUtils.isNotBlank(mobileSession.getAppLocation()).exists()) { The missing parentheses would go away
Use Flogger, and do not log and return.
Minor: If we end up keeping both.java and.log, then it's better to just put the boolean value of endsWith(".txn") after the name.endsWith(".idx") check.
I don't think we should be returning here. Consider removing it.
[minor] Use StringBuilder instead.
I would expect the default to be false. Don't allow remote installation.
It's better to have this be private rather than public, so that clients can configure their configuration via engine-side.
For my knowledge: do we need to check for null first? You can just write throws Exception if the map is empty. And if not, no need to collect the elements?
I think this will actually be an error if you don't like you are doing - you need to include the file that you are doing in the tree table. I'd actually suggest you just add a child of the tree that contains the child of the tree that contains the child of the tree. Then you can drop lines ShadowDOM.only* tests.
The condition should be synchronized (this)
Please use if (body!= null) { }
Do we need to check for a list here?
Instead of going through the try-catch, why not just move this out of the try block and have only the catch block?
It still takes a significant amount of time to figure out what this code block does, but we should at least give a significant amount of time to take over the current commit.
This should be moved to where the locking code is invoked.
Should this fail the test? (same with other catch locations)
java.subscribe(new Action1<List<User>>() { });
I understand that this query is executed before the first query has returned values from the query, so shouldn't you use the additional query that returns the first element in the cursor?
I would inline this method and add a method to the Block
These 2 lines don't seem to match anything.
It would be nice to use StringUtils.equals() here.
Is this debug statement still needed? Since you are doing it, you should be able to remove it.
It seems the order of paths can be checked for empty, so the order might be important in this case
Is there a reason why you throw an exception of this type?
entity
Can we move this into the base class? Its effectively repeated in many places in this class.
is this problematic?
hideCanDestroy().get() doesn't look like a good idea. Maybe hideUnbreakable.get()?
this virtSupported value is not a good name, this is how it should be implemented
This doesn't seem to be an right way to go. Probably want to be more explicit about the path to path, or maybe input or path to something that is fine.
getLabelFormat will never return an empty collection?
Why not the default instance?
Remove this if block?
This is wrong. We must always exported the property as String. I mean it was resolved as String. @BeanExpressionResolver public String getExportProperties() { return String.format("The exported value is set as String.class should be of type BeanExpressionResolver"); }
Shouldn't the field.get() call be {""""?
Same again here, just pass db into the method call
I think it's better to remove this duplication with the next one: String columnName = colFamilyName.getFamilyName().getString();
why not use field directly? It would be easier to read and use the fields for this expression and in the call below.
we should check the 'instanceof' instance of this method.
Please make sure the order of the results comes from the previous test. It's not very large, but it would be nice to check that the workflow is still being created and the workflow is not deleted (and it could otherwise just be updated to a different entry).
I think you'll want to fill a sorted list and remove the set?
@vzool one more time, this should be _very nice_!
suggestion ______TS("only instructors of the same course with modify session", Const.ParamsNames.FEEDBACK_SESSION_NAME, "abcRandomSession",
consider this one: java new float[numCodes][InfiniumVcfFields.GENOTYPE_VALUES.values().length];
dbSnp, outext is an attribute of the given class, so use that instead.
...with try-with-resources
I prefer String.format for this: elapsedTime.append(seconds)
You need to look at other tests in this file.
instead of making a new GeoServerCccomAdapter and a static method, you can use it directly
This is a copy/paste issue.
debug logging: <LINK_0>
This is a bit complex. We should probably keep a single method with the header.
we may throw exception for case of a column type, I would use STRING_TYPE instead of String.
In this case, we should throw an error as something else
Typo?
If you want to avoid the debug output that could be improved, this loop could be simplified to: for (int index=0; index < chain.size(); ++index) { X509Certificate cert = chain.get(index); for (int index=0; index < chain.size(); ++index) { if (supportedSignatureEvalSupported) { certSignatureAlgorithmSupported = true; break; } } }
please extract a variable for the 3rd argument in the iterator, since there are 3 methods with getCulprits()
use lang.safeArg.
Why not use the private method to immediately exit? Seems like this line and the update method should throw the exception.
You could use NFSConstants.EDIT_USER_CONFIGSIVE_REMOVE_MANAGEMENT_BE_REPLACED (instead of a boolean) and just use: return s.get(ADD_CHILDREN)
could you change log message a little bit to make it more readable?
This should be replaced with Adapters.adapt
I think the hardcoded number is a constant declared in the beginning of the class, if you're editing it here, will be more robust.
Here's an example why the impact would be that a job change listeners cannot be called. The UI view is still there.
Perhaps we should include the secret here as well?
This looks like a RuntimeException, no?
Could you move this line to the top?
Is it necessary to have the curly braces?
The number instanceof Number should be good enough.
style nit: no braces around single line blocks
I think you can add an Assert.fail() here in order to verify that the launch has been created.
Is this supposed to be name-formatting?
Consider using AnnotationUtil.getAnnotation(...)
Maybe we should rename this to "isCreateJob" or something similar?
This is a minor issue, but what about two lines pushing the asserts inside the function?
use style provided with callback instead
database.getDefaultNamespace() should be a singleton, so you don't have to worry about the order of tables in this case.
you may be able to use this semaphore.
Nit: are we missing braces?
This will invoke the service if we don't have the object, (Or does it matter)? Why would we call this method with a node that does not have the object?
I wouldn't get this. It seems cleaner to return 0 if the value is not null, and then test isLhsNull on the left side of the constructor.
I think this kind of breaks the current API contract in a subtle way: while this is ABI compatible, subclasses will fail at runtime trying to add up to the base class collection of in-app packages.
I think it might be better to use logger.error("Failed to refresh storage usage from update: {}", path, e);
Does this need to be public? If so, please make it package-private.
please wrap this long line
ACCOUNT_REPORTS_TABLE
nit: we can use AssertJ
try to use BigDecimal.valueOf()
this too much, if we selected[0] is not an IStorage, we return null.
The result of Paths.get(vcfList.toString()) on line 61 should be moved into a constant, because you are using it twice.
@vilchik-elena copy-paste bug?
username can be null. in such cases we shouldn't NPE somewhere in the db code but instead fail the rest API with a ResourceConflictException or similar.
Should we log where the remote node could be null?
suggestion ______TS("Instructor attempts to edit student's response, but Preconditions.checkState(this.isActive(), "Student intends to access student's response.");
center the page listener is called, which is the success button and right after the user clicks on a change. This allows the page to be written and the 'OK' button gets executed.
We should print a policy name in the exception.
![CRITICAL](<LINK_1> 'Severity: CRITICAL') Refactor this method to reduce its Cognitive Complexity from 17 to the 15 allowed. [![rule](<LINK_2>](<LINK_0>
you could use a real quick test for the message elements and assert that it's equal to just the one you expect.
This should be a DEBUG message
It might be a whole lot easier to read if we add more information to the exception message rather than trying to report all the nodes in the log.
if it is EngineException, why do we need to set it to a exception message?
I guess you can use Stream.of() on the List instead of adding those to the globalAppDependencyGraphReport method.
This should probably be a @Before
Is using mAdConfig here make sense? We should use banner size that returned in Vungle.
findbugs will tell you there is a NPE here... as Jenkins.getInstace() is checkForNull
Do you want to remove this generic exception?
nit: I think it would be better to have this as a Set as you do in line 34. Otherwise it is unclear what the pluginChecks code is.
The "/test.properties" should be replaced with "/test.properties", since this is the default file path.
Warn log level seems to high for a normal state transition.
I think HEADER_LENGTH should be used here and the count is 0. That will lead to a NullPointerException with an IllegalArgumentException being thrown when a data is null.
if (bean instanceof ClientResources) {
Should not change this file
Should it be primitive?
Why you don't use GoDeleteQuickFix?
These traces are too verbose. What about your missing LOG.trace statement?
Isn't this always true at this point?
It is the same, but can be protected
Can we use containsKey?
try (final SamReader samReader = SamReaderFactory.makeDefault()
This loop is unnecessary, could be replaced with layerParam.contains("{TileMatrix}", path)
Could you maybe move the string "Vertx" to a constant?
I don't think RxJavaHooks handle this. We need to at least one one here.
given that refactoring tool can be hard to understand how this method is supposed to work without, I thought it is a couple of other methods to the name of the test method to better understand what it is doing.
suggestion throw new RuntimeException("No answer.");
This is not right. Please move the private methods on the class.
remove
Did you mean to always wait for the second time?
You're not checking if Exception is thrown.
Does this have to be a parameter? It seems like it's unused.
So that will return the value as a decimal with BigDecimal, which is interpreted as a decimal. No need to convert it back to an integer.
Not sure if this is a good idea.
@lorenzoPrimi remember to use [this](<LINK_0> instead of this.
Add a check here to verify that the broadcastSerialDataReceived method was not called.
you could remove the extra parentheses
This message is misleading, it should be "Failed to connect to backup" better?
This is unnecessary, you can remove this check <LINK_0>
I think it would be better to show the input in the user's choice, something like "help-printing" or "g-line"
Response is never closed
This won't be necessary.
SakadiTestUtils.commitCursors() is already a big method, you can use it here instead of checking for null and exception handling.
I think you can avoid throwing this if you switch to if and else if you have a lot of input in the same row.
Instead of using Boolean.valueOf(boolean).toString(), just use String.valueOf(boolean)
return false;?
This test will fail if it doesn't exist. Do we need to test it?
can't we move this to ApplicationServiceBeanException?
Hm, so when I originally wrote this, I intentionally ordered it to check for these 2 states (if the app resource state is corrupted, or the currently seated app is not usable), _before_ checking for session expiration, so that you couldn't end up on the login screen with a corrupted or unusable app as the seated app. I don't have hard evidence that this is necessary, but I think we probably want to still preserve that behavior.
I think DtoFactory.getInstance() may return null
Navigating again...
Confused by.start() not implemented. Please replace this with assertThat().isEqualTo(messageCount).
Use Assert.assertEquals
I think that's not a good idea to have this one as protected. If we need to allow users to override the saved engine/logs/{username}/{TileCol}. In the ApplicationMessage Properties, we can simply add a method that is called here, and call it from the MessageProperties.setReplyTo() method. This would be nice and it would be nice to have our own "withProperties" (in order to have this logic duplicated).
I think this might cause some bugs on the future. If the block is empty, we should return.
we're cleaning this up again.. I think that the jobCurator.merge(status) method should be moved out of the if/else statement.
I think this should be a 'false'
what about just an opinion on this? I think abstracting it into an interface and name it "level" would be more expressive.
Why the extra local variable?
Baking this logic into RollingUpdateOpFactory this way seems a bit out of place and conflated, but I see that you need to emit an event AND move to the next task. Looks like it's time for some refactoring of RollingUpdateOpFactory...
This is not always true. I think it should be stage!= null, right?
Below you defined openRepository() to be exactly this. Use that method here too?
Not a property that open source HBase or Phoenix recognizes.
Typo: Somehow an extra 'And' got introduced here
suggestion if (doi == null) { throw new IllegalArgumentException("An asset node ({}) does not have DOI as expected", assetNode.getNodeName()); }
looks like move the else statement to the if below.
this should probably be done in the CaptureResult class, and only in case there is a timeout exception in the code.
This test should have rung an alarm be added to the test itself.
Why not using SizeConverter.autoConvert?
text should be externalized
I know it's not part of your change, but why not return false in the line?
maybe return EMPTY_LIST that way we can avoid even creating a soundIds list
Missing space after (
needs to be fixed
Can it be replaced with String.valueOf?
Not sure, would it make sense to have this in a finally block to ensure that messages are sent even if an exception occurs?
no need I think. iccRecords is null always if uiccProfile is null.
On line 226, there's another check for JDOHelper.isDeleted, is that relevant?
move the method
please extract to a method and call it here
Can we just use the java.util.Objects.write utility method?
I know it's not part of your commit, but I would prefer to remove this method and use "this" whenplanIndexer is null.
I'm missing the the reason for the new Id instead of a Id than to be a list of worker IDs?
nit: for readability, prefer variable names
A more readable way of just doing this is: if ((menuProxy == null) || ( SWT.getPlatform().equals("gtk")) {... }
Is it possible to move this line to the previous line?
Don't call ts.getParameter(key, ERROR) twice, put it in a local variable. There's some redundancy between downloadBlob and downloadBlobStatus, so maybe some things could be factored?
Why not just use flatMap?
Title-nit: I think you should also be checking the argument here, not the same for the other places. Since we have to support the same feature, we might as well use it in the VanillaModel.
Should be exchanged.
Can't we make the test use some default value and keep the 1/4?
Please use generics properly: List<Map<String, Object>> nets = new ArrayList<>();
In this method, we are changing anything, but it looks like it will do the same thing.
Strange. Why not just deisable pre-dex. Your property will has a ComptiblePrebuilt and a InlineMarker?
Can't that be shared and therefore constructed once in configure?
could you please use the [logging format](<LINK_0> instead of the try/catch?
Is it possible to use a Fragment.isView() instead of this inner class?
Same as above, but using Guava's util as a dependency.
Maybe reformat SQL here
Not this pr s scope but this should use parent, false pattern.
if.newInt() is used in the provider, you will have to use Type = Integer and.unboxInt() here. In fact, since we control what is put into that attribute, you could skip the Integer and.unboxInt() here and in the other query method.
This reminds me that we should probably deprecate this method in favor of logError.
this check could be in a simple if, since it is checked before the top of the method.
Verify and throw
We don't want to create an exception object just for logging. Also, Timber supports format strings. So this could be: java Timber.e("Invalid address: %s", address);
ooh, I would have probably missed this.
Would it be better to move it to DiagnosticProviderImpl at the top of the class?
As in UserPortal, you should also switch to the base on binding.getRoot() to make sure that the url is still null (which is the default for the widget).
Nit: I don't think we need the throws here.
This should be case insensitive.
This logic is too complicated for a few cases. Can we refactor it?
I would log the remote peer address being set.
Can we use Retrieved for these?
You can use new Guid(String) - it's a lot cleaner than new String[] {... };
update the test to include the previous patient id, so they are more readable
I think it would be useful to print the corresponding credentials, maybe the ability to set it?
Not sure this is as try finally block.
Can one of these constructors be private?
Probably should be caught here in the DCInputSetException class.
Is it possible to use an else to pass to the two String values? We would have that return null in all cases. The java if (x!= null) { thisDisplay += ", " + value; } else { thisDisplay += += ", " + value; }
change to error
this function is actually not used as the one in the file. Move it to the function?
Please break this test to avoid indentation.
Please use specific names for variables.
rename to droppedObject
This is not needed. Because you have a config key in the kafka.xml, only the docker config is important.
Is it possible to make this a list of objectNumbersStr?
Better to declare result of type 'final'?
UnchangedCommitMessageException
Please use an early return here instead of throwing the null check
I think this test method need to be fixed to ensure that even for some reason the file src/main/resources/org/apache/hadoop/io/fluo/core/util/io/FileTailingTest#java could throw an exception.
RelatedToViaCollectionFieldAccessorFactory is a parent class. I would have moved the TraversalFieldAccessorFactory to a separate class. Then in the separate classes we can have a single factory factory method as well.
This is no longer needed.
This method isn't called very often, so I think it's better to have just one signature (the 3-arg signature) so call sites have to be explicit about their multiValueHandling. IMO this will make bugs less likely.
No need to cast to Ref[] here
We should add brackets to this even if it's hard to read.
Use TextUtils.equals() instead of stringUrl.contains(REDIRECT_PARAMETER) because equals() will return false for the first if statement.
StartProxy is Nullable. Please add a check here, and use getNonNullable.
It would be nice to specify the name of the event because it can help with debugging
I prefer fail-fastso first == 1
You can do a full method call to this method, so the end result is not consistent.
You're missing the new message type you're not using.
1. Indentation seems off here 2. I think the code is too generic and not a generic exception
Should we give a different message here, like at the beginning of the catch block?
Don't we need to log and throw?
[Checkstyle] inputs for strings
Just curious, why did you move this into the.reconfigureWindowCache()?
Same as above. We should use Util.checkArg(args, "function '%s' needs 3 arguments", name), the utility method has an interval parameter, so we can validate the values of the command with the expected length.
This is very dangerous, since it will lead to an activity for every time the app is loaded, and then you can add a check for that.
It seems like this line should be before ".vcf.gz".equals(extension)" to avoid possible Tribble errors.
Why is this list created by the consumer? If it's not, I think it's better to pre-create it against the singleton list: <LINK_0>
final
same under_score format for the parameter here IMO
This is a bit misleading, since the tab view will be active, not the tab view.
I don't think this is good, as you're not checking what the backup ends up, just to randomize it. Even if the backups for one backup is a little snarky, I'm not sure why we need to do this.
@tobiasKaminsky any thoughts?
Should this be LON_SIE?
Please add braces around if/else statements.
Add methods to the api.
nit: this can be private
To save an RPC roundtrip, could you create a new suggestservice that does both of these queries and returns the combined results instead? I think that it is important to ensure a single RPC for an oracle since it needs to respond quickly while users are typing. Additonnaly, such an oracle could perhaps already filter groups which are larger than maxAllowed? It could also filter out the Registered and Anonymous User groups?
It would be better to check this in the private method, with UnixSHACryptPasswordSpec and the following two methods in this class.
I wonder if we need to explicitly create a default value for the metadata type of the JSON string explicitly. This way you won't have to set the default value to 0 in the JSON parser.
companyRatingCodeType2
Can the response.body().contentLength() be replaced with response.asChar() to avoid the extra check?
Rename the variable gsUri to be more readable.
crawl_generate as a constant - at least in the "id" parameter.
This looks like it's doing double semicolon. Just fix the commit.
Won't this cause the user to see if the path exists? May be we should do this in the class check directly rather than tombstone
Seems to me we shouldn't have to use here.
int enbale = 1;
I think the message was slightly misleading; it doesn't specify the class loader.
I'd add the curly braces around the body of this method to be safe.
Might be a good idea to check the empty queue here as well
can we be more explicit about size? SamplesKt.getPrefix() + "README.md"
From what I can tell, this case is only used for single binary search. Can this be made more readable?
suggestion LOG.debug("region normalizer", tableName, e);
can you append the sessionId here and for all the other fields?
Maybe we should check to make sure its not null before calling the method.
A copy request is _not_ going to be received, so this is not a test.
Can we refactor this so that we build with some interals of the Maven configuration?
"'Endpoint' is required and cannot be null."
I think it is better to return an empty String instead of null. We do not need to check for null, and then strip() will just have a null byte array.
You could use StringUtils.toImmutable here
use break;
whitespace
Shouldn't we report only the first element in a list rather than the entire flow?
Is the isEnabled check necessary? What does it catch the RuntimeException?
This change can be moved to a separate commit, which makes it easier to read.
is there a reason we prefer to pass 1356L and 2356L?
Sensei's equals method with a filter for extension. Why don't you just use the 0th constant here?
Why not simply create notebook instance in constructor?
Can we move this to a field of this class?
Do you think this could be done on the constructor?
Can't we directly cast this into a map?
Helix still need the lock?
please use here Guid.isNullOrEmpty
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
This method is impossible to understand and review, full of casts and untyped method calls.
![MAJOR](<LINK_1> 'Severity: MAJOR') Reduce this lambda expression number of lines from 22 to at most 20. [![rule](<LINK_2>](<LINK_0>
style nit: no braces here
please extract these constants
Instead of using a compareAndSet style, we should use simple while loop, and only do the update if the file is ready.
same here: could be decided outside of the factory
I think we may have source of the line above (or not the original). Otherwise the original line looks good.
Don't need to extract this to a method, it is not used anywhere
Could you use simple for loop, since we assign o to a variable or return?
You are going to need a test to specify an exit code, so this should be test that the next test is actually run
After more closer inspections I believe we have to synchronize the whole method. newValue and oldValue pair still races and the main reason we log the change is to know what's the current state is. Without the synchronization, the log messages are not guaranteed to reflect that since the order of log messages is not coupled with the order of the changes.
Please consider making this "OR" as a constant somewhere, for instance.
Should be changed to for(int responseIndx = 0; responseIndx < responseIndx
It'd probably actually be okay to call getTypes() for all headers here, and then take out the Map<String, String>. I think for binaries it'd still work, and we want to be able to process AdminUnits and likely folders too.
I wouldn't expect the variable to be inlined.
Can't you drop the iteration over values and check what they are equal?
Does it make sense to move the the incompatible plugin to the line above? You may need to clarify.
Can you move this into a _periodicMetrics.recordCounter("job_executor_ticks", 1) so that we can have a default value of _periodicMetrics.recordCounter("job_executor_ticks", 1). This is also how the logging is internally.
Use ld.setInput(commands); to prevent the dialog from being shown.
reminder: add a channel id for the channel to checkpoint and not the channel.
we should probably use else if with && rather than else which is going to prevent indentations.
Consider using a for-each loop here instead.
Would you extract other shared code into a method? I don't think it's a good idea to move this approach elsewhere.
I'm not sure why we did this. Why not add the array?
Why are we incrementing the variable if it's empty?
Opsu.close(e)
please add the the exception message
I'm almost tending to use VanillaExceptions. The whole point is to stop the event and handle it. I don't think this is quite right. You could have an outer try/catch just call the method and then only throw it.
We should add a check for "lower" and "second" rather than than choosing "second". For example, int1 = 0; int max = 0; int b = variantContext.getContig() - locus.getPosition(); if (b!= 0, b.length = b.length - b.length) return (b < 1)? Integer.MIN_VALUE : Integer.MAX_VALUE; return b;
minor: put docModel.getId() in a variable to avoid call to getTag()
Assuming we have a minute?
If we're using this value, the code will become useless (and it's not necessary, right?).
I would prefer constant there.
If we don't like the name of method it's better to change it as: java public Vector<T> prependAll(Iterable<? extends T> elements) { List<T> list = List.ofAll(elements); return newTrie = newTrie.put(newIndexShift, list.length()); }
all of this part should be in ConfigurationUrlBuilder
Looks like these tests are very dangerous by time... So you should use.transform(h -> h.headerExpression(IpHeaders.CONNECTION_ID, "payload"))
Should we be returning partial list?
Something has to be wrong here. Initially you made this, 'connection.getState()!= EnumDockerConnectionState.ESTABLISHED', and I suggested '! connection.getState()!= EnumDockerConnectionState.ESTABLISHED'. Now it's just connection.getState()!= EnumDockerConnectionState.ESTABLISHED
Why we need this? Can't we just rely on the @Override annotation?
Did you check this in it?
need to add <LINK_0> at the end of this error message, better to explain exactly what we are doing
Is this a problem. You should also rename v.getStorageDriverId() to something like 'null'.
Is it needed? The code seems to only run the "default" in the code.
Let's make this method final and remove the method.
Is it safe to not using epsilon value for comparing double type result?
This statement is going to be converted to a single call.
Can we use KotlinUtils.isKotlinClass(baseClassMethod) here?
Nice catch! We should check this.
This method is quite heavy. Maybe extract it to a method?
Should this be closed or at the end?
Maybe better to return which branch for this dialog.
Just do elem.getClassName() here.
Not necessary.
Since we have a List, we should avoid the temporary array allocation by looping like so: for (int i = 0, size = this.dataChannel.getProto(); i < size; ++i) { final Request o = new Request(i);... }
The "f" variable is not needed here since the "identifier" field is probably already initialized above.
This Exception should be thrown.
also do schedulerState.removeTask(taskId)
Please don't assign null. I would prefer the idiom to be: ReviewDb db = schemaFactory.open(); try { } finally { db.close(); } As then the Java compiler can promise us the value cannot be null at use sites, and its clear what the scope of the value is.
Why this change? It doesn't seem to be related to this PR.
You can just pass _nested_ and do a simple if (ctx.getConfig(ReflectionMappers.class).isStrictMatching() && anyColumnsStartWithPrefix(unmatchedColumns, prefix, columnNameMatchers)).
You could reuse the method input[i].getFullName() here.
I am sorry, IUpon the advantage of not having this result in a separate (i.e. keep the 'finally' part in the 'else' part). Does it cause a problem? If yes, I think we should move this logic to the CreateSiteActionBuilder.java [link](<LINK_0>, to its [here](<LINK_1>, and try in the CreateSiteActionBuilder.java for a better option. ([link](<LINK_2> (please scroll up on [here](<LINK_1>, it was called in [here](<LINK_0>
I don't see the need to collect all of this internal claims. Can you just fix the EXPIRES_AT validation and use that? Otherwise, the method name would have to include the PublicClaims in the public method well.
There does not have a space between the { and }
This is just a nitpicky, but I'd prefer public static void throw(Exception e) { if (runExperiment) { log.info("Experiment failed to the fallback service. We will allow trying to restart a experimental service again in {} milliseconds.", REFRESH_INTERVAL.toMillis(), e.getTargetException()); } throw e; } }
Unnecessary (also below)
Null check (otherStatus, null etc).
How about name it using camel-case? such as org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry#getInstance
Since the StubFactory already uses this as a String, why not make it a static method?
Please think about making this a constant ("item.id") and having a constant one for the size and comparing
I think we should use assumeFalse(System.getProperty("os.name").startsWith( "Windows") ) instead of startsWith
Shouldn't this be this.
this for loop could be extracted to a function so you can just return the first awardAccount that meets this condition. That way you wouldn't have to have the extra accountToUse
Close the reader when you're done with it.
This is nitpick but I think it would still be easier to just use [] rather than array.
would be nice to handle this with the try-with-resources block as well.
inline this
Do we need to verify that we set the correct value to null?
Should it rather filter out spatial join?
I think this is wrong.
can "forURL" be declared as "forURL"
WSO2
Why is this not a BeanFactoryResolver? Although why don't you use a ChannelResolverUtils.getChannelResolver() instead any way?
We probably don't need to do it here, but we may want to read in all these parameters (username, password, etc) from a properties file (rather than hard-coding them in multiple places in the code).
I think we should use only FieldType.values() which is more appropriate.
is there any reason why the cursor can't be null?
can we get rid of the double spacings between click listeners?
We can remove this now useless try catch.
It looks like we can just do this fluent api. suggestion parentFQDN = entity.getParent().getAttribute(AmbariServer.DOMAIN_NAME);
Maybe extract this into a DescribableList<ObjectComponent> getDefaultPipelineUri() method. Then the constructor can just call return DefaultPipelineType.getInstance(getPipelineForm().get("components"));
An alternative way to avoid this would be to use the objectConverter here and only use the provided value if the user specified the value via.value()
Couldn't we just do ResponseLocation(path,CharSequence), or maybe even directly return new ResourceLocation(path). The resourceLocation could be used for things that need to go into an ResourceLocation.
Why did you remove this check from from IMO? Please update the wording to use the logger.
This does not have a way to handle measures with a count, is that not the case? The rationale is a very good way to handle handle multiple exceptions to flows like receiving the results to the log, and when we don't have the info log before passing it to the logger.
Can this go in RequestActionSupport
match -> countUpTo
does it make sense to have a method that checks if the method is named as follows?
I'd also use the methods directly
I don't think you need this, it's already added in the test super class
I think this should be left - if we remove it we should then clear the object after the loop that is called.
checkState?
We probably should use false instead of 0 here.
there is no need to init/save the vm, right?
Should we consider in PubSubProvider?
Is this really needed? Maybe we should add a servlet filter on the resource to initialize on the server.
I think that the banned CoLISTedAgencies are already removed from the return list.
Pls log the exception
This should actually be APIAuthenticationException, the one above should be wrapped in new Object[] { } so this gets properly localised.
Why do we have to write this exception? IMO, it should be a fatal error.
I'm wondering if we have to continue using NIO buffers? @saudet Was there a reason for this?
I should be surprised that pruning this at all: - In regular environment, it should be true - for instance, if it is not visible - for instance. But it should be removed and use new NSComponent(true). - Now that I have changed it to be true, I would expect that event.doit would be raised in the AP environment.
We should add a utility method to Arg.isIntanceOf(String) that takes a stream and returns the actual values.
Does the condition make sense to check for existence of logSizeLimitPercentage > 0? If so, I think that is fine and we should add a constant to the Utils class to make it more obvious.
Line length
Is it possible for accumulator to be empty? There is code below (lines 145 and 148) where accumulator.get() is called without checking isEmpty().
why call getMessage() twice?
It will be nice when these kinds of enum values are expected to be used as as I believe there is a corresponding enum for the parameter name
please move this check to the validator
Is there any reason this is readRecord() is called on a both read and read?
We actually set locale in Main class. I guess it's not set for unit tests.
It is better to remove the nesting and return statements in the else block.
It would probably be better to use a static final field for this.
I think we can just use allMatch here, no?
Please use the formatter. The line is too long and should be broken to two
I would prefer to have this map directly to KItem
@toahoistantarrant can be removed
What do you think about making this method private? That way we'll have the same code in two places.
This is on the previous line
maybe clientCaps or something.
Calling the default case here doesn't make sense.
Returning null here will hide the.close() call and do not use System.out.println().
I'm not sure what "old" means here. You want to mark the previous column first, and then do a merge with the previous firmware.
These two throw exceptions can be combined into one.
suggestion return tx.run("CREATE (v:VersionedThingWithAssignedId {id:1})").consume();
It might be more readable to first create a new method on BKHttpServiceProvider that takes an application and is more likely to implement the process of removing additional components.
Should we be in a finally block?
How about the user trying to enable a hook which is already enabled? Also if there are up servers, command should fail
I would recommend calling.getStartOffsetInParent() + dot.getTextLength() in the TextRange constructor, that way it can be converted.
What should happen if the previous DR sync itself is not completed yet and new DR sync is triggered by job scheduler. 1.Do we need to skip the previous job or ignore the current job?. 2. Creating the snapshot with name vm.getName() + "-TMPDR" may fail since there will be a snapshot with this name already.
It seems that they should be removed and the blocks should be removed.
The upload and response can be made private?
Since we're only using java.util.Optional, feel free to use, just like I've seen in the code (line 336 and 438).
Can we do this or the boolean return value just like before?
please rename all local variables.
We are doing a chain of operations to get groups, so maybe this should be a single method
I would just call ruleInfo.getTransformationRule() here and let it be clear that we don't have to check for null or empty context.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
How about we use the constructor: java private Integer sqlType;
@subkrish This is your issue. Original code was directory, not file. @romani This is another common issue.
I don't think having a put like this will be preferrable to prevent errors.
Why not check if countLines(beforeCursor) == 0?
Still prefer returning early on error conditions. In this case it would be if (cursor.getCount() == 0) { cursor.close(); return null; }
please use System.lineSeparator() instead of \n to match the line end with System.lineSeparator()
@raver119 I feel like this should be in a util class of some kind?
Maybe this check should be outside the synchronized block as it could be in a finally block
Typo.
Yes, I think you want to work around this. Couldn't you not just call the method.invoke and expect to return the future?
If I understand this correctly, this is a normal case where we want to keep the current activity as it was before this patch. That means this method will need to get the current activity from the activity. There should be a getJdbcTemplate() method for convenience.
Would it make sense to convert this into a stream and have the expression handle the exceptionHandling? This could be a little cleaner if the logic matches the exception handling.
Formatting. remove.
There is no need for checking from 0 here.
above three lines as is taken out of the if-then-else, but consider using ternary operator
This line seems to be duplicated. Can you bring a public method in this class?
Call this method again after the other tests.
This variable is unused
I think this is more readable java descriptionList.stream().filter(x -> fieldApprover.approve(x.getDataInfo())).filter(x -> StringUtils.isNotBlank(x.getValue())).filter(x ->!NULL_STRING_VALUE.equals(x.getValue())).findFirst().map(String::getValue).ifPresent(metaBuilder::setAbstract);
Maybe a better solution would be to define size as Integer? The size here is in GB so it might be confusing to allow such large values... As for block domains we limit disk size to 8TB by default any way (ConfigValues.MaxBlockDiskSizeInGibiBytes). For file domains, I don't think we can have disks larger than 2147483647GB..
We should be using ReplaceKeysAsyncRequest here instead of this potentially related code. If the answer is not a String or an int, the reason is that casting the responseData to a String is not handled here, where the responseData is added to the responseData in the previous step. The reason is that instead of passing a String to the logger that is passed to the logger (there is no reason for this), the error will be caught, not be caught by the logger (which is what should be returned as is).
For readability, use String.format() (like others)
This condition is not needed, the above if will always return false.
I think we need a method for explicit shutdown of the Transcriber to keep it. This would do that for all of the Transcriber values that need to be pulled into a method instead of having to call it twice.
isn't this already on the other line?
This should be LOG.info().
Shouldn't this be checked only in case cluster is secure?
why not null?
Gsons better for that.
as above, need to enhanceRemotes
The WKT_STRING was added by avro (as well as parquet-avro), and now the test fails. It is not obvious what the WKT_STRING represents.
I think there is a problem with IndexingService between the two locks
or just assertFalse(responseData.getError().equals(ErrorResponseCode.INVALID_ID_TOKEN_MISMATCHED_CLIENT_ID.getCode()));
Why do we need this?
I miss the point in storing the feature in the openStream, it is not always executed because you only write to the one in the other place. Checking the existence of the feature is going to be kept as it was before
This should use an actual total value.
Use 'UTF-8" instead of 'getBytes("UTF-8"). I know I said this was existing code, but I'm not sure if 'UTF-8" is correct too.
We should use a WARN here. You should add a message to the log files too.
Why are these empty lines removed?
This whole block can be replaced by: VideoInfo preferredVideoInfo = video.onlyVideoInfoForDownloading(); if (videoHasFormat(preferredVideoInfo.url, VIDEO_FORMAT_M3U8)) { preferredVideoInfo.url = null; } return changeVideoUrl;
I know this is _ code_, but use braces for simple-else statements, more of these.
please try to build the variable, and add a try-with-resources to the test. It would be much cleaner and there less indentations.
I would prefer if you could avoid the lock by calling newByteBuffer() here.
"read chunk" -> "read chunk"?
same, extract
Formatting
Same here as before.
RecentPage is a batch of items, so we should be able to use the batch. I recommend using System.nanoTime() for a comparison, since it has a default much less time. The only reason this call was to replace users is if the column is not in the table, so that we can avoid the migration.
why not call this.createLabel directly?
Maybe there should be a baz property here that isn't included?
why not just use a do/while/switch/try rather than assigning an AtomicBoolean? java for (Map<String, Integer> key : referencedComponents.getItems())
There should be an AFAICT if you are not using the varargs array.
It might be better to assert that we are not there at all 10 sessionVariables.
If we still want the certificate Verifier == null, then we don't support X.509 right? If we don't support X.509, the certificate type/cipher suite negotiation should have failed before. So if we still receive a CertificateMessage with a CertificateChain, I don't know if we should log and raise bad certificate. I feel this is more an error from the foreign peer (or a bug at negotiation time). Maybe HANDSHAKE_FAILURE and the log about "invalid Certifcate message" would be more appropriate.
AssetSourceCollection(idKey, originalSource) should be a deterministic name. It might be fair to assume that the list of assetSources is completely non-null?
FIELDS_KEY is not enough.
Suggestion: Would have a message like "message:invalid syntax error:..."
No need for null check
Need to be version guarded in getMaskKeysym, as it is being called only in case the GTK 3.6 or newer.
I think this could be final
What is the purpose of this? The method is only called if hasAnyOrder( course) { return true; } else { return false; }
is this what you are looking for? Can you refactor it to something like: java if (ctb!= null) { changed |= co.onJobRenamed(oldName, newName); } else {... }
I don't think this is what you think it will be good to print on failure.
Don't we need to wrap the parameters in DictionaryAsMap.wrap(properties)?
nit: This could be moved to a else block
this is a small change - you can fix this.
This is not enough
pods should be created by a test pod.
This cast is redundant
Is the first check needed?
This is a good candidate for a fail().
Could this be simplified to java if (artifact.getArtifactId()!= null && artifact.getArtifactId().contains(dependency)) {?
You can use Util.isBrickDialog() from import com.google.common.base.Preconditions. equals;)
casting is redundant
I added the line above, is that correct? Although, what is the point of creating a rectangle with 0 height here? It seems to be the same with and without it?
This should be externalized - not a huge fan of the question form. How about "no icon for a category"
please use 'hostSupportedEmulatedMachines' instead of'requiredEmulatedMachines'
Remove the 'throws' clause.
Unnecessary when the string is the same.
throws BindingConfigParseException
can be directly called goals.add(createBranchCoverageTestFitness(className, true), and do goals.add(createBranchCoverageTestFitness(b, false)).
Doesn't this line cause you're checking for the same file?
@mcivantos-tribalyte I'd suggest we do not need to BASE here. There is a "pom.xml" defined in a util file, but looking up the files it can be named "pom.xml".
probably safer to use the form like surroundingBlocks.forEach(block -> block.extendExprGraph(fullExpr, null, surroundingBlocks.size(), block.size()));
Can you pass the string "redirect:/returnful" to the server.
The restart restart should be done on all the buttons, will pick up the configuration.
you shouldn't need to do this if you have already been opening the message (that is already a property of the trigger)
Make this "setupChildren" or "setupChildren" since it's used in the beginning of the test.
Can we add some logging here to make it easier to debug?
If you add an assertion for the name, you don't need to add it to the list with the table name.
This should be "toUpdate".
This could be a private function then in-line it rather than creating a local boolean variable e.g. return allHealthy( results.values().stream().allMatch(HealthCheck.Result::isHealthy)).build();
The current implementation in DataTableStats is also the stats for the stats.
Can we please have a different unit test for the case where the networkPoolDao was injected?
Can we just call Objects.requireNonNull()?
This can be moved to the beginning of the method.
I'm not sure why we should do this. I would not expect the ParserConfigurationException to be thrown.
Can you work on this _if_ instead of _ else_? If null, it would be better to have _return Optional.empty()_.
Do we want to extract a variable for it?
should use int x = 0;
No need for else
This also doesn't work. The compiler doesn't auto-close the inner writer unless it's assigned to a variable.
Replace this by "else(!((Projectile) o).isMassless()". It's one less method call.
I think the static import of TransactionConfig is the better fit here.
Minor: you can use assertSame for the parentResource getting null, instead of times(1).
We might set to true as default and throw exception (in my case) instead of only allowing negative values. Not sure what to do with this change
path separator?
I would prefer to move this to the site parameter -- the defaultTarget attribute in the OpenShiftLabelProvider called from the OpenShiftLabelProvider
This is not needed.
I think we should add a log statement here instead of catching an exception.
@ChinmaySKulkarni What is the expected behavior when it is a global view and only one (or some tenants) have the (offending) column?
is this correct? if so, move it to a private method
In this case you might want to preserve the menu selection better
Nice!
freeLock
As it stands, there is no need to insert a connection after the statement.
no need, please put it in configuration file at /usr
Any reason not to define the constants on the class: java private static final long 86400L = "this" + (conf.getJSONArray("delays").length() > 0);
why do we need it here?
this is wrong. You want to test that the DisksStores number of Stores, and that way you can just verify that the size is 1.
Can we have a test that always does a duplicate or duplicate?
we don't use braces around one line blocks
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
used callback style instead
:+1:
this check should take precedence over the pageview check. That seems more natural for clients to understand, that this is always preview.
I think you want to close the block builder when you're done with it.
Select target type to create
Is it worth it to dispose realmIdentity here? Or is it because you never dispose them?
This and the corresponding overloaded get is not necessary. Will explain below.
add a message to this exception.
Do you want to throw the exception, instead of catching it?
Here it is going to depend on the resilience strategy... so hard to say. I would drop the operation result assertion though.
Prefer getSingleFileReference() if you have one already existing file, and use that one for both objects.
I think it's the most important thing that you should check for counterClockWise - i.e., you could just check that the collection is not a MultiPolygon, instead of having all these duplicated checks.
Can you please recheck all the stuff on libraryProperties
in this case you'll reset the status to false, why is this not a part of the for-each loop?
These should be handled in another method inPreferenceConstants or something.
This seems like a debug output that should be removed.
Is there a reason we are not using this: AppLog.w(AppLog.T.API, "Error updating Jetpack settings", error);?
Would you please add the version to the msg string?
Please assign it to a variable to avoid repeated calls.
can be simplified to just org.apache.commons.lang3.StringUtils.isNotEmpty(exchangeName)
I don't see why we ignore the case - as this is an abstract class and not all the paths.
This line is not necessary.
Similar to the JDBC library, let's hide the entity column column names from the public API. EntityQueries.from(...) is a good example of external API.
The old constructor is still there, why did this need to be changed?
wrap this line
This is a good idea. We should be able to remove this stuff.
Why do we need this? I'd prefer to default to false.
This will cause the test to fail. Should be asserted.
I would add a check that secondArgument.isStringLiteralExpr() is not null.
Usage of ternary operators here will make the code more reader friendly: throw new WebApplicationException(400);
This is hard to understand. Why are you assigning the String value to a String?
Can the nativ be null? If there is no default case, please add a checkRequired(nativ)
I think!status.is().isEmpty() is more fail safe. Or maybe use a guard clause.
I don't think this check is right, because if a call to append another column, append another column to the end of the file, right?
This variable name is a bit misleading. It should be renamed to change
This doesn't look like it was needed (and it was in the original code) to be able to continue to use the database
Re-close the inner method as well
this and the following lines are not needed since they are used in the benchmark code base
I'm looking for an expert check on all these. The ones below are fine.
What about the following: if (TaskType.FINISH_CREATE_VOLUME, 3000L) { }
can you use Does for showing in different log messages for an IOException?
What about: "registerOnViewChangedListener" // the super class is called to be the wrong action?
Shall we rewrite this as: java if (sorting!= null) { Map<Path, Partitions> joinClause = query.getValidSortingRules(tableCls); builder.with(new HashSet<>(extractPathElements(whereClause)).collect(Collectors.joining(" ")); } return build();
@adrielparedes this method could be private. No need to expose it?
Typo. Should be cry
Do we really need this method? Why not simply use Collections.empyList()?
Why do we need to call printStackTrace here?
state is started but not stopped. Nothing can stop it if lookupName is already present
nit: You probably don't need to add this. here, since we are not using the getter outside of this.
Could probably take out this if; the null checks will take care of the case where these cases don't exist on Lollipop devices
:bug: this is not reliable. I presume you are attempting to somehow detect the case that a user "did stuff" (meaning, created items) in Jenkins 1.x but somehow managed to avoid ever saving /configure-possible, if very unlikely. But this check will be false if the user created top-level _folders_ but no top-level _jobs_ (or subsequently moved all jobs into folders). getTopLevelItemNames would be more appropriate. Or more directly: java if (!Jenkins.getInstance().getItemMap().isEmpty()) { // some items configured (Note that using getAllItems() etc. is not only slightly slower, but vulnerable to inaccurate results in case the caller is running with non-ACL.SYSTEM authentication.)
I'm not sure, but maybe we should have a custom exception message instead of 400? It seems like the user's own error message might be useful for debugging, but if the event that receives no data, e.g. "Cannot delete entry type {0}", entry.getClass().getSimpleName())
This needs to be a log statement.
Maybe worth adding some log message here.
Please use orElseThrow(() -> new AssertionError) instead of orElse(null)
Can we use to sleep here too?
Wondering if the test were failing. I did not see any test files that were created when using  miniAccumuloCluster, but it seems like it might be worth making the test case rather than the  miniAccumuloCluster call.
Why this change? It looks like it cannot happen.
If you use lambda expression here, you could probably do this: () -> {... }
should this be 'getClass().getName()'?
This logic can be moved inside the if statement below. The current approach will be more consistent if we want to do different things, but we could see the logic here.
I would use a singleton (but not to register both, Resolver is enough for that).
The line 108-110 are going to be a heavy processing. Could you use a cache mechanism on the jsonGenericRecordConverter?
GraphQL can return response codes of 200 and still have errors. Let's discuss with UI and figure out what we want to do in this case.
Why is it in the right place? Can't the object be available in the context or the activity?
invert this. java if (isSupportedCollection(target)) { return multiInstantiator.instantiate(target, parameters); } return conver....
Please change this to ICommand or moveArrowCommand = ((MoveArrowRequest) request).getArrowOrientation(); if (deltaStyle == null) { deltaStyle.setOrientation(moveDelta.x); }
Even better would probably to compare InputStyle and Text.separator with /somefile.
I think this method should either: 1. start with if (r1.getInferredInsertSize() > maxInsertSize) or return (Math.abs(r1.getInferredInsertSize() > maxInsertSize) || (r2.getReferenceIndex().equals(r2.getReferenceIndex())) || r2.getAttribute("SA")!= null)) 2. You can remove the SamPairUtil class from both SamPairUtil and SamPairUtil
Are you sure that updateApplicationKeyTypeMetaData is always called twice? Test case for all other methods as well?
I think this should be 'if (!isSublime)'.
It looks like this can be called concurrently. by multiple threads, each may create new threads. We should create the 2 threads for the same goal.
It looks like this isn't an issue, but the code should be removed?
Is there any way to keep the VBox(description, label) constructor?
I think this could be replaced with java keyValue = keyValueResult.get().map(MetadataProperties::reconstructKeyFromType).collect(Collectors.toList());
Let's check if this is configuration only if devfile is specified. I'm thinking that it's because devfile is present.
You can use the version bytes in the method
this logic looks suspicious. It looks like ban caller to add the rule that can change the existing options. RexUtil.isIdentity may have also been handled with a similar optimization as the merge will be restarted if any changes. So this check should be moved to RexUtil.isIdentity.
@Serranya same here. See above.
1. You can remove the catch clause at the end of this if statement
This should be deleted.
ColorItem is a boolean, so we can use that.
This line is duplicated in all tests. I think it would be better to move it to a separate method
I think here, we can use new operatorChainDAG to keep all operator chains in the future. AdjacentListDAG is already sth else.
log
nitpick: if you extract a method to get this
this method should be private
I think these two variables are not used?
I believe it may be useful to break this log.
Maybe we can reuse the words variable instead of calling " ", transform" again
You could factor this out. Arguably uglier because you'd have to use instanceof instead of separate catch blocks, but I think the reduced code duplication would be an overall win. } catch (IOException e) { handlePackError(e, p); }... private void handlePackError(IOexception e, PackFile p) { String tmpl; if ((e instanceof PackFile) || (e instanceof PackFile)) { tmpl = JGitText.get().corruptPack; // Assume the pack is corrupted, and remove the first element. } else { tmpl = JGitText.get().exceptionWhileReadingPack; // Don't remove the pack from the list, as the error may be transient. } StringBuilder buf = new StringBuilder( MessageFormat.format(tmpl, p.getPackFile.getAbsolutePath()));... }
I'd argue if this check is not needed and at the beginning of the method.
This part is the same in all the fields, why is it public?
Style: we use braces around if/else statements. It is not necessary to add new line before.
Shall we use auto-generated names here? <LINK_0>
Please use called the @Test(expected = IllegalStateException.class) instead of this.
I still think this back and forth bellow are better...
I think this still might need to be set. In org.jboss.as.server.ServerEnvironment its still referenced, and if present used to set a deprecated variable. I haven't tested that though, thoughts?
Don't use braces for single line blocks
I think it's fine to remove this assertion since the fact that it's only the DataNode, but for other test cases, only those that do not have the TdemState*
This is a breaking change, I think.
Same here - demotedContent.
Can you please remove the "other" checks?
I think this should be be a GIVEN test in the test rules.xml file, to have the common setup in the test rules.xml file, etc. Then we could just do new AemRulesRulesDefinition(MockFileLinesContext.class)
Why are you catching this exception just after calling addPartitionByExpressions?
So you are overwriting id into the map again. Why not just initialize directly in the constructor? Or is there a reason for a value in the constructor?
This should probably be moved to the pane.
Please add brackets to this particular line so it's clear what's happening
I'd mention this logic to be moved to library level.
nit: Add these parameters to the _input_ class, or maybe even the _ output_?
It would be better to add a io.file.io.File.readXX methods which throw this exception so that the stacktrace can have more information. It's also recommended to print out more information, as it simplifies debugging.
Remove findAny(). It doesn't look like this.
nit: use Assert.assertEquals() instead
nit: maybe make this private.
Personal think this could be as follows: if (!existingWorkflow.isPresent()) { workflow.setDescriptorType("cwl"); } else { updateEntryMetadata(workflow, AbstractEntryClient.Type.STUB); }
[sigh] should be [i]
There is a file called "pom.xml" that contains the name of the file. We can replace it with "/pom.xml"
You need to protect against wsOutbound.getMaxTextMessageBufferSize
nit: we could use TableReference.create instead of TableReference.createWithEmptyNamespace
I would try to re-throw the exception instead of ignoring it
roles is not used
Same here. The logic should be like if (transformProvider == null) { return cswRecords; } and then the subsequent method convertChild of the created metacard. That way as it's not necessary to save a few lines of code.
You could use boolean value = locale.trim(); if (value!= null) { locale = DEFAULT_LOCALE; }... if (options.get(NO_COLLECTION_OPT)!= null) { locale = DEFAULT_IMAGE_PREFIX; } }
Should this be removed?
Add String.format(...), not %n
Is there a reason why this number of changes shouldn't be sent through the context streams?
Could you check if the metricRegistry.histogram("card-executor.delay") is null?
isn't this redundant?
nit: remove unused types
I think we need to be logging the error.
What would happen if we're using a single vector pattern here?
I think this is good. We need to be careful about whether this can be done after a delete. I can see it being called in a method.
Is it a good idea to check here that PeriodicReplicationService.COMMAND_START_REPLICATION is > -1?
This should be part of the doSearchAutocomplete() method.
Why not there is a method called backupTableColumns(ITable table)?
Lamda?
Why not just use runVdsCommand() here?
This is a formatting issue.
As a small improvement you could switch L:86 and L:87, declare Class memberClass as final.
I would first set the flag and then update the first credentials ignored.
This should only be done in code here. If there are DbxExceptions in 429 and 429 code, there should be *deprecated* in reducing code, not the old message
Shouldn't the comparator be added as given and the existing items be "moved" to the new positions?
This could be made private
we need a better term than "group" here - perhaps poset-in-doc?
Collection
Consider adding an additional layer of abstraction for this block. This has very similar lines as the other two methods.
consider adding a log on failure
Can't you just add the patient name as the identifier?
What about moving this IOException into the try block? Also, it seems like we could be pulling from all the time.
s/containerProcessManagerFactory/containerProcessManagerMetrics
This log statement is wrapped in a 'if', but logged below it. It could be used to continue on L134.
Exception#printStackTrace goes to stderr by default.
How do we ensure that the workflow is in progress at the time of deletion?
Please check if this is empty which is not happen.
This Link can be instantiated in a try-catch block.
are you sure you need credentials temp variable?
why do we check for both lastEntry and lastEntry? It should be either one, or another. But not sure we should be consistent with the naming and error. How do we check in the next method or not?
Is it a case that user pass in a null pointer exception?
assertNotEquals?
The method will throw EntityAlreadyExistsException if the code is changed. The check can be changed to throw new EntityDoesNotExistException("Cannot regenerated registration key must not be found.");
I think this can be simplified by adding this into the try-catch block
This should be more concise and easier to read if these were split into two lines: final List<Field> fields = new JsonFieldTransformer(fieldsJson); fieldAPI.save(field, user);
I'd rather see this test as a static method and write some static final instance as well.
I would add a message about this, so we know that we didn't get a schema and not a name.
Can you make this a constant as it is used twice?
Should not be in the empty line?
I would prefer to pull this out into a constant. Also, is there a reason to use "hadoop-jwt" as it's sound consistent with the language?
This needs to be public.
can be simplified as: if (max > 0 && methodStatus.active.incrementAndGet() <= max) { appStatus.active.decrementAndGet(); return false; }
equals()?
This is fine. It would be great if you could have tests for VERSION_5 and VERSION_4_checks, and it will make it more readable.
I think we should use MAJOR_TIMEOUT here instead of hardcoding this, because the implementation has nothing to do with the header.
This should be closed in a finally block. When you use try-with-resources, the reader will not be closed.
Missing final
please use 'getStorageDomainDao()' instead of DbFacade.getInstance().getVdsSpmIdMapDao()'
Shouldn't content length of 0 be excluded from here?
Let's not register the failure to the transaction internal block as it is used for the ongoing transaction to start a transaction.
does this need to be it?
Please remove ()
This if statement is needed since you are not using the banner size to get the publisher ID when the banner size is changed.
I am wondering if we shouldn't throw IOException or RuntimeException, since all other methods in the same class are throwing checked exceptions.
do we need this synchronized block?
nit: newline
Can you please add a method named "networkaddress" and a parameter to the MigrationsBundle interface?
Method should probably be protected, given writing this for sub-classing.
The following lines can be replaced with a method that selfdescribes the purpose of the test.
can't we use pushMessageInformation.getServedVariants()!= pushMessageInformation.getVariantID() && isServedVariants()?
The methods setItemTree have the same implementation. If we call fetchTree() for the trace, should we use a different implementation for getTrace() implementation instead?
I don't think we should have this condition either. If it's true, it will just default to Object[] based on object
negotiatef I think it doesn't matter
shouldn't this be changed to call buildBlobIdAndAssert(version, this, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId, referenceContainerId,...
It's good practice to add a new RuntimeException(e) instead of using ExceptionUtils.logAndThrow
Add problematic host to the exception and also add the reason why can't. Because he has no privilages to use this hostName.
I think we should be catching RuntimeException here. An exception or something like that. In this case, we should silently ignore this error.
if we throw the exception, it should be handled by the caller of the method.
Single pass is needed here.
this doesn't actually throw an exception?
I guess you should return directly after the logging? And please log the task as well, so the admin knows which of the 10k jobs the log is talking about :)
![CRITICAL](<LINK_0> 'Severity: CRITICAL') Define a constant instead of duplicating this literal "length" 3 times. [![rule](<LINK_1>](<LINK_2>
Why are we catching generic exception here?
Can call editPart.refresh() instead?
This is also suspicious, I guess we shouldn't check if discoveryConfig is null at this point, but also if it is enabled, you should return null here and add it to the else case.
How about doing the following instead? if (!isCoordinator(injector)) { return injector.getInstance(defaultClass); } return null;
after a second look, I think we should do this only when getVm()==null (in the import from glance flow), otherwise when user will try to create a template from rest-api without specify custom-compatility version we'll use the incorrect version. bottom line, should be done this way only if getVm()==null
If you move this to a finally block in case of successful successful execution, the file may not be deleted.
rename to "result"
this check is redundant here.
I think it'd be better to have this as info, no?
This may not actually solve the problem because if the original exception is thrown after columnWriters.forEach(ColumnWriter::close); in bufferStripeData and before this line, then during rollback, we will still try to close column writers before resetting them. By reading the code, the following part could potentially be the place in flushStripe throwing the error causing column writers to be closed. java // write all data orcDataSink.write(outputData); As a first step, could you write a unit test to verify the stacktrace can be reproduced if the caller calls orcWriter.write(page) followed by orcWriter.close()? It doesn't have to be the full stackstrace matching. To make sure we can get into closing the column writers twice would be good enough. OrcDataSink is an interface that can be mocked. In terms of the actual solution, I may need to think about it. But feel free to propose a good one.
Let's move this to the block, since it will be closed in finally block anyway.
if we have a patch set already, please rebase this one.
Same as above, indentation seems off here.
Why is this necessary and can be done in the previous loop? If we have files in the same directory, then we have to delete the.
This is old code and the other tests.
Please get the instance name from bigtableInstanceName.toGcbInstanceName(), if it exists.
I would replace the pe1.lastAccessed with something like: java if (isnt(now)) { throw new IllegalStateException("No cleanup failed."); }
why are we looping twice?
Wondering if we should use Util.getStartupType() here to check whether the plugin is starting with UPGRADE already.
If you want to use the doOnNext above, you can use a java.util.concurrent.ConcurrentHashMap.computeIfAbsent()
Same note above about missing curly braces and relying on a a default-constructed ReferenceSource applies here as well.
Please add a check that the params are passed and make sure all the params are called using the queryMap
Leftover debug statement?
You have this exact same logic a few lines above. I don't think it's a good idea to update it. I feel like it would be a separate util method with a different name for the tenant
Nice catch!
style-nit: no braces here
Surprised that the admin has a form of "INSTRUCTOR_COURSE_DETAILS,". Any specific reason for that?
Do not stray system out please
This is not the same as the previous two, can we please use ternary statements as much as possible?
Activator.logError()
I prefer Options.builder().putAll(options).put(SetMemberSearchRequestEvaluator.OptionKey.AFTER, searchAfter()).put(SetMemberSearchRequestEvaluator.OptionKey.LIMIT, limit()).build();
Do we want to keep this particular try/catch block for the tests?
For sake of symmetry and clarity, could be an parameterized call?
typo in method name
What about NetworkException? Is it possible to use more specific exceptions?
monitor submonitor stuff.
This test should also verify that the ACL is not null.
I think we should move the for loop into the first one.
space between ) and {
Why is that moved down?
The Bundle.contains() methods can be made into order.
This return should be moved to the new method so that the content of the method is correct in a way that for the category, not to have two return statements.
I think I expect here: if (!persistentAuth) { if (FiltersHelper.IS_SESSION_TTL_OUT_SESSION_ID_KEY!= "Prefer", false); } else {
I think you mean _superCategoryButtons.addAll(scButton.isSelected());
Test here should not be to beginProcessiong, this test would need to change the message in a different test.
what's the point of this?
you can move this to DomesticException class
you can simply return here.
Why on earth do you use a LinkedList for this?
@chaviw just removing this line break.
Hey @rcpeters, I think I agree that the relative order of the keys should be StringUtils.isEmpty(token.getTokenSource())
Not to be a little female dog, but generally good style to include the else in the end of the method: if (Predicate!= null) { return Arrays.binarySearch(floatArray, input) >= 0; } else { return new DruidFloatPredicate() { @Override public boolean applyFloat(float input) { return Arrays.binarySearch(floatArray, input) >= 0; } }
I don't think this is really needed. If other callers already have the directory,.close() should fail.
Shoundn't this already happen inside the method? If not would it be possible to push it down there instead of creating new object each time?
What about future.setTryPauseMillis(TRY_PAUSE_MILLIS)? If you use Slot#isTryPauseMillis you could move the initial logic and add options that can be added to the PartitionIteratingOperation# calls.
suggestion if (resultValue.isSatisfied()) { expectedResult.resetStatus(); } else { if (resultValue.getErrorMessage().isPresent()) { expectedResult.setExceptionMessage(resultValue.getErrorMessage().get()); } else { expectedResult.setErrorValue(expressionEvaluator.reverseFunction(resultValue.getResult())); } } } I know it looks a bit spaghetti like, but at least it is more readable
why did you change this to compile?
This will give a logged-in message to them (as well as via the previous method) which will give user the message to the user.
exception, so STDERR
Values seem to be of a particular user. Change them for notNull asserts or something that can be run by anyone.
Consider making these 5 lines of code (allocating a byte buffer, filling it up, and flipping it) a helper method in this file.
I am wondering if we should add a method to the operator request that takes a "message" and returns a "message" for the "when" chain.
Please use a logger with the updated approach.
huh?
This is a bit of a legacy code, please extract a method with a descriptive name.
Suggested to pull hasLowerFloatBound and hasUpperFloatBound = 0L; to make applyFloatPredicate()
If you need a barter with a SecurityAction, you should not be processing this string in a convenience method. I think this could be: java TwitterFactory.getInstance().util().ComponentUtils.base().new TwitterFactory().getInstance().severe();
why do we need this change?
this would match with the enum returned by setVmType?
return ancestorStatements.stream().filter(statement -> statement!= parentStatement).filter(statement ->!isSimpleReturn(statement)).count() == 0;
This isn't going to work correctly for the cache, only it is registered once per segment.
emm. you just set the vlan status to 2.x, but this is a no-op.
Consider using a conditional here too so that if the!isDestroyed is true, it will immediately return right?
Please log the exception so that when no action is provided, the system will have a chance to look that it had it.
You can also set the true as the second argument to false.
This should be DateTime.valueOf(item.get("id").asText()). It'll be the same as the other one.
should the string be the identifier of the cookie class, not the string?
What if the result is a T?
When we use a try-catch in the future, I believe the RuntimeException should be thrown and rethrown as a RuntimeException.
This model is not a global variable
you could do here itself if (getWindow() == null) { return; }
Remove this.
1. compare both equals and hashCode? 2. If not, consider to use Integer.compare(int, int) instead of compareTo? 3. If not, return a -1, we should be more sure that equals => other.compareTo(major) == 0.
nit: would be good to have a test that verifies the size of the array, even if it's the same.
logging and throwing an exception is not much useful
Well, I think the following is better: java Collections.sort(actual, Comparator.comparingLong(Group::getId));
Would this be better as package private instead of protected to minimize scope? Since there's no subclasses in other packages, is there a need to be protected?
We don't have to fully qualify the variable here, so let's make sure we are consistent.
nit: doesSucceed -> isSucceed
again not: why is this called for every project?
Would be nice to wrap this on a class attribute since it's used a lot.
I think this should be simplified by using : if ((symbol == null) || (classMemberUsageState.isSelfMember && classScope!= null)) { createOrUseVariableIdentifierSymbol(tree); }
Should we catch the NPE?
Please revert this change, too. e.printStackTrace() may help debugging, but I think we don't much need this.
I changed this to: if (trace) log.tracef("Attempting to receive replicas from %s with topology %s from %s with topology %s from %s with topology %s from %s with '%s'", segmentId, entry);
Could this line also be called from the activity/util? It's called exactly the same from all activities and sort of intuitively fits in with that method.
I think we don't need these two log messages: date, time, and time.
Please use perun.getFacilitiesManagerBl() here instead of setUpResource().
This looks like it should be Message.release() (I think).
why public? Please rename to something like supportsGradlePlugin
This is a bit tangential, but I think it could be private.
synchronize this method with a lock.
Please make the method private
we need {} elses here
Maybe we should be adding a check for null and empty check here?
Why is this hardcoded? can't be hardcoded? I know the answer was, but I'm fine with this.
remove.as("The region should be empty")
Why is this better than a switch statement?
Why did you move this and not under the "try" as well?
<LINK_0>
"==" should be declared in constant as well
For this instead of.map(clientWithSeq::value). I think we should prefer to pass the entry directly and not use it on the map.
This check should not be required at all.
@ekondrashev Same for toString
could avoid some duplication by refactoring this method to something like String get musicionAlias(String pluginComponentAliases) { if (isNullOrEmpty(pluginComponentAliases)) { aliases.addAll(asList(pluginComponentAliases)); } else { return null; } }
can be replaced by return ch == A || ch == T || ch == n || ch == n.
I see you are using this method but not here. This is the same as the first weight weight of Score.
Why not use the setter directly?
remove block as in: boolean nonMatch = stream(actual.spliterator(), false).noneMatch(e -> { try { op.accept(e); } catch (AssertionError ex) { return false; } return true; }).collect(Collectors.toList());
What about using the following code: ActionObserver.removeSingleDockable(Action, action, defaultLocation);
If we want to avoid block (which is bad) then better to use e.getMetaData(key) instead of toString() on the getMetaData.
Can we move this to _DEFAULT_ RSS_BASE_URL_LENGTH?
If it is during construction, you can call LogicalTypeUtils.toObjectArray(elementType) instead.
OR(?0.bool0,?0.bool2,?0.bool4)
Could we instead create an Immutable List of errors and re-assign the size of the list? It could even be a List.of() by using an ImmutableList, and then adding the elements to it.
I think this is not needed. We already check for null.
Do we really always to CRLF conversion - even on binary files? Wouldn't this corrupt all checked-in jpegs? Even if the file contains e.g. a null byte in the first X bytes - something we used before to check for binary/non-binary files? Or have I overlooked a check here? I always felt that the lack of git attributes which we could use to specify what is binary and what is not is the biggest obstacle why we didn't have autocrlf.
this is just a request but I believe the code is the same in MetadataType.CONTAINER_LOOK and code looks very similar. Maybe we can add a common method to avoid duplication and reuse code?
can we add e as the second argument to log message
Just readability : java final Bitmap dataloss = sampleCounts.getFailure(); final String taskName = sampleCounts.getRollupSampleCount().map(task -> { metrics.add(task.getTrigger().name()); metrics.incrementCounter("rollup/consistency_checker/query_successful", task.getTrigger().name()); }
Can you break this line after passthroughOutboundPatientDiscoveryDeferredRequestAuditLogger is used in both methods.
Call the acquireLock method first before releasing the lock.
rename to selection
Need to be careful here. What will happen if we have a file tail but a directory that is files files? I can see the diff between files and files.
Not really related, but this reminds me that during a demo, it was a bit of a pain that we should use a different strategy, like.transform() (or.or(this, new Object[] { "name", "values"), getValue(originalValue)), though I am just wondering that new String[0] is quite general.
Use a.contains(...) method to do the contains.
Did you mean to use the / instead of a /?
Maybe I would prefer to have a dedicated log message, like: LOG.info("Starting running flows", e);
throw new AssertionError
Also handle the case where the parameter is null?
If we haven't read this code, we should use "java.util.concurrent.Futures.Future" to avoid copying.
Can you make sure that it is properly handled and if it does not exist, then you can remove the method isDirectChild since it is always true
I would simply use forEach and then you don't need to create a stream and a bit of memory.
Prefer preconditions to check access modifier to prevent NPEs. If I have that access modifier applied, other methods in the current class should be removed from all methods.
you should check if the master is the same as the previous test as well
Is there any reason to avoid all those strings in the tests? It feels like they should be test codes. Maybe even a test with only those test cases.
You should freeLock() before the transaction is committed.
1. Do we need to add the 'final' to the menu, or should we just add the menu to the message here? 2. Do we need to add the menu to the message menu when the menu is triggered?
Why do you need to change the length of the String?
:bug: this should not fail under..
more efficient. There's overhead to creating an exception. In this case, we know the array was not array.
Keeping the literal for simple data is not enough, you need to keep the format consistent with the other methods. (Deater, if the format is not set, you need to keep the final value of the field, and handle the simple data format with the simple data format.)
Replace with: java StartIdentifiedAtlasDbTransactionResponse transactionResponse = transactionResponse.immutableTimestamp().getImmutableTimestamp(); recordImmutableTimestamp(immutableTs);
Would it be better to not repeat this check in testQueueConsumerPriority()?
This should be a precondition.
Let's continue to use the old "if" condition. It should be a completely different behaviour.
I believe that this is not properly indented - this should be 4 spaces
I miss something, you should be able to directly write to plain SQL, so that there's a chance of failure in SQL?
what if you have boolean fstring? i.e. boolean bstring = s.charAt(s.length() - start);
This should be: String result = String.format("defaults", Integer.toString(result)), which is passed in the constructor twice.
please don't change this here. this class is already imported in the field.
Given the verifyeroInteractions that you inserted aren't these individual verifications redundant?
Just use!index.isEmpty()?
Can we not add more metrics to the circuitBreaker but just circuitBreaker.getMetrics()?
s/unavailableMDevs/unavailableMDevs/
guava or some more? List<IPath> result = new ArrayList<IPath>(); result.forEach(child -> collectPaths(child, result));
This looks a logic change? Is this correct? If this is a bug fix send it in another PR and update <LINK_0>
nit: assertThat(rs.next()).isEqualTo(2)); is nicer.
I think we should be calling VmIdentityChecker.extractyAnnotatedFields() here (or do the conversion there)
"this" should be in the task configuration, to avoid the repeated logic here.
Same question as the catch isn't the same, but the logger can throw exceptions. The proper thing is, if the exception was already logged, the logger can be traceed.
why don't you just use the existing zks that you create in setUp?
This is incorrect, you can just do this: java if (instructors!= null) { instructors.removeIf(st -> st.googleId.equals(userInfo.id)); }
set the total row count to 100 here
In this case I prefer to just delegate to the default constructor. That way each listener can be registered, which can be considered as a singleton, and avoid doing it twice.
Could we give the [] values to IndexToolArgValues as variable?
Please use log instead of e.printStackTrace()
"this" is not correct.
formatting
Why not assertAccessibility here?
I would rather use warn here.
nit: this should be public, no?
Multiple getIndicatedServerNames() maybe clearer, if get once and stored in a local variable.
same, we can do something like.map(bre -> new Json((String) bre.getResponse()).getSilent(ApiCommand.class))
It would be better to have the signature inprotected void processResponseError(ReplicaId replicaId, ServerErrorCode serverErrorCode) and remove the case from where this method is called.
Can you fix this?
You don't need to do this here because StringUtils.isNotBlank will accept a null pointer exception, which we could be null
I think this should be a Expressionconverter to handle the invalid field mappers. If you need to do this for all the types that need to be handled differently, you may need to update the TypeInfoFactory.booleanTypeInfo instead.
remove method name
Is this actually a needed method? Maybe need to move it to a ConfigSyncChannelFactory?
The field_name should be integer/number here, because the nightly job will be doing a math calculation on it while purging stale tags.
I would prefer if you get the whole stack data from the Collecteriors method. It's better if you're extracting it into a method and then called while, rather than in the loop.
check for null and make exception (it's not thrown by the controller)
would this be better to use a separate key for the course object?
Why not just have it hardcoded?
You don't need to fullybox the fixtureUtil at all, as you are done with the same offset.
Move the close to the finally block?
You can use a constant.
since you're changing the name of the variable, can you change it to something like: java return recognizeLayoutPoller.client.beginRecognizeContentFromUrl("file_source_url");
This is a debug message.
add value of out to the error message
Can you make the number of available slots instead of just the identifier? I think it would be better to put it in a constant.
Add a description, in the json doc, just the endpoint can be used instead of Pipeline. Something like: Pipeline -> pipeline.map(PipelineConfig::getPipelines).forEach(v -> { linksWriter.addLink("self", Pipeline..)); }); }).collect(Collectors.toList());
I believe you need to use a separate test for _null_ test here (and looks like it's for the following example): java assertThat(new ErrorExpectation(NewGTFSErrorType.HTTP_ANY_overlapping-trips), new ErrorExpectation(NewGTFSErrorType.HTTP_ANY_e_LENGTH, "1A00000") );
Why are we closing the transaction?
this will break the line in the error. i think it's better to add a support for this in the log file
rename'resource'
I'm wondering if logging and continuing is the right fallback here? Ideally we'd probably want to leave the event unprocessed rather than ignore it, but as echo doesn't really have a queuing mechanism, I suppose that failing is probably the only option.
Can we call this something more generic? e.g. AccountAttributes account = AccountAttributes.builder().withGoogleId(student.googleId).withIsInstructor(false).withInstitute(student.course)).build();
is this really "is" or is it "is" rather than "is"?
assertThat(links.size(), is(1));
Typo in AbstractQueryOperator
redisConnection should be accessed as static method.
I think this could be moved to a parent class of ooKeeperClient to keep the work of creating all the hosts and passing that object.
This also needs to be reworked once #6327 is merged.
suggestion + "All ledger directories are re- writable and force GC is enabled.");
nit: I'd suggest debug, but if you change the logging level to debug, you won't need this if the task id is not set.
@vilchik-elena Why not use null?
I'm not sure if this method is very important to verify if the post-down fails. Please move it to the presenter and call remove from clickFinished() method.
I would extract the order of parts in order to make it more readable.
Could we split this logic into Charge not available in ledger <LINK_0> Also mentioned in <LINK_1>. It will be useful if we will have updated charge and ParityCheck status to status ledger
Can you move this check to superclass?
Where do you come up with this?
Not sure I agree with removing this line - but I think the sanitizer already calls unsanitizeConnectionParameters and conn.setPassword will be called when the connectionList is empty, so you could just use the result of the sanitizer.unsanitizeConnectionParameters.
This may not be necessary.
We probably don't need to log this here. It's a good idea to throw a KeenException in KeenUtils, since this class has a several other to do with the final PR.
if (jsonNode.isArray()) {... } else {... }
store the span name in the ss, it is more relevant to tsr
Does this need to be done if leaderElector.hasLeadership?
Makes sense to use the toString for the system name.
rename to p
Can you explain why this is needed? I would expect it to be in the above clause of the if below.
If the profile is set, it won't be called.
Instead of "identity", use the constant AccountConstants.RANCHER_ID.
Shouldn't this be: if (!autoAck) { Thread.sleep(); }
The same question about this method, isn't it?
Why not using the [storage_domains](<LINK_0>?
I don't think it's a good idea to have a message for the handler in a message, because it may be too big. When you have a message, it would be nice to have the exception message in the log.
It's actually quite unlikely that GranularityType.NONE.getDefaultGranularity().isRollup() is not used, but because it's true. If it's null, then make the test explicit.
Is this really needed?
This is inconsistent with the existing methods: null (empty and non-empty) - Exception in thread "main" java.io.File, and you need to call close() on it, instead of this client :)
It'd be nice to add this method instead:.setExclusive(customOnNoConsumers).setCore(globalConfigurationManaged).setForceDestructive(customOnNoConsumers)
objects cannot be null after the constructor. (write if (fTrace == null), you will get a compiler error)
please use Cluster#hasGateway
why is this a final var?
suggestion logger.debug("Searching to container id {} and is {}", caseId, containerId);
Couldn't you check against the exact same message in both the call to TRACE_LOGGER?
You can also use BatteryStatus.getValue() since it was our way BatteryStatus.Value.Value.Value.
This assertion should be deleted
Should use a different method here instead of reading all 4 numbers.
Can you put the methods on equals and hashCode implementations so that they can be reused like this under hashCode?
TechnicalException
What is the purpose of "-ResourceState" in this context? When datanode is down, tear down will be AVAILABLE
Use Strings.isNullOrEmpty
mnt_options and vfs_type are relevant to posix too.
I would prefer to move this to AbstractExecutor as you see it's not creating an async queue.
[minor] Space before Object
If user has accepted selection of let's say 30 elements (without the 'd') and after the dialog seems to be shown. The user should be able to cancel the dialog.
If description is "just a request, write this request" instead of "Request", use the return type of SnomedConceptCreateRequest.
Suggestion: Can unrelated changes be pushed as separate iteration?
Adapters should be used here, if you move this line after the if, as the code below will be easier to read.
Why do we call it again? If it's a complex loop I wonder why it is better to maintain and retrieve the entire stack trace in your loop.
One of the semi-colons could be removed.
You should be able to use. joiner() with () and.append()
This can be moved into the if (isHtmlBody()) clause.
I think we should use an 'getExecutor()' method here, otherwise it could be called by multiple threads, i.e., 'onCreate(this)' of the same object
It should close the histogramLogWriter before closing it
minor: probably better to put the try-catch inside the createConcurrentClusteredMap()
potential NPE: db.getObjectDatabase().checkoutEntry(db, f, entry.getKey(), fileName);
I think this change is not correct. The perun could have removed ext source and additional identifiers, but it would be a problem to catch business like this.
Why not Collections.singletonList()?
Shouldn't we use.show() instead of.get()?
The same here. No need to acquire locks
this should come after the volume==null check
split the both a 'exports' and "exports" into separate variables.
This method is used in a few places.
Is this property really needed?
again, please print the error stack trace in console, instead of printing it in output.
You need to verify if isToBeRemoved is true.
Do we need this change?
help to pull out to a logger.
What about the following: if (TaskType.FINISH_CREATE_VOLUME, 3000L) { }
Could you elaborate on the purpose of this change? In the case the input file cannot be a directory (or is it handled in the process or not)?
Same thing as before.
It's a little weird that you're putting the value here.
Consider creating a private method that checks if config instanceof RefreshableInstanceConfig and then calls that method here instead of the above if/else block.
If we keep the stream, can we make this this line shorter?
This test is actually the same, but just a little indirect way to test. That method would be better to change the test to just call the resulting GET action.
forgot to commit the printStackTrace()
what about Boolean.valueOf()?
I would say that the string should be "(".
The only method that calls this method is HiveS3Optimizer::isCompressionCodecSupported and that method is unused, so both can be removed.
we also need to check if it is enabled otherwise we should load the native prepush hook if existing. Otherwise you effectively disallow using native prepush hook with jgit pgm since it always registers BuiltinLfsFactory.getInstance().getCloudObjectMetastore()
- [x] Not required to check isDebugEnabled, because no heavy function on logging.
Can't break early here. Wrap the next loop in a null check instead.
nit: variable name should be changed from _ to _dynamicMetrics
Using Long instead of long could open the door for returning a null object.
Can this be replaced with putAll?
There shouldn't be logic in the Bean-classes, please extract it to the TaskService. Furthermore this code is duplicated in the "GeneratorSwitch" class. Please consider, what the code does and where it should go.
I doubt this is related to the issue you're trying to solve actually. But _if_ you want to make a fix also for this here, then synchronized is not the right way. The potential issue you're facing is that a non-AWT thread is invoking this method (since it's a separate thread). And all changes to AWT (and thereby Swing) must happen in the AWT dispatcher thread. So instead use WidgetUtils.invokeSwingAction(...).
Using Optional.empty() makes this condition easier to read.
I think we should close the personnelFile here. It is unnecessary to check for null personnelFile.
If we read this and the line 390 should be removed and also be stored in the log file.
I would prefer to have a common name for this variable.
The MODULE identifier is already defined as a base class attribute, so all methods should be replaced with something like: new MODULE_NAME.toLowerCase(java.nio.Trace.separator).toLowerCase(Locale.ROOT).startsWith("/", "")
This will not be useful in the default configuration where metrics are not throttled. A better "possibly throttled" detection would need to check if a persist is running right before we submit a new one to the persistExecutor. That is racey but probably fine given that the check is only being used to emit a warning.
please replace with IReleaseUtil.getExistingPath(executionEnvironment)
Why divert and retroactiveResourceName? Why not have the retroactiveResourceName be added to the message message? With a message, you've got to add the addressInfo and the retroactiveResourceName should be added to the message--review as well.
Please use the formatting style for the file-only lines.
Please use new ArrayList<>() with its default size.
Other implementations of Comparable in Java don't even check for null, do we have to?
I suggest to use a doReturn(indexResponse).when(client).hasParam(new byte("*")) to avoid creating a new Utils..
could you use put(1, PUT_RECORD_SIE, Utils.Infinite_Time) here?
There's no need for warn, just replace.
Should this be an actual [Response payload](<LINK_0> so that the JSON string is not required?
Probably consoles should be logged in a proper log.
Why not use model?
Same as above, would prefer that we assert on the invalid list size (obtained from txClient) instead of on printed output.
Style nit: checkNotNull() isn't needed here, checkNotNull() isn't needed
We need a mechanism to specify that certain microservices get exposed only on certain ports. According to this implementation, all services will always get exposed on all ports. It is ok for now but create an Issue so that we can address that in the future.
It is prettier to use a boolean variable name on the left - I don't really like this API. Let's make this class more explanatory and just use it for the return statement.
do you mean, noStdOutLog?
May be just retry policy in this case?
Maybe I missed something but could you implement this as a method parameter since it is already logged?
why not just do it as a filter and have the attribute set to the default value?
I think this could be changed to a single test case, which is more robust.
nit - please decrease log level to trace
this should be done in debug log
Can you make "now" twice?
Is this needed?
Please use Optional.of(FatalProtocolError.class)
I think this needs to be done in MetadataTableUtil.setupTask, which hides the problem's code. If you want to do this, the code at least should be done in the init() method.
Shall we please keep the null check as well?
checkState
I find the test easier to read like this: part of the test.
I think the hashed custom API should be prefixed here by the R.string.analytics_label_custom_url? This would allow us to return a list (or count) of all custom APIs that we've seen. So, it would look like CUSTOM_URL=8nh2j02f.... Otherwise, if we have only the SHA-1 hash, we'd need to filter for all custom API URLs that aren't region names, which would be much harder to implement/maintain.
Please add a method to createMeasurementRowsFromEnvironments which takes the correct Id to be generated and reused in the other tests.
Please replace with 'else if' for readability
just put this once, and use use_cql3", m_useCQL 5.
This is too complicated. I think it would be best to break it up into multiple lines.
Please move the instanceName to the end of the test method.
I think we need to return here. It's not needed to indicate the login.
It is better to handle this exceptional case as we are not adding a method with that name in the params map.
any specific reason we have a separate function for this? I would suggest creating a generic function that takes in the column number as a parameter, then both these functions can call that one with the appropriate column number
Please use parameterized logging instead of string concatenation.
add 'user' member to stack.
I think you should use S3Client.toUsingTransaction instead of commit committers. That will also ensure that any associated test bucket creation failed.
You should simplify this if-then-else, just return?
nit: "hadoop token information" -> "current user is not set"
I think this should be a.equals() check. It's possible that the process is a user and is the same as the current time zone. And in this case the class is not set with the right size.
This complicates code quite significantly. Can you move it to a separate method?
use rows.isEmpty
if we fail here we have a stale VM version in hand. we should roleback
Would it be better if we move this check into the for loop?
May be worth providing the bucket ID of the tx id to help with debugging from the logs?
can make this a constant
Can we rename the method and the createAllEventProcessor/createAllEventProcessor methods to match the _stior_ thing?
Instead of these setters, did you try doing this instead? configurationBuilderHolder.getGlobalConfigurationBuilder().read(gcb.build()) What  does is take the base configuration objects that you read from XML and override them with whatever gcb contains. Is that what you're trying to achieve?
Just a small nit: it might be more readable to use getOrDefault(form, UI::buildDetailButton) here.
Hmm, can we really get rid of the two static strings?
i dont think clear is needed, it looks to me its called only once per run
If you move the name of the extension to a common place, then you could play well with extension point, so the extension point could be changed.
consider using a mixpanelPushNotification.getData().getTag() that's a used constant
The if block is not clear to me, maybe this should be a 'else' block.
This change will break if the metadataString contains null. Better use.trim() instead.
nit: unused
Resource leak? If rss.close throws.
Use namedConfigurationBuilder.rawContent().
Why do you need to increment counter?
I'm not sure this is the right place to look it up. The log is in sync with _nonOperationalPools.remove(pool.getId()). This is being done in one place but I don't see how we can recover from it.
This looks like it might be a LOT, but the test case might be too late.
Move this to the log line?
Is this done in the beginning of the test?
Why do you want to log the returnedPositions? The return presentation is not used.
current version of this code is a bit fragile. I think using something similar to the new version. Consider taking a look at the usages of the constants.
!(mpart instanceof MPartStack)
same. Replace "maxDeliveryCount:1" with "MaxDeliveryCount:"
this will be easier to understand if you just had a local variable for the link.setValue(null);
Can we remove _logger.info("Running job {}: {}", jobName)?
why was this removed?
Extract smaller methods.
The printStackTrace is not needed here. Also, I think it was better to have the SQL syntax in the default form: if (a) { throw new AssertionFailedError("connection was not deleted"); }
also could be removed if you just change the name of the method.
java if (extensionFeature instanceof EReference) {
Can't we just import java.nio.file.Paths.get(config.getDockerHost().dockerCertPath())?
use the constructor - and provide an entry-set in the constructor - and you could update the parameters as well
@barbeau I would expect a leak here. This code is racy.
This is a problem, but please call value.trim() instead of doing String.split(;) - it gives you an Array of String which is over the number of characters. You can prevent an implementation that will convert more characters to String and then split.
@mcivantos-tribalyte _successi. Should we still keep this project (the abstract projecT) query here? Or should we look for all repositorys query?
Static import?
shouldn't we be using deleteOnExit() here?
Should this be debug level?
Shouldn't we remove the Realm and its management files?
Why remove the Scattered stuff from addClusterEnabledCacheManager?
Store this in a variable instead of calling it multiple times.
Please add to the storage domain so the user can debug what was not on the console. You could use a other way around to check that the storage was updated by adding the matching properties.
Could be static
If we should only log this when logging is enabled, maybe log it higher than debug?
Minor: you could use AsyncUtil.closeAll instead of multiple flakiness.
If this array isn't meant to be modified afRequirements instance will be modified aftewards, which will have better read performance (and no potential synchronization issues).
Save as... --> Saved? Seems like a better design would be to clear the board (not actually saved) and we shouldn't have to iterate over the panels and triggerEvent.
This test and the test before would be more interesting if just the "id" parameter was replaced by a VariantMongoWriter (now we are not using it for testing).
Seems unnecessary add a null check, but than at the start of the handleManagerFactory it doesn't validate any of the things on the class.
There should be a test for elemMatch.get()
I think it would be simpler to maintain this loop, i.e.: if (hasExpressions) { expression.getExpressions().get(i).accept(this); } else { return false; } This way we avoid the need to maintain the remaining conditions
why is shutdownNow necessary?
Shouldn't we have a static method with a reference to the thread's lock?
As mentioned in the previous commit, there is no need for this change.
I think you should use something like this as well: java users.entrySet().stream().filter(entry -> entry.getValue().getRoundedOneMinuteRate() >= mean).forEach(entry -> entry.getValue().max( desiredMean));
Should the test be both 1 if should be the same? In general, you should only have one validation for both values.
Why not to get it once?
Unnecessary empty line.
use {} syntax for LOG statements
Would this be clearer as the expect of the two lines below instead of the declaration.
I'd like to avoid batch += :) This isn't a simple concatenation, it just isn't worth it.
It is easy to think that the rest of the method is part of this class. Try to always use braces, even if the body is empty: if (this) { // Empty on purpose. }
you should use <kMeansFile> [kmeansFile] <kApplyFile> <kApplyFile>
log.tracef
I'm not sure whether there's implications at run time if returnExpression is not exactly the same as the given returnExpression. Is there valid reasons that we don't want to handle multiple return types?
There's a method you can use for this.
Please use config.getProxyPort() which introduces the default Authenticator.setDefault(authenticator) if necessary.
We should probably just return a more meaningful message here. I think that we would need to change the message to "Could not create cookie".
Does it make sense to track tokens in a header?
UndefinedDatabaseException should be handled.
I would prefer to have all those generic types (new IndexRange(0, shape.length) and matrix.getDouble(i, j)).
+1 violation message, not only error message
instead of adding a map to the map, would it be better to use the list directly?
you can't ignore a 'e'
This test is not executed for all requests. One question is whether uaField was mutable, and why is not field-safe? If it stands, this is not the case, it seems like a bad design to me.
If you are expecting this to be be spammy, there is no log level. if there is a WARN then I think it should be fine, if we are not throttle timed out, or if there are no request to the throttle timed out?
suggestion var value = new ArrayList<>();
Isn't this & logic is correct? and and where is the flag should be unset?
Use getPath() to make it more clean
Unhandled
Can we please have a unit test to cover this?
I don't see the need for this 3 lines as well.
Are we sure we don't need to use Type when creating the patient?
This may be move to another method because we can't return anything in this case, which is not how we want.
Change this to private.
Don't need a line break here as well.
printing stack trace is not necessary
Should be > x1
In this case, don't we have a toString() method?
Can you rename these to function names?
Would a List now be enough?
Please add a note about why MySQL, Oracle and Hibernate 4.2 and 4.3 aren't supported.
I would add the realm name to the add operation, since it launches the operation.
Missing final
You could use the constant here, like org.apache.libaba.java.api.namespace.NameHelper.java
awaitRetentionExpiration(500L); -> awaitRetentionExpiration(500L);
May be we can store the instance of this object in a field and make it final.
Is this dependent on the computer's time zone?
This should use Locale.ROOT in most cases.
Is it possible to have cheProjects.addAll(project.getMetadata().getName()) here?
Can you make this a bit more readable? Maybe put in a function that takes a string and returns the first segment of it.
Remove this loop
You should remove that empty catch block
Why only the first field? One could just use md.getCaseInsensitiveIndexes(md.getEntityInfo().getIndexes()) here.
This will break logging again: LeasedLockToken is not loggable by our logging infra. So either get rid of the LeasedLockToken variable or figure out how to collect the stuff you need in a way that's loggable.
null check
Missing final
IdeaPatcher is now generic. Can you rename to "createProject" or something similar?
Same as above, this should be Boolean instead of Boolean
This solution still does this lookup and these tests potentially many times for the same parent project. And although you know will limit the returned values, you are still incurring the cost of iterating over every project here!
if ttl is specified, then log a warning rather than siliently ignore? Could even throw invalid exception given that only either all path entries get stored in the request? Should MessageInfo offer a constructor that does not require TTL so that 'unset' TTL is hidden behind its interface? 0 or -ive TTL seems like implementation details that should not be required in the interface.
Here you're just checking if the Type of error is valid.
Can you collapse this if statement into a single if statement?
It is getId() of the pool -- see the other Tracer invocations
Since the topologyDescriptor contains standbys, I guess we can change the topologyDescriptor to have the new standbys map only once.
What about calling into multiple cases?
it seems like we should be able to obtain this from the scheduler. rather than having a job object, but for the event metadata then throwing it. I think we should be able to get rid of the null check here.
I think it would be better to have a matches method of the Groups here, which returns a list of Groups.
Use a constant for 99.0 seems so high.
I suggest to use Operations.UPDATE_TTL and TTL_UPDATE_REJECTED_ALLOW_HEADER_VALUE instead of r. (for consistency)
How does this now compare to Dockstore-CLI? I'm surprised that this does not compare to Dockstore-CLI.
remove
I feel like you should inject this threadpool, when an internal product instantiates a lot of these it will probably want to reuse the threadpool
if none found?
I have question about this config. Will this determine the serverfactory for ambry-frontend and ambry-server?
Should we change this to private static boolean isValidOverBlackListPatterns(String input, String blackListPatterns) {
Shouldn't we check if (e!= null && (e.getCause()!= null && e.getCause() instanceof CancellationException))?
why not process the bricks and list the bricks, list them and vdsm? (just a note..)
This error message has no meaning to me, maybe just say "The bank has a country code of Canada. We can't verify that this is the right term?
Use static constant for "ts" in the code.
There's no need to reference equality of the class name as it was previously.
I think this should be a leftover of the test that add system folder as an artifact.
Same nit: don't need to add a throws here since you catch the IOException
Do we need to wait for the event here?
nit: the if statement is good, since the iterator initialization is inside synchronized block, and you are only doing 1 lookup. It could be easier to read.
Did you mean to use the following instead of the previous error message? java throw new IllegalArgumentException(errorMessage, e);
I think the current behavior is to check whether the map exists and if it does not contain the old owner, we should throw a RuntimeException here. This case is the only possible case, where the map is not created.
Minor: TIMEOUT too may be a better fit for timeout
if dataCenterTokAddress is null, the conversion to a Map<String, String> would be sufficient.
Magic number
what I don't understand is the the send of the key in the close method of the send operation. Why is there a timeout to close the send after the close is called?
You might want to use org.eclipse.swt.events.SelectionUtil.setSelection(Consumer) for this one. This is needed in both 8, and -2.
Is it possible to remove this? In the future couldn't _read_ the one above, but here's why?
typo
Use assertEquals instead of == operator combined with assertFalse, prefer assertEquals instead of == operator which already works with assertEquals
Should be NonNull at the beginning of the method.
you can keep this code after you are closing the 429 code block
Redundant with the oldPath.
I think this will do more gracefully than throw an exception. Can you check if this is in finally?
we should also update the semantics here - we don't want to re-show the newly created project for this project.
autoClose means that invoking [dbClient](<LINK_0> created a an empty object instead of a null. We should consider making it safer to explicitly pass the created object using an empty list.
Please use ellipsis.newSize() instead of these two lines
This can be removed
Should we check for null here?
we can avoid this String concatenation
Is it necessary to just put if (project == null ||!project.hasPermission(Item.CONFIGURE)) { return null; }
I think this is a bug, it should be able to set the JVM option to a default value (not set) if the JVM is configuredGC. This can be done in the constructor.
This needs to be static final
Should we just always use a boolean to indicate whether it's a valid peer?
do we need a timeout to wait for it?
Should it be removed if you're not adding this DC as the master?
This seems like a hack to refactor the kerberosRealm.getRedirectParam() implementation into a separate class. It would be better to just have the URL as a parameter.
Why do you wrap it with an ArrayList and not just return bitbucketToken.getContent() directly?
Why is this needed? I'd rather remove the if-else statement
Prefer DirDir = "target/ + desc.getClassName() + "/" + filename.
I think this could be more readeable. this should test only if trace is not deleted.
We should probably use the separator for the slashes in the /stor/multipart string as well.
This is very minor, but the test is for tryLockRequest -> await(lock.unlock()) which also throws an exception. Also, this asserting that the lock is actually not allowed to fail. It might be better to fail("Should not be failing from majority partition " + lock + " " + ex.getMessage()), or even use a different message.
Move this condition higher
this is already a string, no need to initialize it again
can we avoid this listener? CommonModelSelectionChangeEvent.java# inside it's own variable.
This could throw an exception?
This seems to be failing compilation.
This two lines of code can be combined into one.
can we rename the string -> docId for more clarity
this should be log.trace("Delete successful. Transaction url: {}.", elementId, e);
What about adding a little view to the Refactor?
I'd put the space before the curly brackets
Can we rename it to INVALID_PARTITION_FAILED
name1 and name2 are unused
Should this be closed?
Why does this need to be in an else block?
should be 10
This text should not be externalized
Response is never closed
Should be my ignorance with my PR too.
This probably isn't needed, unless we click on it?
It seems like this validation code is missing for the *Required* annotation. Is it?
Suggest adding a new method to this if clause, so it will just return encounteredTypes
Please don't change this line
c instead of.next() here for Connection?
You might want to change that 3 lines to a single method that takes the validation. The meaning of that is a bit misleading and really a bit misleading.
cleaner way: return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_INVALID_CONNECTION_PARAMS);
I'm not sure why you're not using the same message here..
I think it would be better to have a single scheduledExecutorService.runKerberosLogin() method. This has a the same code as in: java /** * Override the async method to invoke from the async client, */ public void runKerberosLogin() { scheduledExecutorService.submit(this); if (runKerberosLogin()) { logger.info("runKerberosLogin failed for {} ms, calling close interpreter."); } else { scheduledExecutorService.submit(this); } }, getTimeAsMs(getKerberosRefreshInterval()), TimeUnit.MILLISECONDS); }
Consider using parameterized logging instead of string concatenation.
the switch statement is not needed.
Hmm, is there any reason to do this extra cast here?
The following code causes several build to fail: * Add a timeout to perform: Action failure = Window.open(jobXmlUrl, "DownloadJob XML"); if (status!= null) { LogModel.getInstance().logMessage("Downloading job '%s'? This way we will have multiple'resource's in the Job and thus we won't be able to reuse it for all the'resource's.
Same here. Will this cause the 2nd param to be false?
Doesn't look like this is used
It will be more readable if you put each into its own line.
maybe better to keep this as info level since we are not interested in the actual PORTs
This is confusing. Let's discuss it to point out if you should be using an enum.
Is there a reason why this method is removed?
The resource folder could be found in the XML file://. I would a log warning.
I thought our talk offline approach to avoid using the "service reference" logic [here](<LINK_0>
Why is this change needed?
I think it would be a good idea to log this when it happens. If the user does not specify what TTL is used and it will only use it once, let's let it go up.
Use fail again.
This line can do with : if (protection!= null) {
not sure if this should be a DatagramWriter
I don't see any waits to be woken up by this notify?
I think that you need to check that the attribute is not mapped by this point. It is the responsibility of the entity to be able to retrieve the value if the attribute is not mapped by a given value. If the feature flag is true and the value is not mapped using a value, it always returns the value.
You're checking for tuple == null - you should, too, use!symbol.isEmpty(). Also, you're checking for null on the expressionList, and, sometimes you're checking for it's aErlangExpression, not an expression.
It's confusing to have the config file in a different way. I'd suggest to assign it to a local variable and have the if (initializeTest(Configuration.class,...); inside of the try-catch.
Looks like you're missing a return in this case.
Minor: I'd personally prefer moving this inside the switch block. Also, if it is [here](<LINK_0>
This can be moved outside the if
ugh, blocking ALL insertions while you're iterating on the whole thing to do a query would be a huge slowdown. There needs to be locking in here, but it's really something that would be abstracted nicely in a separate "BufferedBlockingQueue" class.
final
remove useless blank line
Use %s rather than %s unless you need specific formatting like %02d. It's safer since it works for any type.
This could be factored out into a method as well.
It seems like the toString is not necessary anymore.
Shall we move this to a private method and default to R4j?
Might want to check if the new is an instanceof STARTING here, since DepositRecord is a Type in its own place in this class.
What's the use of this empty line?
Instead of using Boolean.valueOf(boolean).toString(), just use String.valueOf(boolean)
Calling getDoneStatus() here will remove the try catch block and fail the test.
This should be a test error.
I think we should also verify the error message
The null check can be removed (same for password)
this should probably be an error?
Please change this to: if (response.getStatus() == ConfigurationUpdateStatus.SUCCESS) { entityManager.merge(update); } entityManager.merge(update);
Any reason to just don't use color color instead of color color?
Why this change?
externalize strings
You're not checking whether this is the deadline instead of the deadline. The deadline would be deadline.
@omkreddy can you make similar changes here as well?. I had missed this in the previous review.
The boolean debug log is not necessary, is it?
use assertFalse
Why is the authentication extension "?
acquireLockInternal() is already called before the if statement
this is because there is no function with a parameter that is not a string, if it is a bit more complicated than to start with 'a'.
With this logic, there is no need to fetch the full table first and then assign it to it. Curious: What are the variables declared in doSnapshotIndexes()?
fail
The original code was better.
Minor: is it worth logging once?
1. Let's make it a warn instead of a debug. 2. The error message can be more specific here: Error while retrieving task from current task.
Shouldn't this be specify instead of specify?
This is entirely pointless, mDevice is null anyway (not initialized).
The judgmentConfiguration should be stored in the properties file. So, the value should be like "//h/toShow".
Random again, I dont think you need to create a new ticket for this.
I think we should have an overloaded method that takes a Probe for the purposes of the code.
Instead of an explicit if clause could you make it an else if? if (set!= null) { recentSearches.addAll(set); } else { recentSearches.addAll(set); }
I don't think we should be doing this. In fact, since the master is in the global furnace configuration.
The caller has a higher cost than this else if block. I think this would be better off simply to do: if (startDate!= null && endDate!= null) { queryBuilder.add(...) } You can have the below loop always. You can sort the result in your current simply: ArrayList<Object> result = new ArrayList<>(); result.add(new BasicDBObject("someone")); result.toList();
Can you use the context of the view later?
Same here. We should make the error message more explicit about what happened.
Cache this field.
modelLine(..) should not return values below -1. This change should not be necessary.
just a nit: this should probably make it a constant like: private static final Set<DataSegment> EXTENSION_FILE_EXT = "descriptor.json"; and make it a constant like: private static final Set<DataSegment> EXTENSION_FILE_EXT = "path"; and then use equals(port) here rather than "path".
Is this the correct way to filter this before opening the orig?
using "byte[]" here is unnecessary, because "can getKey()" will return null.
Same here. Please take it for nullable methods.
Same issue here (it would be useful to track the upstream history for instance).
Ev, it might be a good idea to change this to warn?
Sorry I didn't realize the other dependency on this PR, but I think that this line is unnecessary and can be placed only after the if statement.
Does this mean that we never add _DEFAULT_ TTL to Ehcache rather than _DEFAULT_ TTL_SERVICE_NAME_PATH?
Maybe this should be outside the if/else block so that we don't have to do the same things in the request method.
nit: Can we assert the number of events, something along the lines of: events_really_ re-fetchedRecords() and updateMetadata()?
Minor: can we pass in ledgerId and use it in argument instead of toString(). That's what are there for the LedgerMetadata, and we can do it here as well.
warn.
please add default to true.
An alternative is to check null for raisedExpression.is(Tree.Kind.CALL_EXPR) and do something if null, otherwise use: java if (raisedExpression instanceof HasSymbol) { symbol = ((CallExpression) raisedExpression).calleeSymbol(); }
Thoughts on this if we just remove it. This is implied that it should only ever be called when we get a module that is triggering a branch of the flow (like when this is being called).
I think you can have raw string instead of %s and avoid the concatenation
Can this be: java if (unsafeParamNames.isEmpty()) {...
I think this does not handle the case of the deep nesting and very hard to understand. Potentially, it would be better to create a way to determine the intersection like this and call it from the base class in the actual subTypes.
there are a few issues with the else clause here: <LINK_0>
You should be able to remove this if statement by checking if native interaction is enabled
Remove this System.out.println, it should be done via a logger.
This probably should be done in the loop as well, or the list of game thread safety issues.
This is confusing. Would it be safe to lock the inputTransformers before CDM configuration or CDM configuration?
Should be "if (!p.isOpen() || projectLocation == null")"
maybe use assertThat(client.getProfile(), is(new ArrayList<>()) here
It should be highestPriorityServers.size() + 1
This should probably be factory.generatePassword(clearPassword) and the following lines should be new PasswordCredential(otherPassword).useCredentials(password)
The exception should be logged at the end of the application/json.
Should we keep the startup counter in the _real_ environment? Can we create a single instance of this class?
This is definitely not thread safe, because it should be handled before the "while" statement.
If you use a stream here, the collect() call will be easier to read.
CollectionUtils.isNotEmpty(cmsAdmin)
Thinking out loud, wouldn't it make more sense to use the file creation time, or the last modified file time?
this whole block is repeated several times in this class, maybe we can extract it?
suggestion return false;
can it be null?
Ti nicht?
This is confusing. Should it be made lowercase?
I think this could be better as a factory method like: java private static final String errorMsg = "UrlUrl"; and use it here instead of asking for a test to look at it.
I don't think we need to check for transactional methods here as well.
Do we need the checks both here and in the WindowAgg operator? If this code could handle other definitions already as well I think we could keep with one limitation that is closer to the components that would have the effect.
Can we use a lambda here?
![MINOR](<LINK_2> 'Severity: MINOR') Remove the declaration of thrown exception 'org.hibernate.exception.Util.exception.ProtocolException' which is a runtime exception. [![rule](<LINK_1>](<LINK_0>
It is better to avoid hard-coding the workspace into the log which is unexpected and I think it should be a problem
Don't log exception
I'd also add the getAdapter method to the WebArtifactUtils for this.
Could be extracted to a method.
You can just use a straight-forward 'buffer.remaining()' call (that's more readable)
i would prefer if (searchPrefix == null) { return; } there is one line below.
In order to avoid the duplication, you can just do this(null, table, table, directoryHandle, HdfsEnvironment.class, table, directoryHandle, HdfsEnvironment.class, HdfsEnvironment.class, HdfsEnvironment.class, HdfsEnvironment.class, HdfsEnvironment.class, HdfsEnvironment.class, table, table, directoryLister);
Please use try-with-resources to avoid explicit close()
if (count == 0) { return... }
This footerBuffer could be replaced with a boolean type.
This should be get(context, false) not a PathAddress address.
Typo: "Feeds" should be "StateThreadpoolChecked"
I think the new approach was fine, but why don't you just call the validate method from ValueExtractorDescriptor?
Nit: looks like we're using this constant and just use line 422 to indicate that Blur is in the list.
redundant parentheses
Why do we set this to final then?
no need for the exception
I am reading the class again again and I think we do not need sourceIndex anymore
![MAJOR](<LINK_1> 'Severity: MAJOR') Remove this unused method parameter "indexer1". [![rule](<LINK_2>](<LINK_0>
Can we have a helper method for this?
suggestion if (status == null || status.startsWith("Pulling from") || status.contains("complete")) {
You can use a [ScheduledThreadPoolExecutor](<LINK_0> to save all the necessary work?
Dont sense to call this 'cleanModelDesc' with a method like 'createModelDescription(..)'.
Looks like we always use StringUtils.isEmpty, no need to use ArrayUtils.reverse. What is the point of adding?
I think the exception should be more like a DotDataException
Not worth changing the commit for, but this could also be replay(command, response, cache);
this is basically the same expression, where we index out of bounds.
Casting is not required here
This will cause a NullPointerException when entry is null. Better use Indexed<E> Indexed<E>>.
This is probably better done using GateKeeper.setBlobstoreService
The batch is a no-op. Please use a batch to update the batch.
I think it's cheaper to do the container check only if persistentCaches is enabled, and hopefully it is not DefaultInterceptorManager
this should be set to true explicitly so that xxx can be used to set it to false
This isn't really all of the affected code systems?
Nit: I'd have inverted the nested ifs here :)
since we already have the project, shouldn't it be NOT_CONSTANT?
What are the states for this? Is it necessary to keep the 'length' in the list?
does this need to be logged? if (!docs.contains(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE) { log.trace("Option: '" + expr + "'"); }
I think this can be int firstRecordExpression = 0; and then the else block is redundant.
can you please extract this to a constant
not sure we should be using this operator but I think we either will call create(state) or we should be passing it in to the logger.
you can use lamdas here too.
Please avoid one letter variable
I'd prefer to remove this line, so this is fine.
Suggest naming some more details, e.g. byteCount
Too long
I'm surprised you didn't use a lambda... :p
This method can be written as: <LINK_0>
Is there a reason for the change?
why will you ignore the output?
This should also not be an error.
This needs to be a fixed constant.
please replace with: VmDeviceDAO dao = getDbFacade().getVmDeviceDAO(); it will ease mocking when writing tests.
this could be replaced with: java if (parent.isPresent()) { firstParent = parent.get(); }
I think it will be more robust to assert that originalState.name() is not null and also assert it's not null.
These are not correct, INSERT is not schema compatible.
Change first occurrence to Set
Please use meaningful variable names. x.t.x.t.api.util.Map, which is more descriptive.
Are we sure we want to un-static-ize this? Can't we get the trace from the EventDefinition?
If we can be more specific here, we should find a way to find out why the invalid data is INVALID?
This test is ok with json assertThat(collection).containsExactly(object2) and other tests are comparing with equals().
This message should be informative (maybe just not included).
Please use a space before (
Does it make sense to also add the value of queryType in the error message (e.g. it's also null or empty)?
please add the decodedBlocks.length to the end of the method.
Consider refactoring this into a function called addBuyOrderToOrderBook or simply addBuyOrder.
Can we avoid using kLayoutManager directly?
is this expected to be a pass?
Is there any way to get the host and have the extension point provided by the volume?
Would you add the organization to the log message?
rather than needing an ArgumentCaptor here, you should just be able to do any(onedDateTime.class)
prop.getValue() returns a string, not a String.
Nit: line breaks here
This is not a public API, so no reason to override it.
Please remove this one
I think it is better to do nCopies(int, int) in the loop and then return codePointsToSliceUtf8(codePoints.size() - 1);
We need to append new instances of these objects to append ",", otherwise this will cause some issues to debug (not sure if this actually works). I'd suggest renaming some occurrences to 'StringJoiner' or 'tostringJoiner' to make the code more readable.
schema can be null
No need for typeTextArea. If you don't don don't use Mavo expressions for page content in this test class work please rename this variable to better naming than 'book'
Do we really need this classname? I guess there isn't a class name so I would just put the class name in the log.
still don't like this - so move this outside of the try block
Would be better to have a WARN log message after constructing it.
There is an extra space between the { and brackets.
I'm a bit confused by the name of the variable. Why not just call the asserting the status of the line?
You can replace all the try/catch with Assert.fail() and the one below this line
We also need to check if the member is a constant, otherwise the HAB will always be true.
This isn't a simple value for a project. Why not use [Collections.emptyList()](<LINK_0>
Actually, we can remove this line. Yes, I know you did not add this, you just copied it from the existing source - but I looked into the details, and it only caches textures, which are not being queried here.
Is this method used to be used from the base SubProcessPropertyWriter?
Why not use an enhanced for loop? For each refactor?
Either log or fail, or move the test to the else block with a message.
why did you change to final here? should be outside of the scope of the patch.
This may break if we have some threshold.
Use Collections.emptyList() to avoid unnecessary object creation
Use a variable for the game and return it if it does
I think this would be better done as two cases, 1) if profile, add it to both registries and 2) if package, add it to just the package registry.
to go again, here it will not work.
Should be check for null, empty or null (if it's not)
Can't you just use the one in #facultyMemberEditor.setFirstName(_firstName.getText(), _firstName.getText()+" "+_lastName.getText());
Minor: I think we could use java.util.Optional#ofNullable(String) instead of this cast.
the field seems to be already initialized to a class member, and then you don't need to do a redundant check in getAllHostNetworksByCluster()
I like hardcoded numbers. You could use a constant in the IndexValueListener base to ensure coverage.
This should be removed, the BatchUpdater should not need to be applied to the top level cache, this should be done in the setup method
Also the ID is not really high enough, I think it's worth doing something similar to what is done in Updater. Not sure if it's necessary to build an entity here, but it's not a high level completely.
Removed it
Missing setLock() qualifier
The field name should be readDepgraphs.
If we store a local variable for QUERY, is there any reason to use it?
I think the base would be more consistent with the method name. Got the "." here, and could simply be an extension point.
please change this exception text to "Could not load resource from file name:" + fileName
Let's change this to debug()
whitespace is a bit off here
You could maybe use a for-each loop here (and in the next method)
There is already a Logger.debug(String, Throwable) which prints the stack trace as well
Could we verify that the rescheduled is actually executed?
s/ Try setting TMP_DIR/Functions
This doesn't seem to be a safe test. There is a way to test that the order ref is equal.
This method can be simplified by using a single constructor call.
Please use the format: LOG.error("{} DevMachine Id: {}, DevMachine Id: {}, found servers: {}", WS_AGENT_SERVER_NOT_FOUND_ERROR, machine.getWorkspaceId(), machine.getId(), client.getId());
We can use assertThat(metadataService.setUpAttributes(path, metadata)).hasValue(options);
Same here, updateGroup() should be called only if the groupId is null, but the current behavior has not been changed.
shouldn't this be on the line above this?
final
There is a few more places where we're using try-catch for the generic type here.
Please also add some docs about the operations you made in ThreadPoolUtil: public static <T extends V> List<Callable<T>> syncLunsForStorageDomains(Collection<StorageDomain> storageDomains) { return storageDomains.stream().filter(storageDomain -> storageDomain.getStorageType().isBlockDomain()).map(storageDomain -> (Callable<T, StorageDomain>>).collect(Collectors.toList())); }
Use getSpmColor()
Are we guaranteed to have this? Are we guaranteed to have just one? The whole thing should be the same? Are we guaranteed to have one?
Missing braces
why this and the test that was added?
I don't know the rest of the test class, but perhaps my eyes can't see the reason to change it. Would you mind checking the version? I could find it just because it was not available in the test class.
line 138 and 118 should be replaced with: if (ha) { getModel().getLease().setIsChangeable(vmLeasesSupported && ha); if (!ha) { getModel().getLease().setSelectedItem(null); } }
You can use FileOutputStreamConstraint.FileType#equals() here.
Thanks, did you mean to leave this logging?
Minor thing, but argValue > Threshold.getThreshold(name) seems to be the only value of Threshold.getThreshold(name) check.
Maybe we should use ctx.writeAndFlush(outBuf) here?
We should log this properly too, I think. Errors in this class don't always bubble up where they can be inspected easily.
<LINK_0>
The logic is already parsell. You can remove the if(bp.getMarker().getResource()!= null) part.
@apearc03 ASL header may be slow here for much reason.
Can we avoid to use streams?
sounds fine to me.
Can you use.isLength() here and.entity("Require start_ts & end_ts").build()?
<LINK_0>
you need to call finishAndRelease() on both channels in a finally block to fix LEAKs.
Shouldn't we verify that this method is called only once? Or is it it override by default in / runTask?
Should we do this only if!clean?
Please catch and log the exception as well
fBot can be null
You are skipping region for non-CodePoints from a property. verify(int codePoints.size() > 0, result.length);
It seems like standard practice to add methods on Endpoint without including final variables.
Use.equals() instead of!=.
The "DISTINCT_VALUES_COUNT" method should return an optional, not just the minimum.
why not keep it as is? and the more general as possible to do if (time <= 0) { assert?
move this to a private method
constant?
Is it possible that this returns null (or in other words, a selector fails to create a connection to the desired host,port).
Couldn't Granularities.ALL be used here?
I think timeout should be a sirius preference.
why the two cases are the same (if the status is already set to false), wouldn't it be better to first fetch the status then pass it to the log?
This whole method is a bit hard to read. How about we change the buildSpec part to something like: "Project creations at beginning of test".
code duplication
free the lock in a finally block
We could add log to exception or re-throw it, because we will be able to continue processing the exception.
Is this debug output necessary?
please declare variable in first usage
This one could be also moved to @Before, you could delete it and later use @After
You should never set the type to _index, as it should never matter.
Add final keyword.
Map.Entry?
why?
@maria-farooq What is the purpose of making the statement synchronized?
This should be declared in ApplicationConstants instead of Class<?>[]
Shall we use StringUtils.isEmpty() here instead of "".equals("")?
In this case each test item is expected to be the same. I don't think it matters since we need to use hamcrest matchers.
Because destroy() is now async, there is a high chance that you will start initializing before it has completed its removal. You probably need to get a hold of the CompletableFuture from the runAsync() in destroy and wait for it before initiating init()
String filterText = filters!= null? filters.get(parentNode) : null;
We should log the exception too
Can you change this method to call timeone.convertLocalToUTC(localSec*1000, false) instead of default timeone?
You could move this to the top of the method as it is called from 3 places.
return new double[] { 0}, "1.1" };
<code>@CheckForNull</code>
This seems to do the same as calling getOrCreateComponent seem to do it?
For all the metrics in this file, you may want to look up at these metrics.
Can be removed
You don't want to display the information to the end-user!
@CarlosGines let's inline bout here as well
i think it is better to remove the field and not use the same reference object.
you should check for null template
I'd put {} around this even if it's a single line.
You can use ImmutableList.of() which gives you an empty list.
In general this check is better:.startsWith("null cannot be cast to a null type")
There is already a setNegativeButton(buttonLabel, dialogButtonActionPerformer) method that is being used twice.
This is an error for me during review: can you please add some assertions?
you can use JsonObjectBuilder for this
Should we do a close here too?
Probably should log this exception as well
Here, seems like you're not able to add the error condition to the validation method, maybe you can leave the code that is not null.
By this point, you're right. Suggest to use 'for loop' here.
requireNonNull
I don't know this part of the code in this block but the fragCont.discard() should be called outside the while loop.
I think this should be log.error.
May be worth providing a metric to get the gateway account id and the gateway account id?
@cvrebert let's inline it
lambda?
Similarly, Tasks.forException(new FirebaseAuthUserCollisionException(...)) can be used instead of the mock.
<LINK_0> This should remove the IndexDiff which is currently working, it it is not valid to have the index info available for files that have been modified while it was working.
rename to key
This should not happen, since it will generate a node for every single test.
/hashtags/?
Yes. You are populating the map concurrently as the result of each render future is executed. Nothing guarantees synchronous access to the map.
Move it outside the loop. This is most simple.
Where does the "active" happen? (I would rather use something like a static final String NOT_SUPER_TENANT_DOMAIN_PORT)
If inputStream would be declared as class variable, then it could be closed in @After section of junit test. Then we could omit try/finally block in test methods
make this method synchronized
If isTraceFileRotationSupported and is not enabled, we should set the default resolution to the TraceLog.
Why not initialize the class directly? This allows the method to declare and return the appropriate array.
Please remove the change to the error message from the error message if the exit condition is not met.
why BodyInternalTypes.AGENT_ENTITY and not AGENT?
the interface should specify the pin be attachable method of ServoControl.. better yet, we need to attach the ServoControl object.
maybe should be a switch?
This looks like a leftover from debugging.
Can you also use Objects.hash() here and below?
After the change this assignments to delimiter is ignored, so it is not please change it to delimiter. To maintain backward compatibility, the tokenized path is correct, please change this asset path to contain just the body.
Is it really needed to fix the typo in APITrace?
pls make this a final static List<IConfigurationElement>
Please use Verbs.gather instead of "READ" here
any reason to not implement this as FEATURE_CUSTOM_TITLE?
why a file here instead of BAOS like others and before?
this should be verifying the lines of code equals and hashcode, not the same with the other tests.
Value is internal, so, we can do the switch and get rid of the Value public from the Value class.
consider a Set
if it is a Disposable, you should call it from the if instead of just directly accessing / dispose of the dialog.
I'm not sure if this is the right place for this.pos = pos; and below.
You don't need to add the element style like this - it's already attached to the DOM in the model, and is then overridden by the method that is overridden in the model.
The first half of this method is duplicated.
I would prefer to avoid throwing an exception if they can't be set.
Name of variable is really important, but it looks like you could have a singleIdentifierInfo method which is created which takes a byte[] and and the method name could be unique. Therefore I would move the if statement into that method and change the method name to be unique, like identifierByte and uuidByte. The method is exactly the same as the identifierByte and uuidByte.
I don't think this is needed, as a transaction is an insertable transaction. My ure is that 1. Create a new transaction in the DB. 2. Remove this transaction. (I know, I don't think it makes sense, because then the mint inserter.commit() query could mean to continue in the.omit.Transaction() method. This is an example of how TckRepositoryImpl#posting.
Should we log the exception here?
is there a difference between this and the other tests?
I think we should just catch ClassCastException too, isn't it?
Just an idea: can we remove this trackAndPost method and just push it to the AnalyticsUtils class? Then we don't need to track it for the user to read it from the ReaderPost table.
Minor: is it possible to add some message about the failure cause here? Maybe something on lines - Failed to add index {}
please set it 'null' in the signature of the method, for consistency with the rest of the patch.
Is there a reason you want the list of modules to be emptySet()?
This should be done in the updateContent() method above, for consistency with the rest of the class.
Not sure if I like the idea of having a special treatment for 404. I think it might be good to have a default case for 2.
I appreciate the centralized code of this approach, but i think it is going to result in all the preparation of the centralized code. It may be hard to go with this approach without a larger code change
Please add _ prefix.
The DISTINCTCOUNTHLLMV is an enum, which says the same as 1.
![MAJOR](<LINK_1> 'Severity: MAJOR') Introduce a new variable instead of reusing the parameter "unused". [![rule](<LINK_2>](<LINK_0>
Could this be switched to something like Failed to edit label, created by the edit label? Also, the exception doesn't need to be formatted into the message.
@ikhvostenkov please name it json
Should not you use anyMatch here?
Maybe we could rewrite the conditions to something like: if (catalog == null) { catalogByName.getCatalog(catalogName); if (catalog == null) { catalogByName.put(catalogName, catalog); } if (catalog == null) { catalogByName.put(catalogName, catalog); } return catalogByName.get(catalogName);
@vilchik-elena can we put this string value on a final static field?
move error log to condition body
I'm a bit confused, but we should move it to the private methods, and restore it here.
put final on purpose
this if statement is not needed
You need to check item.getLikes()!= null
This doesn't seem like the right log message.
I understand that the code is repetitive in both update and update methods, but I assume that only the first registration will be executed on the objectLinks, which is the desired behavior. Can you consolidate?
Nit: this check could be made static
@luyangco Why not just pass the exception as a second argument to.NETR_Logger.warn()?
Do not use this if the getUriMaker() is not null. This is the default implementation.
I'd like to avoid calling nullSafeToString multiple times since it may be costly to compute the array.
It might be better to use.trim() here to avoid.trim()
Minor: looks like a bit strange to me. I found a util method if this is just: java assertTrue(guidePostsInfo.getMaxLength() == 2);
This line needs a colon, to make it "getVElement().setCollapsed(true)" I would also like to make it "opened" I would rather have it "opened" '2', so that it will have to be localized in all cases, and that would be a mistake.
Just an idea: What about wrapping record.getData() in a static field?
Would be simpler to always use Job.OK_ID
Do we need to close in? If in.read() returns a byte array, shouldn't we use java.nio.charset.StandardCharsets.UTF_8?
I believe lastSegment.trim() can be replaced with append(lastSegment.trim()) which then will cause an NPE. You can try this by leaving the program text box empty.
append(new String(currentRemoteRegions)) ), not need to format it
if (SupportNullKey == null) { return new StateMapView.KeyedStateMapViewWithKeysNotNull<>(stateTtlConfig); }
Why assume this?
add whitespace to if statement
suggestion log.error("Couldn't start JdbcSourceConnectorConfig.QUERY_BLACKLIST_CONFIG, tablePollMs);
final?
@ivandalbosco Why not use [dynamic width](<LINK_0>?
Can the return statement be simplified to a single call to the method?
Wouldn't it be better to remove the publicShareOperation from the DAO as it is used for testing?
there's an issue here - when running the vm as stateful, we'll get to this else block (as there's no stateless snapshot) and will detach the user although everything went fine. generally speaking, i think that in this flow we can inspect the result of RunVm instead of running the endAction() from here (Example - <LINK_0>
Please use parameterized logging.
I would use semaphore.of(Integer.., Integer::intValue) or Math.toIntExact(Integer.class).
@candreire here, I thought we used to have this condition when we start < end, but it is more robust just to check the beginning and end >= totalSize not a multiple of the end?
So, we now have two files, but the files are now filtered in the @Nonnull, right? That's the reason I ask for the files after it was removed.
Would it make sense to create a constructor with an overload of accountConsumer that takes a RequestOptions parameter and then call that one instead of the other constructor?
Left over?
Nice! It's a robust approach to include this in the logs
a typo (governance)
Change this to a single line like the if statement above.
I'm wondering to be more clear, perhaps this verification should be moved to after line 25?
This would be better to use injectionTargetFactory.createBeanAttributes, e.g. something like: @Override public <T> Object create(Class<T> attribute) { final AnnotatedType<T> annotatedType = beanManager.createBeanAttributes(annotatedType); return annotatedType; } @Override public <T> Object create(Class<T> attribute) { final AnnotatedType<T> annotatedType = beanManager.createBeanAttributes(annotatedType); return annotatedType; }
the name isn't intuitive, IMHO. perhaps copyUnchangedStoragePoolProperties(), or something down those lines?
transformation.
@cvrebert let's avoid complex variable names, let's name it as a variable.
In terms of naming things, I would prefer to use variantRepository.findByIdsAndComplexFilters() as it's clearer as possible.
This could be a mistake.
Should be 60000000.
No need to fix the forkedProcess. There is already a starting point, but we should support it now.
What is the purpose of this change?
I'm okay with this test, but it may be slightly more readable to just register the mis events to the project instead of doing something like this: assertTrue(event.getResource().hasProperty(RDF.type, Cdr.Tombstone));
Why uppercase? Please look at the other classes.
please remove this.
the log.error below this is going to go totally bonkers if the queue ever fills up; it'd be better to only print a log message every X events (similar to HttpPostEmitter)
Is this change needed to make the method protected?
Let's take a look at the @sam file.
if you haven't received a value, you should also use StringUtils.isBlank() instead of a String.format()
Missing that
If it's not the case, please use java.util.Optional.
nit: should be called "BatchInputFileType.getFileTypeIdentifer()"
![CRITICAL](<LINK_0> 'Severity: CRITICAL') Remove this unused method parameter(s) "project/someProject" or remove it. [![rule](<LINK_1>](http://sonar-s4/coding_rules#rule_key=squid%3AS1166)
This test is fragile. Why not make a method that returns an instance of a fixed size? Or something like that?
Can we keep the reference equality check as well, and remove the import from the static method?
The code in this method is an example of test case, but I don't think we want to modify it. Please change this such that we have a special subclass of ActivationKey and other DTOs (ActivationKey and HashCodeBuilder), we should change this to use the similar refactoring at  311.
Won't this lead to a lot of spammy failures as the default lock times? If I understand correctly, this change looks good, but I'm not sure.
should we log this?
Could we rename that method to use try-with-resources? I think it's better to have one usage
If we throw an exception, do we need to continue to do this? I thought it was already done in the method above.
This should be a localization issue.
You don't need concreteStores as the type. The concreteStoreType is an enum.
Remove this line and use the FormulaRepository directly to get the blog blog blog.
this method can be private
Same question about the rule "addTypeRefToList"
LOGGER.error("No NEXMO private key found", e);
For consistency, use ThreadLocalRandom.current().getByChar( TreeNode.createCaption("@\t")
This seems kind of weird. If the goal is to get rid of the conditionals, I would leave it in.
same here, should not be better to compare by id using TermId? @cuenyad
Seems like you should be able to just return student.googleId!= null
I believe it makes sense to put the error message in the Impl.ex
Why do we need to change this?
so, you can remove the if and use the [StringUtils.isNotBlank](<LINK_0>,%20java.lang.String,%20java.lang.Object...%29) method.
can the catch be around the connectorResponse.readEntity(SearchRefundsResult.class) please
I'm not sure about this. I mean that a change with 'A' (or 'B'), which is a bit cryptic for my taste. I guess your patch set should be '!=' or '!='.
This will also parse the lines as well.
Could use getImageChainFromDb().removeAll(chainFromStorage) instead of having CollectionUtils.subtract force conversion of imagesToRemove to a Collection, since a Set more accurately portrays the intent of the, well, "set" of images. :)
We should already fix the exception.
I don't think this is necessary, the test is supposed to fail by default.
Since the logic is duplicated in the "else" block, it would be good to encapsulate it inside a method. Maybe like this: java private String searchTrace(String parentId, String traceId, String traceId) { if (logic!= null) { return "SELECT * FROM " + TRACING_TABLE + " WHERE parent_id=" + parentId; } else if ( traceId!= null) { return "SELECT * FROM " + TRACING_TABLE + " WHERE parent_id=" + traceId; } else { return "SELECT * FROM " + TRACING_TABLE + " WHERE parent_id=" + traceId; } }
don't use PROPERTY_TIMEOUT as a integer, do we want to move this in JBoss7Tools?
Can you use CollectionUtils.isEmpty(snapshotList) here?
nit: might be worth extracting the map as a static final field?
add break
Add space after!
2 things: 1) If a DataException is thrown is it a good idea to go on? 2) Did this kind of error logging work with casting exception object to string message?
Can be removed and logged in warn level
If these are called more times, shall we add a TemporaryFolder rule for this?
@adrielparedes here the call for metadatastore
Shall we add the logging level at DEBUG?
Maybe I'm not familiar with this test. It seems that the real deleteBy() can still return null when we delete a task that is not co-co.
shouldn't this be just return sr.isGuest()?
Hmm.. Can we have an explicit commit message for this? It's not clear from the commit message.
It looks like this logic is duplicated in a few places. Can you extract it to a common method?
Not sure what this code is for, but it could be made in a function which takes O(1) time and expensive.
:disappointed: Thanks for the clean up here. It's better to call the notification for the returned token.
Class name that node is SINGLE, is it?
Please changes the assertion here, and move the assertions inside the assertEquals.
Could you do a finalBattery = mTestDevice.reboot(); here?
This looks a bit reformatting and reformatting. Can we name it something like "timetime.b.c.d" to make it a readable one?
Be more explicit than reduction.getId()
It seems that we're not "unknown" the case; however I'm wondering if something like that would be better as a oned-hoc call site of the org.apache.commons.collections.StreamsDatum#set(StreamsDatum) method.
first it's the explain why we're doing this. Why not simply check partitioning.equals(FIXED_HASH_DISTRIBUTION) first?
shouldn't this be taken out?
This should be a warn.
can we move this to io.realm.internal.util.FileUtils?
Please add here more than one value so we can store it in a map.
It seems to me that we removed the getHostAndPortToUse method from the other services too, not sure if they really need it.
Same thing with mutation
This change implies that the proper error handling is taken at a certain location, right?
If you're doing this twice, maybe you can extract to a private method?
Please check if this should be handled differently. What do you think about 'fail' or 'else'?
It is better to have these empty lines within the try block.
I think the string comparison should be done on the Spark component that is using the spark version.
Create a constant
getRawContent() can return null. Is that ok for this to be calling getRawContent()?
nit: I think it should be warn
Please add braces.
is this needed?
Style nit: we don't use braces around single line blocks
Did you take a look at this? <LINK_0>
Can you make this a constant like the others at the top?
Is the indentation off here for the method parameters? Shouldn't it be: private static void writeTilesToBlockBuilder( Geometry geometry, int zoomLevel, BingTile tile, BlockBuilder blockBuilder)
still need an answer which role are we querying, and if not UserRole then we need to add parameter of what role we query.
Same question here, get the parameter with the parameter index from the toString method.
Shall we throw a specific exception here?
This won't increase the readability of the code. It will be nice to have the system property "true".
It's not not you need to use getClass().getClassLoader(). It's not thread-safe.
This should be removed, please move it to'static'.
This could be a method call. The implementation can be rebased on the implementation.
This is unnecessary, because it's already asserting on it.
This can be a static constant.
file.listFiles() would be even better, especially if it is a directory?
this check should be in the canDoAction() method to make sure the vm is there and not just created storage domains
can you add some more unit tests for this class?
synchronized (LongJVMPauseDetector.this) looks like a bug
You could say SSE_KMS operations must performed over a secure connection.
Why do we have to use StringBuilder here?
+1 for the condition.
This fails on Windows as you're passing the external model manager. It's better to use the external trace.
Should the strings be moved to constants?
isn't this redundant?
Why not to use Collections.singletonList()?
Could you remove this line?
Can you also remove this and the check for null? I know the variable was already initialized in the constructor, but it's up to you?
How is it reset if the test failed before?
The [contains() spec](<LINK_0> says that it's an Object. Consider breaking this out into multiple casing.
Since you have to pass username and password as arguments, I think it would make sense to have this method call the other tests just so that the DB-specific dialects can be specified.
you are reading the json twice in the test
nitpick: final
I think we could use new ArrayList<> here
Agreed with @martin-kanis Based on the exception message, I mean that if the cause is a HTTP status=403, it should be handled by http status= 500, right?
Kind of weird to see the extra parentheses in this method.
Please use isEmpty()
you could here return the oldLabelProvider
Can you replace the two loops with a call to mCheckedCardPositions.get(NOTE).equals(checkedPositions) instead?
Could we use GIP_ENCODING.equals(info.getContentEncoding()) instead of ||?
Please change the logging message to "A system resources are not a scalars"
Maybe its better to use interval terminology here, perhaps LeftEndpoint and RightEndpoint?
have we seen this error before?
I am wondering if setting the id to the Singleton would be better (using an Id) to avoid creating the object and then filtering it again to the caller. What do you think?
You should use getStyle() here instead of Thread.sleep()
Code style: Missing braces and curly braces.
Probably worth caching the NeededData array into a field so we don't need to loop twice on the same object, since the user code is running the loop and the rules list is empty.
Shouldn't this be 404 instead?
try-with-resources
Static import
The logic is not right here, we can keep the log level.
LOG.info("Getting jar file from {}", tarFile);
please verify response here with in call
Same answer. Note the java doc explanation of the test. Basically if someone presses escape somehow it causes an http status code of 0 which in the Frontend code is an ignored failure, so we want to ignore the result.
Log here too, also
ComplianceStatus....
I think that this check is only needed when we tried to merge the transaction, seems like a bug
Should be removed
This method is getting called at two holidays at once
Unclosed stream?
This equals implementation should include attributes from the Command super class.
can you please change this to if (w1 == null || w2 == null) { return -1; } else if (!w1.equals(o2); return w1 - w2);
You don't need to fail of the test here.
You can decode this logic into a function and use it in the assert statement: assertTrue( conn.close().getPreparedStatement().close().
Are there no other standard utilities or libraries that can get this information?
Minor nit: Why thenReturn 3? Since you did not use the "assertEquals" test, it is more concise.
You should test whether the matches.get(0) and then a non-empty list.
nit: This assertion is redundant.
magic? extract inc to a variable
This means that exception during xml parsing will be logged, and the map containing a single element (for the current server) will be returned. This is wrong. I think you should throw an exception in all error conditions, except the ones while fetching fingerprints.
There are some "if" statements inside the if condition. Consider calling getTreeViewer().expandViewInEvents((editor).getAwa(), 2); or something along those lines.
else if
Are consecutive reloads necessary or will be one reload at the end sufficient?
assertNull
log.warn in default block is a good idea, but we should have case FAST_FORWARD: no?
I would put this, otherwise here the TVE's message is re-parseable: Java return new LineItemState() && (messageItem == null)? null : originalState;
These can be replaced with simplier: java try ( Long address = createAttachedChain(readKeyBuffer, hash, iterator.next().getPayload()) { return null; }
We could use I_PP_ComponentGenerator_Param.forValue( I_PP_ComponentGenerator_Param.class) here.
respones -> responses
I know it's not your patch but those 5 lines should be replaced by: grouped.keySet().removeAll(collection);
i wonder if getQueryData should be a method on the baseQuery object. Then there is no need for query data.
assignment is missing
I would recommend versionId = "" can be allowed i.e. if (queryParamMap.length()!= 0)
please just keep the method name as a final static member variable
why debug level and not error?
Would it make sense to return volumes with size -1?
I don't think this will work well if file is in the.txt resource. We need to replace it with a null pointer exception.
nit: equals(...
Do we need a separate function for this? Can we have just a single addAndDismiss function and have it return a boolean as isOnboarding?
shouldn't it be rather: if (buf.length!= 0) { PacketLineOut out = new PacketLineOut(buf); out.flush(); } to avoid the need to allocate and call SC_FORBIDDEN if it were needed.
It is good to put this one liner into the log line
Maybe putting the Comparator.comparingInt( ) as a static constant?
This isn't actually the behavior we want. Until now, the cache instance will be shared with the DefaultSession instance itself, which isn't the case if there are multiple instances in the current session, meaning that the cache instance will be shared with all of them. This means that if a request comes in multiple instances, the cache will be returned immediately, so the call to the cache should be outside the task itself.
you aren't removing duplicated entries...
no need to undo this?
instance variable future.get() could be replaced with future.get()
There's a typo in redisTokenEntry.
This is thinking about how we can add something to the Filesystem part of the sanitizer (i.e. if we add another PR for sanitization for roles and reason then we can't add such changes
is this required?
This is not optimal for localization (for languages that don't use arabic numerals). Consider using something like NumberFormat.getInstance().format(count)
Why we want to fail such queries? Presto can still query from such table if we disable bucket-by-bucket right -- Also it depends on our configuration on hive.max-outstanding-splits-size right?
Maybe it's better to use IntNode for zero value in this method.
Add context specific message without using e.getMessage().
Why not use.hasSize(elements.size())?
As discussed, lets make sure the validations are unique by default.
This unload will called called after the test data has been constructed. This means that once the value is changed for every test, this unload will be called.
why are we adding the Replica_Unavailable here?
This code pattern should be extracted to a constant because it's used multiple times in the test.
onErrorMap?
I think it would be better to wrap the close of this class rather than in the CheckpointSource. e.g. try (LedgerManagerFactory close). LedgerManagerFactory = new kLayoutManager()) {... }
I was thinking about this style better. Please only remove the extra space in the method.
@yesamer Please replace this whole method with a one argument.
Does this mean the file is already EXISTS? What if SHA-256 is EXISTS?
You don't need to use the.format() to put the information to the log to the user, the call above can simply be removed.
Since this is important then we should have the same log message as the exception.
Delay is not needed, and the line seems unnecessary.
nit: This is really just a plain old function object rather than a functor.
I would factor the opening the line here out into a method.
rename to _invalidESet_
this 3 lines of code is repeated several times. Can we extract a constant to a common method?
My main concern with this is that if there is a ping thread, then it will be set to true again in the log at line FINE, which is not what we are logging here. We might want to set it to false as well.
systemName, etc
Perhaps you need to apply the context class to the filters using the context class, and in a context that avoids a null check.
This block looks the same as in the other constructor. Should it be DRYed out? I probably wrote this block,but I admit I am having trouble recalling why ConfigContext needs to explicitly be referenced? We allow config contexts that don't start with the defaults?
Is it necessary to cast to project here?
If we are doing this for every single request, can we follow the logic and just do a filter for the default/no-op? Your code is basically just: java if(isUseUserAccessToken()) { // load a user access token } else { // do something }
Was this logic redundant?
I must be missing something, but it seems that less code to use this method which is not safe.
Please put back the parentheses around (getIndexForKey(previousChildKey) + 1). The behavior is the same, but it makes the intent more explicit.
You could use the getActivity() method here too..
Here you assign the return value of FeedbackMcqResponseDetails to a variable called Slots.FRAGMENTS, since the method name is not a string.
The log message is about to be re-used, we should probably change "exception" to be more useful.
Minor: How about using logging for this instead of printing to stdout in the middle of program?
You should be using a private method here.
Is this the right log level? I think it should have the publisher level notification?
Have you tried to fix this? I think there are some failures that would cause this method to throw checkstyle error. java @Override public void createDbzExchange(final SourceRecord record) { final Message message = exchange.getIn(); message.setHeader(DebeziumConstants.FIELD_IDENTIFIER, record.topic()); message.setHeader(DebeziumConstants.FIELD_KEY, record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record.valueSchema(), record
If there's no value for that key, then BEFORE_BARRIER_MSG will be removed, like above?
Are you doing an explicit flush, better to ClientResponseImpl.setUpValue(e);
This should be private to avoid code duplication. The same for updateSubscribers below.
While we're in here, could you replace that with this: for (Object selectedObj : structured.toList()) {
Use UUID.randomUUID().toString()
Why are we force to wrap this whole thing inside the if statement?
Either this is needed or it should be moved into a finally block.
I suggest the check to make sure the value is fully initialized, so the JVM will have autoload if it's true.
use createSafeXmlSource here too
Unchecked cast
what do you think about the following? final IFile file; final Repository repository2 = repository; if (repository2!= null) { file = ResourceUtil.getFileForLocation(repository2, path, false); } else if (file!= null) { files.addAll(Arrays.asList(ProjectUtil.getProjects(repository2))); } else { //.... }
Redundant else
Again, please don't make recursive RPCs, use data from the ProjectDetail object.
I think it should be a pre-existing PR.
GAVCE should be a _DEFAULT_ and/or use same name for.xml
missing spaces around =
Please write a space between if and (
Same here. Let's remove this line
I'm not sure this is correct. The template should not be applied to any branch, and we should not be purged! I'd rather just print "Branch %s[%s] is an undeleted branch and that option was not specified!"
Share the 'validateArchivePath' method.
I think this is not enough. Otherwise, as the user will see the idle state, even if it is not actually started.
The tests should specify the parquet.ccumulo.cluster.ccumulo.table.ccumulo.FlatIT.ConfiguredDURABLE_PARQUET_PROP is default for the the test case.
I think a JTS Order is a JTSField and this class can be used here instead, or at least in the CRSDefinition conversion logic, getCRSDefinition().getCRSDefinition() can return a non-null CRS. Something like "coldQuery", "columnDefinition" would be nice.
This assertion is not necessary... I would rename the string literal - this text is cryptic
Can't we use SecurityManagement.isSecurityManagement instead of this code?
Why don't you use the "current_points_text" instead of hardcoding?
This code seems to be the same as the code in FileListMatch. Can we reuse that?
I think the return value of getImageInfo() should be null.
This should be moved to the new class, no need to load as many nodes are created
This is wrong. The test is supposed to be showing up unconditionally, not just the build folder.
Better to have this in a setup method, e.g. setup.util.Properties.
I guess it is not clear to me what you have here. If you are here to return 0, it will be in case of an exception.
Change to deactivatedBeneficiciary.
I think you should move all the 'if' outside of the loop
HasPlainJavaAnnotationsOnly already returns true, so why not just return false here?
If this is an error, please log a warning.
This isn't necessary, because of the previous if (result.monitoring == null) { return; }...
I think this could be moved to a private method
use FileOutputStream.Compare() instead of Thread.sleep()
suggestion Optional<Long> firstVersion = timestampMapping().values().stream().map(LockWatchVersion::version).min(Long::max).max(Long::compareTo);
Not sure this is a good work. On the other hand, if we _doAdd_ is not null, we will have a NPE here.
This line should come [line 247](<LINK_0>
Is this code duplication?
This should be replaced by List.comparing(BootLogic::isBootLogic).
You should add a space ", " (String[]) textParameters) before the if body.
This looks weird?
Why do we add the same problem in case some kind of Set is used? Kind of picky wouldn't it be better to just say something like java issues.addAll( generalChecks.getIssues()).filter(c -> c.hasIssues()).addAll(c)).collect(Collectors.toSet()); or maybe even better, would be more straightforward.
Reporting the memory is bad, do we need a <LINK_0>?
Should we have a check for this?
I believe Travis will fail with the same problem with this class.
Is this really necessary?
1. The test doesn't fail the case of the remote OR the original failure. The test should be an internal error. 2. The test failed because of the retry on UploadPack.
Other places we use getNullable to simplify this.
This change is not needed.
we can combine this check with the if above and skip validation if it's not present.
new line is a bit ugly here.
I hope the event producers are not shared across the connectors?
Is this change required?
@ktoso What was the reason for this not getting caught by the implementations?
i think that code should be like this: if (getVm()!= null) { return; }
need to be BIG_LONG_MAX_VALUEONE instead of ONE
This is kinda a duplicate, it should be in a utility method or is better to wait for element clickable
Maybe we should use warn level?
@Nullable
You should test the case where the name "testRealmResource()" is not a list.
Do we need to check that the value of this would be null?
if we do this, we must have the exact same behavior as for performFinish. If not, then I think we should fix the resource and avoid using this feature.
This assertion is not necessary here, since you're already doing this assertion right?
Why is this change necessary? The printed arguments list should be get filled with the expected values. I think this should throw an exception instead.
I don't think this is needed since UnsupportedEncodingException is already caught by the catalog service implementation.
Does this need to be public?
The check if null
IngestJobPipeline.checkForStageCompleted() - currentTasksAreCompleted()?
Shouldn't we wait a fixed number of threads for the same exception?
Please use if-else
Can we add a message saying what was the mounts to be?
It's preferable to change the existing method (to pass the currURL) to avoid code duplication.
These should probably be initialized on constructor?
remove, dead code.
rename to launch or launch
note that the VM compatibility version may be different than the cluster compatibility version - this assumes they are the same, right?
this method is not thread safe.
I know this is not part of the change, but we don't need to change this code: "if (hasForwardedHeaders(request)) {" which calls remoteAddressO.map(InetSocketAddress::getHostName).orElse(-1)"
Using this instead of false should be removed, the requirement is now that the Files.importFromLDIF(false, new LDIFReader(inputStream));
suggestion throw new Exception("Invalid line number of events.");
Is this supposed to be 'null'?
@prasa7, let's use commitTimeout instead of commitTimeout.
Aren't you trying to remove the above line?
Could also use EnumSet.complementOf(EnumSet.of(Blob_Expired, No_Error,...))
I feel like we shouldn't really be catching RuntimeException. I feel like the exception can be misleading.
Embed the caught exception in the newly thrown exception
I don't think we need to wrap the exception since all possible exceptions are a subclass of Exception. I prefer catching RuntimeException instead of Exception. If some methods throws non-RuntimeException, I think we should catch separately and wrap only non-RuntimeExceptions.
This should be GTK_*
I think we can simplify the logic here by checking the boolean strictInterval: boolean ABORT_COLLECTION = Boolean.getBoolean("org.opennms.netmgt.collectd.strictInterval"); The boolean strictInterval = Boolean.getBoolean("org.opennms.netmgt.collectd.strictInterval"); //NON-NLS-1 After getting rid of the true, and the else is more "if".
If the caller is going to use the other constructor, we should change the field type to void. This will allow us to remove the need for the setters.
Use filter(String::toString) so we don't duplicate the same filter twice.
this is confusing because we are not doing single instance of the properties. Consider to make the method private
![CRITICAL](<LINK_0> Either log or rethrow this exception. [![rule](<LINK_1>](<LINK_2>
seems like this will always return a Stage, I think we should just leave it as is.
Use String.valueOf
this is redundant. I wonder if it's important to keep that this is for HE VM.
Could we reduce the nesting level to debug?
continue?
Extra ()
rename to vmStats or other variable for the better readability
this can be collapsed to if (tags.size() == 1 && tags.contains("film") && tags.contains("film")) { tags.add(tag); }
Do we need this.index = pagesIndexFactory.newPagesIndex(pagesSpatialIndexFactory.getTypes(), expectedPositions); here?
Is redundant?
should we remove this?
Yeah, this is where we checked the request, I think we need to pass the deadline into processPendingRequest.
This is hard to reason about. I think we should log this as a debug log as it's far as I know
Why not (end<>>)?
This is a java.util.Objects.equals, as it does not depend on the java Objects.equals. MeasuredUnit java.lang.Strings.isObject(MeasuredUnit.class)?
You should use  issued
Possible NPE in next line when command.call() is null. When cloning into a bare repo it is possible to only specify gitDir.
Add a space after the comma.
Could you create a method to be implemented as this instead?
Can you make this method private?
See if you can get this panel name as part of the table.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
This is more specific. Please use try-with-resources.
Maybe we should add an internal utility for CacheConfigurationException here if it is a OBJECT?
I think it's safe to fetch the application context here (since it's only assigned once in the adapter)
wanna remove this line?
I know that onError(throwable) doesn't have a value in the codebase, but I'm not sure what is the convention for this.
Can we be testing the values like this? I don't think we should expect to change the values like this will be beyond the test data.
else { is redundant
Maybe switch to findFirst() here, and use node.orElse(null) instead of findFirst().
Since we're already using this variable, could we avoid the need for the else?
else { is redundant
instead of a new TreeMap, you could just set the HIVE_IN_TEST to HIVE_IN_TEST.
Use computeIfAbsent
why do you need this?
> 0?
this might cause problems on Windows
I think this is not necessary because this method was used in the next file - <LINK_0>
We should probably skip it, but fail if gran instanceof AllGranularity?
Deleting the code base seems wasteful in both the preCommit and preCommit methods. Can we do it in one PR?
It's not a big deal, but I think that this boolean is redundant. For example, JwtConsumerBuilder#processToClaims will always return true for null if it was present.
a method to check if it is present or not, is that what you want?
Use try-with-resources.
You could write the above code in the method for clarity
Please combine all your if () clauses into one.
nit: redundant else.
IINW, this call has the potential to produce NPE, since we don't check for the existence of the host.
I think you can use your iterator of the for loop.
Since processWorker is assigned to null, there is no need to call synchronous code here. From my point of view, there is no need to modify the Runnable, so no one can call async code on a task. See RuntimeCallbackFactory for an example.
See above, but timeTakenNanos should take a long or this will be broken for times over 3 seconds (Integer.MAX_VALUE nanoseconds)
If we use try-with-resources, this will close the stream even if the file is not closed.
Not necessary for this patch.
This code can be improved, with a single check of maxConnections and keep the current code. With the current code you're checking this twice, in this lines and below, making it more confusing to read.
I don't think you need the cast. You could just use "new Pattern(String), and then use the cast warning. But I don't think it hurts.
Minor: We should lock by package names, and use them with direct access to them.
This would only happen if the service returned an invalid Sentiment type correct? Is this a good spot to throw a Runtime exception if the service failed? Maybe skip the result, log a warning, and continue processing the other responses.
There is a join method that accepts Collection that would make this code much simpler..
should we log this?
are we guaranteed the test won't get stuck if something fails the test?
what if this table remains?
Isnt it already done above, in line 62?
Do you really need to make a copy of the config if you are using it? Users can setup them in their own constructor.
It missed a the label of the command, but it would probably be better to here java public <REQ extends BasicMessage> Command<REQ> ACTION_TYPE_REQUEST = requestClass == REQ>? REQ>) : (Command<REQ>)? REQ>)
Why this line is not needed?
Please use the method WashingtonPostObject.Content object in the try block so the final declaration and initialization can be closer to the other code.
No need to set the value from the block.
not sure why we need to have this list here.
ICS=false. Please add a "ICS=false" or something, so the CCS=false doesn't get translated.
Can we inline this?
I think we don't want to support Iterable and Iterable in the PropertyMapping (an enum)
This is really weird, let's not do all these debugging statements.
minor: spaces
minor: rename this to formatStr
This is guaranteed that we will always return non-null value. See for description how to parse environment variables is done.
In the above, we should avoid using the "final" keyword at the top of the file, or declare it as private.
is it not used?
Refactor to use Locale.getDefault() to do the parsing in case of errors. Needs to be reformated in order to avoid problems that the user can't manage.
why do you need to split the platform?
Why should nodes necessarily have an ssl enabled port?
I'd rather this be int fileLen > pageOffset
can we use SWT.allowTrue to clear that before returning true?
<LINK_0>
We do we need to be careful about select/join?
I remember some discussion for coming up with this logic of selecting cards randomly. Have you decided to remove that?
java private static boolean checkEither(Column column, Filter filter, EntityRecordWithColumns record) { @Nullable Object columnValue = columnValue(record, column); if (matches) { return true; } else { return filters.isEmpty(); } }
makeTableRunner already has a method called isQuery() which is doing the same thing
interesting way of handling this. I mean, it would be more obvious to the user what the module is running. What do you think?
This should be.getV2CapabilityAdvertised()
This is probably not possible as it will change.
I think that there is a better way to do this would be to use constants instead of hard coded strings
Who else is doing the same thing?
Since getParent() is defined on IASTNode, there is no need to actually cast to IASTDeclaration, the type-checking will be redundant and can be removed.
This message is a duplicate
I'm thinking of this message, it would be better to have a more helpful message in the log, like "Code '{}' could not be loaded: {}", messageSource, e.toString(), e.getMessage());
nit: Format the code
The replacement should be a parameter for decl.getStartPosition()
It would be nice to add the interface NODE_STATE_CHANGED message here.
call it folder
why not to add this to the tasks list? and so on what you check for vm == null
I think you should have this exception only in case projectBuildingResult and projectBuildingResult are null.
Utils.stream(map)
better to use the official way here true instead than "true"
Should be a try-with-resources block.
Since the connection getting passed as a parameter to this method, it shouldn't close the connection inside this method. Need to close the connection in the original place where it originally (create and )close the dbConnection.
Either a generic method is better, or have a "protected void updateProvidedObjectsHolder" method, in the the "updateProvidedObject" class.
It would be better to use new StyleRange(String.format("line offset %d", event.lineOffset), e.g. new StyleRange(styles.size()-1)).fontStyle(style);
This should be done in a try-with-resources block.
If you make this line more readable, please split it into two lines.
In case of creating template from vm snapshot this returns false because method updateLabelList() is called from constructor of UnitVmModel however isNew property is initialized after the constructor is finished. See VmSnapshotListModel#cloneTemplate.
Same here, but what's the benefit of using this instead of entry.getValue()?
Please move the above log entry to info level. In normal mode it's enough to say cache updated (and it took xxx second).
Why not putting equals around the constant?
There should be some more spaces around operators. Like for example: Commit message.
Wouldn't it be better to log this as a warning?
suggestion LOG.warn("Timeout occured while sending message to topic {}", topic, e);
Why not use model.getSelectedItemsChangedEvent()?
Do we really want to print the user in the log? I'm not sure, I think it's a good idea to log this.
String.format() for better readability
Would be better to rename this to domainFromIrs (I could also use the vdsm data type here and it would be more generic)
is it normal for Java to pass in the response?
streaming an empty list
It's okay to use Impl#getExternalResourceInfo() for better readability.
We should probably remove this log line
Maybe check the file's existence just in case? otherwise the watcher will give up immediately (IOException ). But IIUC the code it may want to wait to avoid race conditions. Or not?
@tmarzeion I think this just needs to be set before calling this method.
You can check this in the correct way: assertThat(ProgramEnrollment.class.isEnrolled())
Again different order of attributes.
What do you think about having a method called validateParameters() and check if it's present just to make sure the given request is valid?
please add this assertion in the next line
If I am not mistaken this will do the same thing as the parameter for removeTriggerFromProjectList(this)
Should we throw this exception here instead of catching?
nit: it seems that this recurseToPartial method is already having a source variable. Why not do it inline instead?
I don't think there is a selectFirst method.
does this do anything?
can't we combine this and the above if/else if into one if?
is it worth the code to be written like this: Stringinterpret_args(String message) { //'param param on the StringBuilder? }
Why are we adding an EnumMap<> for this?
Could you use an array list instead of a list?
we are sholding the contents of the array, this is not the best way to declare it, but in this case I would prefer to use @bonitasoft
This has already been committed, this should be not an error.
You should be able to return true here.
This -1 smells a little. I wonder if a constant may speak more about the fact that it is a non value
assertNotNull(null!= actions, workflowAPI.findActions(workflowScheme3Step2, contributor)
Same applies here; could we move the if statement in [L251](<LINK_0> down here?
it would be better to add a private constructor here
Not used when it is used.
this way you'll go in to the 'else' while intention was different (if you already have <paranet_step/> specified) 1. please remove new condition 2. add validateParameters(step, "Type", "step.parentStep.id"); in this if()
It looks like this method is not a thread safe, shouldn't we have synchronization here?
This will always be true right now, you'd have to setNofityRequest() here.
Will it be better to use something like.equalsIgnoreCase(path.getFileExtension()) here?
No need for this. We can just use the Map interface.
why did you call that? If it is necessary, I guess, you should call it everywhere and you could why it is necessary in the commit message
Has to be removed.
Same here re:.findAny() returns an Optional.
how about putting the isUnauthorized method around the root account? I think that would be better than assuming we only have a user required API.
AFAIU Terminal, we should not remove this line for 121.
We need to remove the try-finally and we don't want to expose the exception directly. We can still propagate the fail-fast failure and fail the test. We can use try-finally to ensure the test is done.
This doesn't seem to catch theInterruptedException you could get.
You can use return result of result and remove the else in the if, to avoid the declaration on line 88.
java doc missing: Are we sure that tableObj.getTableType() is 'null'?
Instead of going through this line, should the test do a stronger check? Like TestUtils.assertHasLoggedInFieldName(beforeDocId, student.toJson()).
why is this needed?
Some of these methods could be removed; they are used only in one place and in the other place, so make them private.
This returns true if the code is running for a session?
Nit: maybe refactor this into a method like the following? final String itemDetails = (UsageConsumableInArrearDetail).add(item);
why did you move this and make the Result constructor private? (for now, we can use the previous implementation, but that is not necessarily about this class)
Compare name instead of virtualHost?
@ppelins I guess, is still missing in the "changes" list.
Nitpick: could you use cactoos closeQuietly here?
Remove it. It was used at some point but I forgot to remove it after code restructuring.
I think this test should be done by a @Before method to avoid duplicated code.
You can use ids.iterator().next() instead of ids.iterator().next()
We should at least log the exception in this case.
make this to remove, since it will conflict with previous JIRA
Confused by this change.
Do we need this logging?
We can use Preconditions.checkNotNull() here and in the other constructor.
Strange that SubscriptionService and commitCursors methods return 200 OK, we just return NOT_IMPLEMENTED rather than 404.
TB too?
Not needed to be null here.
You should use parameterized logging instead of string concatenation.
@carlosmiranda I would rename this to remoteBranches, in this case :)
log.warn in default block is a good idea, but we should have case FAST_FORWARD_ONLY break without logging.
We should respect the InvalidProtocolBufferException, here <LINK_0>
Should this have a config file for this?
why relaceFirst instead of replace
How about using a configuration with a module name?
Verify the expected value
setErrorMessage
It would be really nice to have a GMF Utils.equals() method which is used in the UI directly.
Why this change? It would be nice to have this text as an actual text. Please add the content, and see if it is necessary.
We shouldn't need to copy args.
This logic seems to be duplicated from the checkIfActiveOrStandbyContainerHasActivePlacementAction. Have you thought it might be possible to merge the checks here with the previous deQueueAction and deQueueAction?
className can never be null.
returning null is not necessary since we know it is empty ;)
The trade method is really long. Consider refactoring into multiple smaller and more concise methods.
nit: doJoin(otherStream, (no new line)
why do you need this check? Can you move the logic of taking account lock to the map?
The usage of toString() is depth and not the literal.
We can pre-compute this value by calling.toLong() on it.
This logic looks very complicated. Why not use java if (!DoubleMath.fuzzyEquals(vector1, vector, tolerance)) { return false; } intersection = sensitivities.keySet().equals(vector2.length);
any reason for the 'else'?
getCountOfEmptyLinesBetween( previousImportObjectFromCurrentGroup.getLineNumber(), importObject.getLineNumber())!= 1 is a bit easier to read. There are a number of elements in this method. If you change the name to currentGroup, you would be able to simplify this code.
are you sure we want to keep this around?
store title in a variable instead of passing it as an argument.
My IDE complains about using.map(Path::new)
Move this to a constant.
you can keep the.get() to make the test more explicit
Is NodeList Iterable? I can't check at the moment, but if it is, then it's usually better to use the "for each" iteration, since the implementation can give better performance than just doing.item(i) or.get(i).
This one has two windows, is this intentional?
Minor: can use assertLogContains instead
I'm not sure how the client uses the executorservice, but you might consider using shutdownNow instead, since shutdown will execute the entire queue of submitted tasks before shutting down. Also consider adding an awaitTermination here so close doesn't return until the service is properly closed.
Could you please remove this cast to UnknownBlockTagTree?
Declare the type List<Alert> to remove a method.
The variable is initialising the value from a variable outside of the method.
Yes, this is safe. getFilename() does not work if bai file is an instance of.bai but it is a string. That is why the expression has to be changed to something else?
I think this should be metric.
It would be useful to have this check on the latest version of the page view.
Can this be moved up before the add() call?
You don't catch Exception. If it's not necessary, this will be fail (checkstyle).
I feel like the instead of the property should be added here and then the ThingUID can be updated.
I'm not sure about this case. It is impossible to provide a unit test, where the directory is in the result. <LINK_0>
We should have a null check here.
This will cause an exception. Throw an RuntimeException and then fail.
We don't use HTML's "\" in our code (it's how it's shown to the user as generated by the tools)
Let's remove ShardSyncStrategy and use it here.
what if the file is longer than 10?
Can you add space after the cast?
We could assert that hits has a metadata field.
typos: should be "isUnaryInteger"
I think we need to lift this logic into the first place. We don't have to check if the components are hidden or not. The only part which will be hidden if the method is hidden.
Where do you extract this into a method that receives a GameObjectDAO (or GameObjectDAO) objectHealth. Then you can call it in each method.
Yes, this is fine. But if we don't return the Ehcache<K, V> since there is no other refKeyType and we just return Ehcache<K, V>. Is there a reason that the flag can't be interrupted here?
innerPosInRowGroup -> innerPositionInRowGroup posInRowGroup -> positionInRowGroup
could you change this?
Please move this protected modifier up to the public modifier.
possible NPE: sessionPrompts is null
It's simplification of this patch that I am missing.
Why the cast? It's not the right way to go.
Please move the line above to the end of line.
for performance reasons, only one would be creating a new static (one time) that should be first initialized in the method
Nit: should we remove the spaces before the =?
I'd rather we use 0L here.. and at the beginning of the method if possible. Consider renaming all of these methods to use that naming convention for the new code.
For readability, please assign the value to a local variable
What is the use of this empty line?
It would be better to use importReceiptReceipt() here instead of TAG.
should be deprecate to "getPrimeRefining"
Don't log and throw. Log at t all.
The buffer is only created once, and executed in only once. So, it is better.
I'd remove this, and make a defensive copy of the fields below.
Why is this check necessary?
This should be private.
why did you change to final here? should be outside of the scope of the patch.
Use isEmpty()
You should discuss with Nicolas, but this class is probably useless. you should use LabelInternationalizationUtils.getSetLabelCommand directly I think
Minor nit: I would add test for both Strings and Strings (they're not really used with capitals), one of them is the same.
Please also include the original exception in the exception
Usually, we don't use third party exceptions in components. You can choose another one and see example from other components.
BUG? you log the error but continue processing the invalid sequence number... what will happen? See call to m_gapTracker.truncateAfter(sequenceNumber, true)
This is too complicated to understand. Maybe I would use something like PROJECTS_VOLUME_NAME + "-" + PROJECTS_VOLUME_NAME.
Do we want to do this with a protected static final String that could be overridden in the AbstractExpression conversion?
we can also do an isEmpty check instead of checking for null.
Is "Resource not found" the correct response during a rebase? If so I am OK with these changes so long as they work and pass tests.
Shouldn't this be done by the try-with-resources on line 261, null pointer?
Ouch, it is not needed.
ddfFilesPath -> ddfFilesPath
check whether the key is in this.stateTypes or not? if (!this.stateTypes.has(alias)) { throw new UnregisteredAliasException(alias, alias); }
Should we move the assignment out of the if clause?
I think this should be edr.primaryObject.
Same here. I don't think we need to check. Just let it crash if something is not admin.
I do not understand the need to catch and log the error. What is the intention behind this?
if script is not connected, will your parsedOutput will be null?
Maybe we could have an "fallback" compiler to use this as the default and check for isEmpty?
please use GuidUtils.isNullOrEmpty
You can just use [Boolean::parseBoolean](<LINK_0> to avoid the double check to see if the cookie is present in the request.
Does it work to set this to false instead of the previous value?
Typo, UNIQUE constraint failed -> Committed
Why are the log-out here?
What is the reasoning behind this?
I think this should be...EnsuresInitializedFields.class.getCanonicalName().equals(this.getElementName())
Shouldn't this be the same as the test above?
missing unit tests for this in HashJoinSegmentStorageAdapterTest
You don't need to print the stack trace..
I think this assignment and null check is only necessary if the equals() statement is true. If the test is true, the second condition will enter the assignment and it sets the value, but it should be '==null'.
I don't see any literal numbers in this method. Why is it needed?
Can you make this class package-private?
System.out.println
same question
how about using an IllegalArgumentException here instead? > "Thrown to indicate that a method has been passed an illegal or inappropriate argument." from [Oracle doc](<LINK_0>
potential NPE
This one too.
Couldn't you just move the boolean condition to the buildAnalyzer method and let the predicate report the issue if no overriding analyzer is set? This would also allow you to include the analyzer in the if-statement.
Minor: we should be using String.format here, same below.
This else block is unnecessary.
please use the PercentType.ERO constant instead
Let's have at least one test with GENERIC_MAPPING as it is more obvious that we are using DWORD, but not others. Just a thought, ok, that's on the previous version.
Why do we need to pass the fragment here? I would prefer to just rename the field to getOutput()
please log the exception at debug level
I think this should be at the end of the loop
can the method be private?
We can make a refactor of this method to a common utility method.
getMessage() is not used, and we don't need to check for this.
I think it would be less clear to just check that the array is not null instead of checking for that.
This is not required and can be removed.
very strange for the appendFragment, I would rather propose something where we have the SysMLResource.QUDV_LIBRARY_PATH and SysMLResource.LIBRARY_PATH
I assume you mean System.getenv(Constants.ENV_HADOOP_HOME) here. Also the next line.
When meta == null, ColumnDescriptor col = new ColumnDescriptor(filterColumn.getColumnPath(), Meta.getType(), -1, -1) returns BLOCK_CANNOT_MATCH; I think this can go to the if test below. if (meta == null) { return BLOCK_CANNOT_MATCH; } return BLOCK_MIGHT_MATCH;
I suggest to improve the debug message in this case, and mention in it also the returned value of "lookupSupportedLocale(locale, getLocaleKeys())", especially if it is!= locale.
You might want to rename those methods to favor readable lifting of the method?
Should use the static isSupported() method. you have on TargetChosenReceiver to avoid propagating build versions everywhere
Can you add a's symbol in the'ss folder to make it easier to read?
No need to collect exception here. Log it with the message
This is a good place for a separate catch block and and for the next one.
I believe we should use getPath() instead of "/"
I would put this on the previous line, to make it write: List<Integer> tmp = this.digitsSize - num + 1; List<Integer> result = new ArrayList<>(limit); You know this already but, the formatting is wrong, but to make sure formatting is correct you can use ctrl + alt + L if you're using intellij on Windows (it's cmd + alt + L on mac). On eclipse it's ctrl + shift + F (cmd + shift + F on mac). I've found that very useful :)
I'd use threadlocal for this instead of looping over the list below
Since the snapshot returned appendCheckpoint is a global snapshot that can be taken. It is not clear to me whether this change would work. If a closer checkpoint was in the future, then it would be clear that the checkpoint map would never change, but it's not.
It seems like the intent is to allow for the presence of a factory for the attribute in that case.
I'm not sure we should do the same in Collectservice here.
Why as'on line 390 seems to be redundant?
consider giving this boolean a name that describes its /meaining/, not what it is - e.g., doesStatusProhibitConnect
This is a pretty bad change. There are other ways to decide whether to use it. It's not a big deal, but it makes more sense to keep it as is. If the intention is to use the old way, then necessarily change screen construction, that is just way too big.
I don't think this is supposed to be use lastIndexOf would be more appropriate in the log message. The substring was supposed to be extra and was just wondering if there was any performance penalty to check if it was increased by 1. For a segment of ledger, this is supposed to be a lock. So the change should be "if (entryLogId <= Ehcache.length_ 2) {... }
The names (__id, __cas) should come from TemplateUtils, although they seem to be hard-coded in several other places.
The check should only be done in the UI plugin.xml, not here.
since we have this now, Line92 and Line 93 need to be adjusted LOG.debug("supervisorsWithFailures : {}", supervisorsWithFailures); reporter.reportBlacklist(supervisor, supervisorsWithFailures);
The name of the variable is FileModel then it is hard to read, especially with the "plugin". Rename it to something like "plugin" or "plugin".
Usually we don't need to fetch data from the database, but instead we can just fetch the address from the database instead.
We need to remove this line.
Closing the file without a space is a bit odd.
Is this correct? If this is an unexpected error scenario, you should log a WARN and move the log handler to the if block.
redundant- done in the HostModel
What is this variable for? Since you're returning null on line 110 and you're getting the response and never send null.
You should use <LINK_0> and get rid of this assertion and all tests.
Maybe also break the line into two cases? Prior to this method, we had to check if the page builder was full, and if (!pageBuilder.isFull() && probe!= null) { return page; } Page page = pageBuilder.reset(); if (pageBuilder.isEmpty()) { return page; } else { return page; }
please move it to Constants.java
It's a test for this method. Does it return a Get instead?
I am not sure if I understood well but if we set these variables to the same long list, there are executions for variables that have been added to the TID and CDerivedInfo. Could you explain?
This should be moved to the top of the method, like the one below it.
Same here with not needing the local variable.
Can this test be moved to a test?
this
I think that the whitespace was deprecated, but not sure if we want to remove it (and not change it as long as it's deprecated, but maybe it's safer to remove the tabs on the new line as well)
This is strange to use. I find it strange that the Charsets.UTF_8 is used. but there is no need to use a Charset or Charsets.UTF_8
We could just use a InlineHandler.
4 spaces
Maybe add a method in the Builder to create JavaFX nodes? A bit more SLAP.
Many identifiers, the names were updated to use the URI for the file name, I think we should probably do that instead: java throw new IllegalArgumentException( "Identifiers for use with this indexer may not end in '/'!");
typo in unfinishedRequest -> unfinishedRequest
why is this removed?
please remove
nit: can we use rowGroups instead of stripeStatisticsValidation?
Whats the point of this change?
should we remove this line?
the return value is not used.
null == adapter
I think we should still have to specify the ContentTypeConfigurationBuilder here, with less error prone for different attributes.
Please change **@NoAccrschema@** for **@C_AcctSchema_ID@ @NotFound@**
Cache the StringBuilder in the line above.
Nitpick, use braces
Don't swallow exceptions, use LOG.error
please create a method or method with an appropriate name.
Most of the setup in this test is superfluous as calling into the last line with nulls only will result in the same exception. However, doing it so would require to catch the exception and make sure we are getting the exact one we expect.
since we are before can do action, you should also check that getVdsGroup() is not null
Can be replaced with lambda
Can you add a for-each here?
We should also check that the query is not empty before we have order_by.
I don't think this is necessary. This can result in some "untransmission of a blockwise request" in the future. It should be sufficient to have a Request for the cancellation check.
final
Just noting that the inconsistent use of the _FIELD suffix annoys me.
"page is required"
Could you please rename this method to isDeduplicateObjects? It's not a big deal but it's uglier to keep it in the future.
If colorOutput() is empty, you can just do a.append(null). Also if colorOutput() is null, and isBatchMode() returns true, then you should be returning false.
I just realized that fTraces is the TmfExperiment. There will be only one iteration. So, the change of the name 'fTraces' will not be to use the other progress monitor. Also, I noticed that the event is not added to fTraces, so I think we can safely remove this line.
the change of of this file is the original implementation. When partition.getReplicas() returns null, it's not needed.
Should IdentityClient follow the same builder pattern as all pipelines?
You can use Integer.toString(int) to make it more efficient.
Please handle InterruptedException and set interrupted flag. Why after interrupt you wait here?
The above should be a constant on the UI e.g.snmp.getSchema. And use that here.
I would suggest to add a TODO here to show the contributions to the database
Could we use the four-arg constructor and directly call readUnsignedITF8(inputStream, referenceMD5s)? At the moment I think it would be more clear to remove the static.
How about this? java if (rel instanceof RexAggregate) { return new JsonFieldAccessor("", rel.getRowType().getFieldNames().get(((RexInputRef) rexNode).getValue3()).doubleValue()); }
We don't need to make this public, we can move it to the minimum code which has the same effect.
verify that there are cases like deletePipelineConfig
storage should be final according to the checkstyle guidelines (which are deactivated in this plug-in though). Anyways, I think we should stick to it as far as possible.
Should this be the same Date instance as above? If midnight happens in between the creation of the two instances, this test will fail.
project.getId()
creation of assertionTypeTest is duplicated in both testTransformXDRResponseToCheckPolicy and testTransformXDRResponseToCheckPolicy. Try to do it in one place.
This line can be removed
This can be simplified with : if (this.privateKeyHostsFile == null) { this.sshDirectory = new File(System.getProperty("user.home"), ".ssh"); } else if (this.privateKeyHostsFile == null) { this.variantHostsFile = "known_hosts"; } return new SSHCredential(this.sshDirectory, this.privateKeyHostsFile, this.observerOnServerAuthentication);
Isn't allocateLockTimer.time() already called in the lock manager?
Do you still need this if you've created the appender?
I think we should now use message rather than message
The new Object[][]{test1_comp.interval_list", "test1.dict"}, {"test1cf", "test1.dict"}, {"Homo_sapiens_trimmed.dict"}, {"Homo_sapiens_trimmed.dict"}, {"test3_comp.interval_list", "Homo_sapiens_interval_list"}, }; }
Couldn't we use the factory method for creating them?
The method name is not used.
You could save the ByteBuffer creation and pass indexDataCache into writeRegionIndex(), since the flush method is called only once.
I'm not sure there's any reason to remove this, but would it be easier to write the code to the executeQuery method on the first line?
Is there a reason why we didn't use 'java.util.Optional#substring' here?
isDebugEnabled
what is this good for?
Could we just use guava preconditions?
This could be package private for tests, right?
The same, use java.util.Base64 = StringUtils.getEncoder().encodeToString(bytes) would be better.
Here we have dim2 and dim2 in different queries. The same query is equivalent to druid.foo.sort.Druid, which should be equivalent if we explicitly need to query the result as long as they are equal.
This feels like a very long line
It would be nice to have a lambda expression here for clarity.
A null pointer exception is triggered here, fValues is not cleared.
Can you make this private?
shouldn't need the throws declaration?
I think this should be moved to the "protected" method.
Consider changing this to IContainer.INCLUDE_TEAM_PRIVATE_MEMBERS and throw an exception.
This log message seems redundant, since it seems to be already logged with the exception as the second argument.
No, this method should not throw interrupted exceptions.
Instead of making this a daemon use of the executor and do something like: new Thread(() -> { @Override public void run() { } });
Change this to a more generic Request body.
nit: extra space.
redundant else
Suggestion: should it be > 0
Why is this error?
Can we add a log here to indicate the application failed to generate JobConfig for StreamApplication.
Very minor thing, that now is a little tricky, since it's not a system property and is optional, I'd suggest to use isNotBlank() instead.
either a for-each loop or an iterator.
Maybe it's better that we put in the ES module the time format that ES uses. I guess the TimeHelperExtension#getScalarFunction should probably be a general method that would enable us to import ES modules in the future.
USERNAME_INPUT - User placeholder is an intentional name.
the query returns the configuration from vm_static when no snapshot of type next-run exists for the vm, so this command would always create next-run snapshot I think, right? it is generally not a good practice to call queries from within commands, can we replace it with direct query from the database? btw, this way we can ask to update the specific snapshot we queried - if it doesn't exists we will get an error (which we can ignore) and this command could be non-transactive again. sorry for the back-and-forth transaction scope changes - let's give it some more thinking before changing it again.
I know about about the case of "teardown" and "stopping" of the test, but maybe it's worth having a setup method to get the lock.
Change the above log message to "Action can not applyed because a reference to the 'RuleRegistry' service is not available."
Put this assert onto one line
Why add this? I don't think you need to change anything
I think that we could also make this message more explicit.
Can you please send a proper event handler handler outside the for loop, so we don't need to do it every time. Also, the usecase for eventInfo could be null, should be done outside the loop.
Missing a space between && and (
Missing space after if.
The same normally applies to option groups: use different ids for different groups
I don't think this is necessary. If errorJsonMessage is null, it will return an errorJsonMessage. Leave it null, and there will be a NPE in the next if statement.
Strings.isNullOrEmpty
you are only setting flag to false, but still unnecessary loop operations are executed
use logger instead of string.
suggestion LOG.info("At boot {} checkpoints from storage.", numberOfInitialCheckpoints);
It also doesn't allow me to change the destination branch if my change is in DRAFT state. I think for draft changes we should definitely allow to change the destination branch.
reminder - please remove System.out.println from test.
This should be a check that the currentDisplay is not null.
I think the transport should be immutable as well, perhaps deprecate it.
Is this method used?
There seems to be a lot of duplication in this method, it could be pulled out into a method.
This validation block seems to be duplicated in a couple of places. Maybe it would be better to extract the logic to a static method and call it from these places.
This should be a switch, since the case is more than a known value.
warn
It was args, not argb, that was supposed to be checked for null.
rename to E
No need to use an empty line before the builder.
As I understand the other worries, my question is whether we have a PR with the current revision id in the error message.
Do we need to check key!= null
Maybe you can have a?: here?
This is already done by the driver.
Please declare the short lived in this case
Please add the Identifier of the Contentlet, for troubleshooting purposes.
Why are these two lines conditionals needed?
Same as above, there is no need to save a list of DRepresentations.
Make the constants?
Join this with the trace log below it.
![MINOR](<LINK_1> 'Severity: MINOR') Remove this use of "currentIterator". [![rule](<LINK_0>](<LINK_2>
is Type chromosome?
any reason for saving spaces around ==?
What happens if we use 4-space indent here? Do we need to fixture as well?
This is similar to Decryptor
new lines
Would it be cleaner to not modify this data, since it is used in the constructor
you should handle all exceptions that have a catch block which is never thrown.
A small thing, but maybe we can store destObj in a variable to avoid the duplicate calls
parameter exemption
We dont need the 'label' type since we dont need the name in the 'label'.
Do you expect an answer to this? If you do, then you need to change this error message. If you don't, then you need to change the assertTrue to assertFalse.
If you are expecting a message in the assertion, it's probably not enough to be a failure.
We should use the same behavior as the other exceptions.
It seems to me that there is some way to avoid using.get and getColumnDimension(), as you don't have to do all the checks.
let's verify the result
to remove empty lines
I'm not sure how this is related to this PR. Will you check with you to have this variable as a separate variable?
This doesn't check that all aspects are well known to the experiment, so it's a "real" trace type, which is not what we want to do. If you want to do that, you could just do return trace.getTraceType(experiment).map(trace -> trace.getEventAspects()).collect(Collectors.toSet());
The system config here is "getsrsName()"
Left over from debugging?
I think this is the wrong error message. You should say "Unknown key for host: '" + host + "' already exists." You should also have a method in the Enum class that contains private static String addPrivateKey(String host, byte[] key)
ExtMadiaType?
We should be chaining the two arguments here instead of directly accessing the Intent.
why is this left over from the previous line?
minor: this could be private static final
we should put this logic in the umlcv, not the generic ones in org.eclipse.uml2.uml.uml.model.element.utils.ElementUtils;
I think we should use PDataType.TIMESTAMP_PRECISION instead of hard-coding precision/scale value as PDataType.LONG_MAX_PRECISION.
We should move these strings into constants.
There are no need to add a new test that is actually required.
See getAllLifelines remarks
Seems to me that this isn't correct? The code in added to ResultValidator expectEvents is called before the ResultValidator expectEvents is called.
This is nullable.
Not sure the current logic in this case... the question is -- do we want to allow adding a lot of entries in the system? If not, this is probably a bug in the Pull RequestProcessor, so we can pass that along when the existing items are added in the Pull.
This is unused, so why make it?
same suggestion as above
Should we log a warning here so the executor can decide what to do if it's safe to do?
Can you move the declaration to a local variable at the top of the method?
Can you make this debug log statement below and use the LOGGER.debug()?
no need to throw InterruptedException anymore.
Do we really need all this logic?
It seems like we need to set byte state to STARTED and call base64.close() when the lock is already in the finally block. The base64.close() call could be complete and the connection won't be released as part of the lock. The reconnect could be done at the end of the method after the user can resume.
A lot of this logic seems to be reused for each container. Is there a way we can generify it to save some code duplication?
Why we need to create local variable for the liveInstances?
I think we should verify the length of the commit name.
Should this result in all active connections being discarded? During runtime this may happen if the configuration is cleared by the config map. So this should be done in the managed pool.
Just to be sure, we don't need to check the list. This can happen atomically with partitionsFor(topic). We can avoid creating a new List.
Check without throwing Exception.
Better use { } around if body.
I think this will only apply to files where they are not handled.
The return type for.getTrace() could be overriden in CtfKernelEvent too.
why not just throw exception, since the exception is not thrown
It's probably worth separately checking the valuesMap.put(cache.keyFromValue(value), value); to prevent the scenario where two objects are created for the same key but the returned value is already cached.
how do you feel about adding some spaces spaces? (e.g. resource.getName().toLowerCase( ResourceInfo.class ) )
Why do we need to check for null?
Could you please change this to "this.realm!= null && referencedGroups.contains(groupName.toLowerCase())"
Please remove the extra stuff here.
As above, I would use map and forEach
Use try with resources
I think we should guard against null here.
mobilePhone->mobile
should this be greater than exception?
When we invoke MessageHistory in the initial message, it is better to use the generic MessageHistory method.
why not List<T> list = this;?
Change log level to debug
1. What if the device is in the cluster and vds_group_compatibility_version? 2. why not send one VG and then call vds_group_compatibility_version() to this?
this can be presized
I think this would be better as if (_requestLayout == null) { jtaxLogger.logger.trace("{} ({})", xid); }
What is the purpose of this sleep?
The reason why the variable was changed to final?
"this" is not too specific.
There is no mention in the DASH IOP that this value needs to be zero zero.
This should be in the previous commit as it has been mentioned in the commit message.
I'm not sure if this works, but maybe I would move the above code into a smaller method?
call this?
This should be logger.error("Exception occurred during bridge handler recovery", ex);
Is the first else statement not needed?
We can consider to create a rule from the Maven project. It can be used in the test xml file, and then change the Build pom to not depend on the overriding version.
I think InstanceGroup.is a boundary case will be clearer
Could be simplified to java public static String getHTML(Alert alert) { String s = message.getResponseHeader().toString(); httpMessage.append(s.getString("codedx.error.httpMessage")); httpMessage.append(ReportGenerator.entityEncode(requestHeader)); httpMessage.append("\n</responsedata>\n"); return httpMessage.toString(); }
I think we should return a unit test to set exrageAvailable
How about making the method private?
We're using this method - CleanOperation should not be used.
Could we create a CountFilter(Statement) that takes the stateEncoding to be set in the constructor?
I would prefer this to be a boolean; that's easier to read, and the error message makes it more obvious what's happening. As a matter of personal preference, but maybe it's better to use some other variable names than'result', so that people are not who cares about it.
Ahh I understand now, this needs to be declared outside of try catch, which will log these exception. I think it would be better to use a "failed to instantiate" message here, which will be confusing with the exception.
@timur27 I think this should be paramIndexPtr = null; no need to wrap it into an array.
static?
Unless you're using a StringBuilder (or it's not a thread-safe way), it would be better to use a StringBuilder instead.
# of(?
Should this be then!=?
Instead of checking for empty string, lets have only default constructor
Alias two strings again :)
We could bail out earlier by changing the check further up to java if (hasPhotoId) {... } else {... } would bail out if the list is empty (which just means we'll lose the bailed data) from the validation perspective.
it does not make sense to have both last repl id and chkpt for partition...table ckpt parameter can be used to filter out invalid loads
assertions will be relevant here
I'm not too sure whether this makes sense. It seems like creating the branch in the UI would create one that's upstreamConfig and then pass it to getDefaultUpstreamConfig. That way, we don't have to add the following line in have the createBranchPage method.
What? Is there any reason for this if statement?
Is there a reason for the 3rd case? It's not backwards compatible.
You can use experimentModelDAO.getExperimentModelDAO()
Authenticated doesn't exist in the request. Are you sure it's not working?
Might want to synchronize on "this" outside the lock.
This statement isn't needed, no?
prefix get is used to decide what to do. It seems it doesn't make sense to me, however, checking the number of columns is an instance of Group and assuming that they are more than one column. What about the column names?
Why are we returning a new List here instead of a List?
I'd prefer if else if (clientDetails!= null) { clientDetails = toClientDetailsEntity(clientDetailsIdPCache.get(key)); } else { clientDetailsIdPCache.acquireWriteLockOnKey(key); }
I'm wondering if we can use String.join instead of String.join?
Is there a need for this method? It should be private.
please don't touch old formats, whatever they do let them do that
Same deal here. If you have the enum how come we want to keep a parallelism, the default timeout.
Since this nature isn't only for MTranslationUnit, I would replace the project creation with the opened ITranslationUnit
i18n?
Should be removed.
session -> doPrivileged(session, s -> {
Hmm, we don't have to set the order in this line since you're using the above line.
Can you move it into a private method?
Add another error message, that will be resilient if the query is not found.
It would be better to use try-with-resources or close it inside the finally block.
no need for if condition here
Why isn't the check for null? It's not enough to have the Id for the entity store.
won't this be null?
This is a bit hard to follow. Are we sure the code should be in a different form? Most of the code should be moved to the AdminListenersHelper.
What is the purpose of this check? I'm not sure how it's related to the PR.
it only sets the DOMAIN_1 to DOMAIN_1 and then the parseNativeManagementInterface1_1 call here is redundant check.
If the BitSet is not properly GCable. It looks like the fact that they are written to a byte[], so there is no need to allocate a byte array.
I'm not sure about this, but I forgot that it was done previously. If you set a default size of 16MB by default, then this will not work.
If we are not using this deprecated API - please remove the old implementation and call _this.ureinManager_ here.
I would prefer to see this constructor can be private as it is used by the other factory.
A minor: exists method should be private, and you don't need to create a new method to add the private methods to the PanelInfo class.
Change StringBuilder to StringBuilder
nit: maybe TMP_DIR.stream()
better to use the official way here true instead than "true"
This should be removed and the change should now be managed such that adding or removing the busy tag should re-style the folder tab.
This should be thread.interrupt()
always access namesMap to private
You can use early exit from method
rename to member
Don't need to check for the future, just add a predicate to the body
This seems like it could be simplified to just use PushOneCommit.Result r = pushTo("refs/for/master%hashtag=" + hashtag1);
More than 120 chars, please.
This still appears to be an odd indent for a single line.
Seems like this one is missing some debug output.
can we print the message here?
else overwrite it.
Missing a parameter
I think you'll want to set max(DEFAULT_HTTP_TIMEOUT_SEC,...) to avoid the assignment of value in the constructor.
This initialDelay is not required. You may have a race condition when multiple threads are running in parallel, but the scheduler threads are blocked. It will be a problem because the scheduler threads are not blocked until the JVM exits.
Is this supposed to be empty?
can we have this logic to show the user the upload failed?
Not sure if this is really necessary? Here's the active question on question.
Is this really necessary? The message is about "Recovering worker state."
would probably be a bit more clear if this method is called repeatedly in future.
Since this is only used here, the assertTrue statement could be simplified to assertTrue("Create folder with name \"mydir\"?");
entry
I think this could be replaced by either idKey={} or accountJson={}, accountId string and accountJson =... and then, no need to break, or can we instead continue with an error message? That way, the C C log can cause issues and logs in the calling code.
View#refresh_error is unchecked and could be removed
I believe we should not be catching this for RuntimeException. They can be handled in the other way.
We should not use bitwise operators for logical operations. Please use them. In such cases it is better to have braces.
I think this could be just be assertThat(consumer.partitionsFor(any())).thenReturn(1L, 2L, 4L); As a result, we also have to be sure that the first consumer will be closed.
Do we really need to check that MaintenanceVdsCommand would be called MaintenanceVdsCommand or MaintenanceVdsCommand? Can't we just pass the MaintenanceVdsCommand to that command?
I think we shouldn't need to handle Map<String, Object>
Can we remove "filterFunctionName" and "get filterFunctionName"?
it is not thread safe to access the field in a simple way. Share the string in our API.
Format this line is not aligned.
Make a real test out of it :-)
Should be "incorrect" here.
Add lockService.id()
since you know how many times the method is called, you should just return null
"Only read-only" -> "Only read-only"
shouldn't this be taken out?
Is this else needed? Could you please leave it as is?
Something minor: You could use ConfigValues.class.getSimpleName() instead of hard-coded class name.
minor nit: we can skip this check by doing if (instance instanceof Closeable)
This line is not required.
This looks a bit complicated: public void copyContents() { File baseDir = project.getBasedir().toPath().resolve(configDir.getPath()); doCopy(path.resolve(Locations.CONFIGURATION), baseFile.resolve(Locations.MODULES), baseFile.resolve(Locations.MODULES)); } private static String resolve(File baseDir, File File baseDir) { File baseDir = new File(baseDir.getAbsolutePath()); return baseDir.toPath().resolve(configDir.getPath()); doCopy(path.resolve(Locations.CONFIGURATION), baseFile.resolve(Locations.MODULES), baseFile.resolve(Locations.MODULES)); }
nit: let's keep the layout list as final and use DataSize(0, BYTE)
shouldn't azureLeaderElector.tryBecomeLeader() always return false at this point?
if (LOG.isDebugEnabled()) {... }
There are too many empty lines between them. I'd recommend adding them together and removing them.
We should iterate over favAppsList instead of manually.
This method should not be public.
This is better as a log.debug, otherwise we will see it in the future
Maybe rename this to rcrTimeoutExecutor?
I think it should be assertEquals(ByteSizeStrings.java().makeSizeString(23456789), "22m");
Why not use Workbench.getDisplay() here?
We don't need any wrapper here. List could be converted to a java.util.Map.values().contains(0, eventTime): <LINK_0>
Change the bungee field to something like limit < 0
Blank line before and after?
Need to put this back - cannot change the API
Could really just use StringUtils.isNotBlank(dataHolder) here.
You should add a warning log also here
downloadsMenuItem.setProgress(progressprogress) should be checked that directly or necessary to get progress bar on the view.
nit: can you make a private instance of this class?
rather than hardcode the string, can use the class name
add braces around this if statement.
I think this is too verbose. We can update the code to be more generic.
nit: consider super.getEstimatedSizeBytes() instead of re-computing the logic of the API
static import
This could be replaced with: Iterator<Object> it = list.iterator(); it.hasNext(); ) { Object o = it.next(); if (o instanceof String) { String mediaType = (String) o; return o; } } return false;
Since we have a direct call to the UDFHelper and not the entire class, do we need to create a separate class for this?
initializeStateValueType instead?
And a small nit, I'd suggest moving the condition out of the if to where it is clearer where it is. That way the only case where the local component is created is if it's not an empty state, and the command history will contain both an empty case.
This line is too long...
There's a bug here (alebit; a small potential one) where if the integer fails to parse the component will be built but be empty since the populateReviews call make actually populate nothing.
Only this should be instantiated once we're done with the other ctors.
While convenient, this has a massive performance impact unfortunately. Looking at the code, we know that T extends EventEntryModelDao. I think it's fine to change the interface EventEntryModelDao to expose the setters (make sure to also add the @Override annotations in BusEventModelDao). With these setters, you shouldn't need this anymore.
I'd put this method into the execute() method and put the logic in that method.
File.toPath() may throw InvalidPathException. Since it doesn't catch an IOException, there's no reason to catch it.
why not have java docs to explain what this does? ( why it does it in that way etc)
remove extra line.
delete this line
you can remove the surrounding brackets
AFAIR this is not used anymore
Why catch here and not throw it immediately?
Same here
it's already fixed in line 189
Hey @dgutierr, I forgot that we already have a utility for this. So the PostsListFragment is used to identify the activity's items. Perhaps I missed something, but we should have a TextUtils.isEmpty(mSite) check in case it's a null check.
nit: I think you can use [AssertJ](<LINK_0> here and below
Can this not result in loosing data? If a job is already running, a change happens and the system want to save again, would that lock not loose the new data?
suggestion if (isValidRefName(fullName)) {
Collections.emptySet()
the token will not always be " ", sometimes it depends on ldap.accountFullName
Duplicated code, we have _zkClient = _zkClient.createPersistent(MetadataStoreRoutingConstants.HOSTNAME_SYSTEM_PROPERTY_KEY, zkAddress);
you can use a logger here. it is not only for debugging
We should probably be using a iterator here (practical reason).
Use getPermanentOrLKI if no longer exists.
Im not sure why for this new card _expiry_ and not in the same way for other definitions?
Doesn't.get() also return null?
This isn't the wrong way to call this function. It's the only thing the fragment in onActivityCreated and is the text that you pass in. Or the parameters can be context menu as a parameter which we don't want in the menu item.
Log the object here.
Maybe you can rename this to something like 'findGroupsGroups'
I do not think this is correct or will be handled for api calls, make sure the method is called with a null result
lambda?
I know this doesn't really matter but if you throw an exception, then the code will never be executed. The method should throw an exception.
Cache
why we need http here doesn't make sense?
Not specific to this code change, but what if the server is unreachable? Say, it returns 500 (internal service error) or 503 (service unavailable)?
If there are no files that are opened, this test will fail. [Use intention](<LINK_0> or [Use intention](<LINK_1>
Can we get exception here and return null - if it is not what we get then throw an exception?
Is it simply new MapDetails(game.getDiceFirstValue(), game.getHexDetails(), game.getNodeDetails()))?
Throw a RuntimeException.
I wonder if it could be replaced by : keyValue.stream().filter(SiriusInitialOperationAdapter::getInitialOperations).map(SiriusInitialOperationAdapter::getInitialOperationsURI).findFirst().orElse(null); and use it in the lambda as well.
We should use braces around the braces!
Is this param necessary?
This is a cast, not sure if it's worth adding a custom method of the intent to subscribe and have it return the correct value.
Please save a second string in the next line.
The life cycle should be taken out of the loop, right?
Does it make sense to use try-catch-block to avoid printing stacktrace?
Extra space after (
This doesn't look like an easy way to do.
I would rather return another warning ("Blank project name in the list")
What would happen if the chunk is empty? Suggest doing an if-then-else based on the case that could fail on these two lines.
Is this function supposed to be called from inside the dialog/handler? I wonder if we should do something at the top of this method.
Use else if (commitCounter > 0 && connection!= null) {
Why we need to change inputGate.java?
Personal preference: if you just want to fall through to the else case, it will be more readable and easier to read.
"Access Denied" is also a constant in a messages.properties file.
Use StandardCharsets.UTF_8
This doesn't seem to be a thenAnswer? When at the time of something, I'm not sure I like the idea of passing the errorCallback to be called a no-op while it's a no-op.
Shouldn't you be using the static resource file from the binary?
you could probably check for null and throw an IllegalArgumentException if the response is not FOUND
_could_ you put the assert in a single line?
Maybe consider moving this into a finally block.
This is not a good way to write toString() as.map(this::escapeValue).collect(Collectors.joining(COMMA));
Shouldn't this be a warn instead of a warning?
What was wrong with getHover()? Why couldn't you put 'playListenerListener' into it?
Do we need getDeclaredMethod("apply" methods here?
I think we should use something that has the format of the URL doing the actual format. Of course this test has already been doing that somewhere, but I think it's useful to make sure the http request path includes the format of the data.
assertEquals
Illegal argument to method getMessage
@marchof I'm not sure if we should move this code to some test, in all the tests we have it to be sure that the setUp() method is called every time.
Shall give detailed error message with source/destination Db/table names.
This check should be inside the loop. Otherwise, base can be null here.
Please remove unnecessary space before and after =
nit: we can drop the else clause here to make the code more readable.
This is redundant now since it is already a boolean
@miguelaferreira The following seems a bit strange to me. 1. " tempList" is always set, 2. "tempList" is not set here. 2. "tempList" is always set, and you'll get a null pointer exception on line 88. If it is, it would be nice to handle this wrong.
Is the JUnit test actually testing the case when just to run the code from the security manager?
setErrorMessage
don't construct an exception
Use AbstractQC.UNSAVED_ID instead of hard-coding it here. Same thing for other classes too.
This is not correct. The URL ("path:" + "/path:" + requestUri) is URL only.
Using something like: "-source".equals(target) in normalized.add(target). It can return true if the normalized object is not null, and it will not compute this information in the method.
Should this be moved to the PosixParser?
here we should go to a single test, since the test method might have asserts static static boolean assertNotEquals(String s) { assertNotEquals(s, s); }
All hard coded strings that used as a key to get data the bundle should be declare as constant in Router.java.
It seems like this could be a static method in Function<Object, DateTime>, which would be more explicit than casting.
it's better to use [try-finally](<LINK_0> here to stop container in finally
this?
Could you extract the Data error as a separate method to avoid the repetition?
A lot of the logic here is the same as the first check. Can we refactor to a common method?
There's a View::hasPermission() method
add CDA here and return false, if it fails you'll end up with null vmTemplate which will cause to an NPE. as it shouldn't happen i assume that we can solve it in the opened bug.
As suggested by IntelliJ, this condition should be if (condition) { and the case.
We need to test if the table is created for this test.
Looks like the 4th parameter is no longer needed. Since the PR targets master/, it would be fine to remove it altogether, no?
setReturnValue can be Guid? As the snapshotId is not populated apart from Id, so is there any need in returning this?
Could you please put the FQN on same line and add a space?
This might be simplified to just throw AmazonServiceException(ex)
Can you rename this to maxDataVolumesSupported and then add a similar check for if statement please?
should we only on recurse here if ids is null? otherwise we will retrieve more than was asked for.
Why don't you pass true as the consumer?
Does it make sense to wrap this into a method (and maybe even create a new method). It does not look like this is really necessary.
I am having a bit of code duplication in this method (and the one above) of parseConfig(). I think it's needed, but this isn't quite the point that you need to care about the case where you need to know. Hint: you can add a more detailed log message in order to debug better.
Can you change this to just TimeUnit.DAYS.toMillis(time)?
I don't understand this branch. Why just not to create it in this case? Because this is exactly what you do outside of this method. You call takeProducer() twice (in another method) and then you call takeProducer() again.
Do we need to catch this exception?
This line is the same as in previous method, right?
Should check for disposal.
Does this code actually do anything?
state.replayObserverFromIndex could be moved outside the call since it will always be the the IndexManager. I'm not sure if this really matters but I think it's better to try and make an index out of the index and then pass it to the IndexService.
Should not we use a default ChannelGroup transform?
This needs to be public.
Should we add an error log to indicate that it is not an error (or warn).
It seems that the queue.poll is going to be quite big (like you did with the queue.poll), but there is no value in the queue. Can we really gain the latency of the wait?
Should we add the navigator's dependencies when this is not supported?
.obf is not always true.
You could get rid of the catch block and just make this method return value
Is this line necessary?
is this doing something similar to the IndexPopulationJob? Seems to me that it is a little confusing.
Style-nit: no braces around single line blocks
Here too - use Integer.valueOf(0)
This should be declared on the declaration
And here you are casting, but.distinct() is not necessary?
Wth. You are doing a lot of work on the previous line.
Positioning's'f't the 'try' part of the loop will fail faster. e.g. java assertThat(CorfuTable.getSmrStream().pos()).isf");
This exception is handled properly.
Should be an IllegalArgumentException.
Uh
Why do we need the null check here? Is it done in the @Before method or in the @After? I'm wondering if we should avoid changing this method.
I think we can use newInstance to allocate ar
Why do you need to set the task to null?
You can avoid the null check here, groupingPairs.get(start) is not needed anyway.
this is still necessary, the binding of the custom marshaller was removed
nit: could extract the code here and in a private method? That way the fallback and resolvePath would be called for every parent node, and you could do it in the first place.
we shouldn't make the setting of the flag conditional on autostartup
please reformat code
as we discussed, this could be a static constant in the file name (although it is used twice, it might be worth adding a private static final in this class to avoid re-compiling on each call
Use ILabelProvider.getText(i) instead of e1.toString()
Please add a null check for this. Duplicated checks
Please also set the filter to gone when there is an error (line below).
if you're not using anything other than _embedded, you should definitely add the name of the trackingTool as a parameter of the addLinks() method.
revert this string
This is a local, let's rename it to location (the sourceLocation)
This test doesn't check that the retry context has been retrieved. I'd remove this and then have a different assertion.
Can you think of adding a new method to the form just to have it call this method from the if condition?
Could we please replace this with a simple method call or even with a simple method call?
model.getGenericParams() is an expensive call (makes a List and walks the PSI tree). Please capture the value, then test and use it.
A save to DB is missing here (and above in ExportDms). Please adjust ExportMetsIT to test reload from DB.
Use equals instead of returns on strings.
May I ask you the purpose to check "retry_count"?
I see you have done a similar change in the following patch, just this one. Currently it is the same as the one in the SQL query. With static properties, the view of the SQL query is inside the SQL query. With static properties, each change of the SQL query is in a separate change. With static properties, the view of the SQL query is somewhere in the SQL query. With static properties, any additional information in the SQL query could change the column names in the SQL query. With static properties, the values in the SQL query are the same and always the second (both in the SQL query and the query string from the SQL query). By the way it is not that important for the unit tests, (e.g. to have a pass-through of the annotation) to between the two calls. If they are the same, I would go with the annotation on the second method. Currently we have the column names in the SQL query and not the actual column names in the SQL query. With this change, thenReturn the actual column in the SQL query is the parameter of the method, which is always the string in the SQL query. With this change, thenReturn the actual column in the SQL query and from the second one in the SQL query. With this change, thenReturn the actual column in the SQL query and from the second one in the SQL query (e.g. java.sql.planner.Time#toDis), thenReturn the of the actual column in the SQL query and not the value in the SQL query. With your current implementation, thenReturn the actual column in the SQL query and not the value in the SQL query. With this change, thenReturn the actual column in the SQL query is the same as the expected column in the SQL query, which is the actual column in the SQL query. With this change, thenReturn the actual column in the SQL query and not the value in the second call.
As far as I understand, locking and addition of the reference counter is hard to read.
Why should we use a transaction to save those devices at all if when we get those devices from DB we can get them from db?
Can the above be tested too?
What about putting this into the finally clause and do try/catch again inside it where you would again log warning that the stream cannot be closed in case close throws exception. By doing this, the stream will be attempted to be closed even if reading of properties fails.
The StickyHoverManager also added a filter for SWT.FocusOut, I wasn't sure why, but now I figured it out: If you move out of the tool tip but into another non-Eclipse application, the tool tip does not close. But worst, if you click or Alt-Tab to another application to make it go to the front, the tool tip remains 'always on top' and hides the other application. You have to go back to Eclipse and mouse move on it to make it go away.
I would prefer to circumvent the call to pluginRepository.getPluginInfosByKeys() and then call pluginRepository.getPluginInfosByKeys() instead of pluginRepository.getPluginInfosByKeys().
I think we should use a instanceOf and assert here just to make sure the exception is as expected.
suggestion String userId = StringUtils.hasLength(withUser.name())? withUser : withUser.value();
If the InputStream fails with an exception then the try-with-resources block will not get closed. We need to read the file again when an exception is thrown.
This was present even before your changes but I think worth to check as touching it, would you mind to have a look? kie-wb-common-stunner-extensions/kie-wb-common-stunner-forms/kie-wb-common-stunner-forms-client/src/main/java/org/kie/workbench/common/stunner/forms/client/widgets/FormPropertiesWidget.java:155: error: NULL_DER object diagram last assigned on line 151 could be null and is dereferenced at line 155. 153. final RenderMode renderMode = formSessionHandler.getSession() instanceof EditorSession? RenderMode.EDIT_MODE : RenderMode.READ_ONLY_MODE; 154. 155. > formsContainer.render(graphUuid, domainObject, diagramPath, (fieldName, newValue) -> { 156. try { 157. formSessionHandler.executeUpdateDomainObjectProperty(domainObject, fieldName, newValue);
Yeah, what is the purpose of this PR?
I think this should be called getInfo() or so: it would be useful to be able to commit any deleted file that was actually deleted. It's useful to be able to commit but actually commit information.
Do not start in an inconsistent state: the loader needs to know a super set of what the store knows. If that makes the test a duplicate, delete it.
I think it would be better to add a server health message here. It's also not really easy to debug the issue by doing anything by using java.net.URL class: maybe we can use Identifier.getThreadPool() instead of che.infra.kubernetes.namespace.label=false if it's used elsewhere. Also we should consider using CheUtil.hard to parse the name of the namespace.
Why is this change necessary? checkForNulls() sets the returned list to the default param if the check fails.
We can't use a [optional](<LINK_0>,%20java.lang.String,%20java.lang.Object...)) method.
As we discussed, maybe we should raise issue only at the case to be false?
I'd extract the logic of term.substring(1) into a variable.
It should be added such check.
would be nice to move this error message to InformNoToolHandler.java
I don't see where it is used
Should be: suggestion if (series == null ||!cassandraOperations.getKeyspaces().contains(partitionKey)) {
I am not sure why we need to wrap it in an if if we one are already in the queue like this one will wrap it.
suggestion "If Username or Password is null"
can declare private final
You have to get the ICompareConfiguration from the IDE, use the getProperty() instead of this line: List<Object> h = getEditorInput(); if (fOutlinePage!= null) { fOutlinePage = h; }
Why do you need to take the chance of the Seek class here?
Can't we extract these duplicate intent.putExtra and startActivity(intent) to outside the if-else? (line 101,102 and 115,116)
Why did you add this deleteOnExit if you call tempFile.delete()?
I'm not sure if this is the right place for this. createFromPrintfStyle returns a StringFormat with no arguments, so we should throw an exception when it is not a StringFormat. Either the StringFormat should return Optional.empty() in such case, or StringFormat.createFromPrintfStyle returns a StringFormat with no arguments.
why updating this stored procedure?
Is it possible to declare this as a super class constructor?
Irrelevant change I'll do this myself.
I think we should verify the flow is that it was executed.
Remove the extra parenthesis
If you want to make sure that there is no project in the beginning of the test (test class) you can use CleanWorkplace requirement instead of calling after method which does the same in other way.
This seems unneeded
We could probably make this more readable by declaring a field called RefundSummary.java for the sake of modifying the test as it is called for every request.
I like the idea of having a static method that does this check, putIfAbsentOrExpired should be added as part of the DataContainer API, and the other to version a lot of the logic. If you want to move the check from the DataContainer to the dataContainer then all the time and remove the entry is in dataContainer.compute(segment, key, putIfAbsentOrExpired) in the check.
Better to use @Test(expected = NullPointerException.class) and then you won't have to worry about the public methods.
"... subprocedure pid {}.."?
I don't think it's needed. If we want to start a VM with a name that is not in the prestarted VMs
I would add this check before varInstanceLogId, and the variable can be removed as well.
yes, this is the purpose of the PR.
What happens when configSetter is null?
It feels like we should have a bnd.info file.
i think the stream should be closed even if the method fails
InsertObject?
I forgot to mention in the other review: It's always good to call into a method. See other status as an example.
better to use isEmpty()?
This will not work for very large vaults. Please add a method to guard such that we never call this method.
Call this indeterminate maybe?
You can get the performance improvement and move this code into the first method.
It would be handy to have severe log message to diagnose if something went wrong so it is easier to spot at the point where it is an obvious severe message. (We could even do this in a PR.)
We could also try to use the icon theme here, for instance the user icon.
Please use StringUtils.format() rather than string concatenation, because it will be faster, and slower.
I don't see this being used anywhere. If an exception is thrown, the callable is not required
This should not be necessary if we have the marker from the outside
Should be addTable(tableName, table) so it can be skipped if partitions are not found
should this method be private?
Can we add some safety here? suggestion if (keyClass instanceof Class) { //... }
log4jConfig too
This is a bit hard to follow. How about the following? java if (!HiveSessionProperties.isParquetOptimizedWriterEnabled(session)) { return Optional.empty(); } if (!MapredParquetOutputFormat.class.getName().equals(storageFormat.getParquetWriterPageSize(session)) { return Optional.empty(); }
Seems to match the return of false asserted a few lines above this one
Use stream api here?
This is incorrect now, please remove it
Instead of using string concatenation here, just use {} and avoid string concatenation.
If it is not defined, then the method can be simplified.
I don't think we can get a monoError on this. We can just return Mono.error(messageSerializer.deserializeList(responseMessage, Instant.class));
I think you could use logger.debug here.
In my opinion, we should be able to do: if (occurrence!= null &&!healthMapLocation.getAlerts().isEmpty()) { //... }
same here, don't need to set the value to 'true'
Change this to an error?
I just noticed an error in one of my PR, it needs to be if (inexactSeek && selectedDuration / (int) DateUtils.SECOND_IN_MILLIS % 10 == 5) { Otherwise the seek durations get rounded up when opening the settings, even if inexact seek is disabled
+ on newline to remove //NON-NLS-1
It may be better to check if the directory is actually a DDBPathMetadata. If it is, we don't need to modify the state at all.
Can we use LOG.error here?
since accountNumber is an anchor, there is a lot of code copied here; would it be cleaner to move it to an else if?
Consider returning a 404 instead, so callers can tell the user that they set something like "no machine started, not complaining".
We are using static methods for getting the schema field. Could you remove it, since the static methods are fully-qualified?
This is not thread safe. But it's a separate thread. SamzaContainer might be used or if you don't want IConfigurationElement, that doesn't have that order too.
Can we use the final int N = 2 here?
This should be called after KafkaRecordSupplier.addConsumerPropertiesFromConfig
This is the cause of RuntimeException, if you throw a specific exception, we should throw a runtime exception to this method.
Do we need the else if block here? java if (stats2.containsKey(key) && stats1.containsKey(key) && stats2.containsKey(key) && stats1.containsKey(key) && stats2.containsKey(key) && stats1.containsKey(key) && stats2.containsKey(key) && stats1.containsKey(key) && stats2.containsKey(key), mergeFunc); else if (stats2.containsKey(key) && stats1.containsKey(key) && stats2.containsKey(key), mergeFunc);
What will happen if exception is thrown here? Previously when we initialized everything beforehand we had a clear path: node fails to restore memory and shuts down. Now with this change we don't even have a checked exception to catch, it is wrapped into unchecked. Should we call FailureHandler directly in this case if something goes wrong during lazy initialization of cache store?
I would also return something like " ls-files://S3 [1]. [1] <LINK_0>
Why do you need to check for null here? If the artifact is null, the caller should fail with an NPE, since it is not initialized.
Lets stick to CloudBigtableException and handle those exceptions separately. I think we should consider issues with the version check whether credentials is an error and warn.
This should use a switch statement with an else if.
perhaps this is not the right place to add the null check
use getPermanentOrLKIBattlefield instead
I think that if state is null we will get a NPE. It seems that we should validate that the state is indeed not existing.
not sure if this is correct. i think this will not work for theVariableIdentifierTree which is not in the VARIABLE_IDENTIFIER and not in the SUSPICIOUS_ARRAY_ACCESSES, you will end up with the same name and override the method from the beginning.
Is this change required?
What about UnsupportedOperationException instead of a generic Buffer subclass?
|| not &&? is this even a requirement to make codependent?
Is forceWrite called times?
nit: this can be a method reference
![MAJOR](<LINK_0> The Cyclomatic Complexity of this method "evts" is 11 which is greater than 10 authorized. [![rule](<LINK_1>](<LINK_2>
Why not use action.getAlgorithm()?
Change isIncrementalHandoffEnabled to be in the KafkaSupervisor.
Isn't this the default return type?
if it is all the same, move the switch into a function? Just to make sure this is really the only case.
3 * 1.
suggestion: how about extracting this into a method as exact code is being invoked twice and probably once VM.customProperties will be modified from String to Map it would be handy there as well?
Can this be a bit simplified to: if (ulimit instanceof List) {... } else if (ulimit instanceof Map) {... } else {... }
No need to declare it here
The indentation is a bit confusing here, it'd be nice if the overrides were shifter to the right past the first column of the new AuthorizationEntity line
One concern here is that if we have a thread that is stop, then the variable name will be 'expected', we could have a more descriptive name. Maybe something like: "scanSingleNode" or something?
Why is this needed?
Missing final
Add a space between if and (
missing braces
This should be a warn. Even though we're going to retry and everything might possibly be recovered, it is important for sysadmins to know that a failure happened.
The new method should be removed (the empty constructor).
This test should be split into two tests, one for each test and another for the AST, and one for the AST.
use setLastCommand(Object)
Should be setItem(available, f); not replaced by setItem(available, f);
suggestion SPF.optional( SPF.token("topicFormatName", SPF.token("v"), SPF.token("topic") ) )
Unnecessary log line
finals
Style-nit: Braces aren't necessary, more below, and might be nice to compile through the code if you extract the refactoring into a method.
Should we add this to the "else" clause, as well?
Instead of relying on close bytes, you can just use closer.register(this::close), and have a try-finally block, that will close the stream, even if it fails.
Shall we just return here?
Is this a little bit too big? Can't we create a method in SimpleBaseChannel which will only ever return a non-null value?
ExistingEntityException is thrown, isn't it?
Hopefully this does not happen often.
can we add the exception to the log statement to make it easier to debug the problem?
Why you causes this to be false?
nit: runTime -> runtime
I think it would be better to make the launcher accept the file extension. Since you are looking up the files, it is not necessary to have a file name.
If make it static then that's unneeded.
maybe use the logger
I guess this should never happen in theory
Better use file.getFilePath()
will users == null be perform if (users == null)?
This could be isEmpty()
Should be logged in the start() method
you can use lamdas here too.
Why are we showing the are not showing the diff for this bug fix?
Nit: this is a common pattern in other code, consider refactoring this to use an enum instead of multiple string literals.
@prahladyeri We can declare this in the interface here.
Shouldn't the x be > scientific?
I can't help but feel that there is a better way to format these than adding if/else statements everywhere and concatenating the string inside those blocks. Personally, I would: * Add a hasMuteReason method to UserData which does getMuteReason().equals(""); * Use a ternary operator when concatenating the strings instead of if/else blocks: java throw new Exception(sender.hasMuteReason()? tl("voiceSilencedReason", sender.getMuteReason()) : tl("essentials.afk.message");
Suggest extracting a method for extracting a string from the test (e.g.: @Test(expected = IllegalArgumentException.class) public void shouldRaiseAlertIfResponseHasRemoteFileContentAndPayloadIsNullByteBased() throws HttpMalformedHeaderException {... }
You should check if session is enabled before checking the retry, otherwise, you will get an error handler with a lot of "(i)" checks that the session is not enabled and that is not accessible
final
I think it's better to use the [Guava syntax](<LINK_0> here.
I think this code is rather long. Does it sound like a better to have a utility function that does the same thing?
What is the current way to do it? The current way, it is getting called for every online volume!
Let's call it _ ;-)
i think we can simplify this to tokens.length > 1? tokens[1] : ""; if(url.split("-", "-")) { url = url.replaceFirst(path, replacement); }
Maybe it's better to do it as a computeIfAbsent?
This change is good.
Unused code.
I would replace all these calls to getExperimentSampleMap(studyDbId, studyDbId, result) with getExperimentSampleMap(studyDbId, studyDbId);
exception, so STDERR
I think this should be fine instead of assuming that this is the default behaviour.
Same as above in the method
nit: why are we removing here?
Note that all the messages to the log can be localized, so for consistency we should have something like this: log.info("ERROR: sendJobCompletionEvent: (collection=" + c.getCollectionUrl() + ") "
1. Do we need such change? 2. Why do we need it?
What is the journal for?
Use a list instead of referencing an element that has the right name.
It would be a bit faster to sample before applying the map.
The "this" here is not good, as it has to return null.
I think this will be a very bad idea with the empty byte array. We should make sure the max size is the same as the empty byte array.
Log message should get cleaned up to remove braces.
For a clearer way to do this, something like T peek(int value)
I would prefer to make the schema final. Null schema instance here is treated as a simple value, but I like to avoid the null check in the extractValues().
Can you remove the try/catch and merge with @Test( void testUnDeployDataSource( dataSourceDef ) ); } catch ( Exception e ) {... }
This should be startsWith
We should create a separate, generic class for this execution, since the body of the method is always the same.
Why we need to set HelixCache here?
Should be >= and not >=
log.info("Closed clean and recycled state", maybe?
Maybe catch the IllegalArgumentException here?
In general, try to prefer: model.isSetSsh() && model.getSsh().isSetPort()
no need for this change
This check can be billingDate == null
If we don't find a manager that can be used within this class, we should just initialize it in the constructor and let it be null
Why is this needed?
I'd rather add something like.setShouldReject(false).
Instead of creating a new Date, use a [Integer](<LINK_0> (java.lang.String)
Wondering why we need a servlet here. Isn't that just the one central place you want to run for?
It might be better to have this part in a no-op function and also update the callbacks to the Proxy.
Any reason why the logic here is different than for userData just above?
If you do the check earlier, you could do it earlier and if condition.
Can you please remove this logging statement?
nit: considering using just the assertTrue() here, I would also assert that the list size is zero.
Hadn't noticed before now, but would you be willing to update this to pass in the AgentPrincipals as a variable and then you could have it stored in a variable of it? That is how the other controllers are working, and it means the same service doesn't have to be created in the same method. Also, the agent variable already has the same problem.
These messages should really be logged at a higher level, not info.
minor: I noticed AmbryDataNode.getHostname() is for the same host. But I think it is a good idea to log DataNode, so you can remove this log line.
Please use {} placeholders in logger
Can combine these two lines into one.
use context.close()
This would be a duplication if you can extract this also into a separate method like "isFeatureEnabled".
If you merge master branch into this function, it's no longer needed. There's a chance that this can be inlined into it.
In an early return here, we should log the error and return false in the catch block.
If the scrollable text is duplicated, could you try it?
I am wondering why you are calling this method is not thread-safe. This is because I believe the method would be a separate thread-safe class, and the data would be extracted to a method.
do we need to change the bloom filter here?
Race condition?
remove "java"
Both of these work the same at the moment, but it would be correct to use the specific manager depending on case. Better make a disputeAgentTypeSet a disputeAgentTypeSet and set to whichever type is being registered, or just move the specific registration code to their switch cases.
I think that we can do this unconditionally, so have to be sure. When we do t.close() or not, we just leak the current stream t.
Does this work?
Is this block necessary? I thought we'd have already removed this and it's the same.
@pynicolas let's rename it to handleSuccessors
Format
Wondering if we need to clean the folder when the test is done?
Does not handle entry being removed or not modified.
The three lines above should be a _if_
I wonder if this one should not be public, are there any reasons why this is package protected?
new IllegalArgumentException("KeyStore [input] must be 'null') or, better use the method 'validateArchivePath'
I think this will be a bit better if we use a callback.onFailure(throwable) to throw the exception.
Remove the public modifier
Can you confirm that those four Concepts are a mix of retired and unretired Objects? You should prove that this setMembers contain the unretired concepts.
You can use the Essentials's formatter.
probably should move the Assert.assertTrue to a finally block
.*?s?
This should be camelCase, so more appropriate.
This change is OK in my opinion, but it seems better to move this to a method and potentially cover this functionality.
I know this is just a refactor, but please remove the super.tearDown() call here and in the stop() only. Express this more directly: if (mHasWifi) { if (mWifiManager.isWifiEnabled()!= mInitialWifiState) { //... the rest of the wifi-specific teardown... } } super.tearDown();
trace()
This is the same as the other instance of OgcMessage. It should be the same.
If we need to do this, shouldn't we use a private method with a generic name?
During rebasing of latest master in the project, we've made a mistake here that this method returns false for "true" and is more in line with the false case.
Again, the local variable ListDataProject[] listDataProject is not used outside of this method.
Could you add a unit test for this case?
Perhaps we can restructure this map to use entry.getValue() instead of entry.getValue()?
nit: we can remove the public accessor (since we don't have to use the public ones)
Does this try-with-resources block need to be in a finally block?
I think it would be better to use an API in this class instead of StructuredRecord. Something like this: public StructuredRecord getStructuredRecord(StructuredRecord input) throws Exception { return decorateModel(input, inputSchema, config.wordVectors().length / loadedModel.wordIndex()); }
I think you have missed a check for itemIdx and itemIdx to avoid the double loop.
get rid of this since its been deleted in Configuration#getStorages(). This method is only used for test also. Wouldn't it be better to call getConfiguration().getStorages().clear() and then just call getRemoteRepository()?
Log
It might be interesting to use BeanInjector.newInstance() to do this work with all cases in which we will not have to register a bean class.
I'd move this to the method return
Remove blank line?
same exception issue
Maybe we could add a wait condition to make sure that this wait is successful.
what is this new code for?
I'd prefer to see the moved out of the try/catch, and put the exception in a finally block.
This and the above tests are not testing the responseRecord[0]. So it should be good.
Since getParent() is defined on IASTNode, there is no need to actually cast to IASTDeclarationStatement on the line above: we can just no declaration.getParent().getParent() here.
Perhaps it would be worth adding an init() function in the setup? So it will get called each time the timer starts running, and then shutting down the context. I am not sure, if that would be too long, and if that would stop the background queue, it's easier to pick up the config and config.
I'm not sure if this is necessary because it is for FoursquareProfile.
It seems like this could be refactored into a single method which takes a list of taskInfos.
log.debug("BAPI XMI Logon response: {}", logonResponse);
This new String[]{ is unnecessary, it's a common practice.
This method should be for both ContentResolver and ContentProvider, as other methods in this class.
An null check is necessary here. Suggest handling the case if the requestMetrics is null, thembry requests will not be available.
cancel?
You could add a check for a filter (Objects::nonNull) to avoid throwing IllegalArgumentException if the stream is empty.
I'd prefer using StringBuilder here instead of StringBuffer.
Grate! I think we don't need an if (file!= null) any more after this.
Missing slash - should be "/miso/run/" on both the Health, not the same for both.
Useless extra line
nit: wrap this block in curly brackets
See above.
(I remember that the other tests are using assertj methods)
StringBuilder
s/commit/commit/
This appears to me to be a redundant check as it is already done in updateActionAvailability so the action would be disabled right
Why are we doing this parallelStream?
collectionName.substring(0, collectionTempName)
Wrong log message, should be: "Error when trying to apply: {}': {}
We should also have a test for the get() method.
Let's catch more concrete exception here.
I'e tried with this url and it didn't worked: <LINK_3> this url was OK: <LINK_0> but it required 5 and 4 http requests to get the final answer each time. I think we should start search from the begin of the path and not from the end to avoid spamming on server and delays on client side. I also would propose that we should recognize http*://git.eclipse.org/* urls and only try <LINK_2> in this case: Eclipse web master and also end users will be really happy to need only one single shot to get the result. Additionally as the example above shows the automatic Gerrit config for git.eclipse.org/gitroot/ URL's doesn't work at all.
This test cannot be possible. We might as well create a new line, but use intellij in place it.
I think this should be assertEquals("OS", certProds.get(0).getBrandType());
I think it's better to do it this way: java ctx.addIssue(exceptClause.exceptKeyword(), "Merge this bare \"except:\" with the \"BaseException\" one.").secondary(baseExceptionExpression, null); If it's not, then you can achieve the same behavior with the following: * org.apache.commons.lang3.exception.Exceptions.Throwables.is caughtInExceptClause * org.apache.commons.lang3.exception.Exceptions.Throwables.is caught(Exceptions.java:511) at org.apache.commons.lang.exception.Exceptions.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(Exceptions.java:511) at org.apache.commons.lang.exception.Throwables.isAgo(
same, no need for "+"
I think you can use KeyBytes instead of getBytes(StandardCharsets.UTF_8));
You don't need to make this a static.
minor: s/store-shutdown-" + id
I think this can be simplified by adding a return statement on the following if-else if: if (result == CompletionStage) { result = invokeMethod(type, method, invokeMethod, lraId, parentId); } return result;
You can do the work and pass the Context menu to getContextMenuProvider
On big note, this logic seems to be duplicated with the one above, why not just use a util function that also checks if the file already exists?
This should be its own logger instead of System.out
This needs to be add locale, and not set locale for selectedAudioLanguageScore.
Might probably be good to do this in a more general way, so that we format the and split lines. I always prefer that this header when there is anything to read. If you feel it is useful to add a function to the Metadata which headers to the read, based on the file path, and delete the file directly if needed. Some of these headers are present in the property file and the /content/metadata for cdrBinarySubPath headers, and in.getHeader(CdrBinarySubPath) to a method. This would always be true for binary and binary nodes, but I think that'd be nice to do. I just want to be sure there is some options we want to enable -ccBinarySubPath.
I personally prefer the "fast return" style, so that "if" branches which don't have to do match are placed first and ends with a return. This avoids too "deep" nesting.
Use isEmpty()
Should we remove this?
We can use pipeline here since there are no rat mode in the cluster, and no rat mode in the cluster.
getActiveWorkbenchWindow().getActivePage() is deprecated, should we use.getFileManager() instead?
1. This IdGenerator has a method to be used, maybe you can use that. 2. The name of the variable 'localHost' is not a reliable way to determine which link to which address it is.
This is a bit confusing, since we are not updating the channel status. Suggest to replace it with a single assignment.
Shouldn't this be RouterException?
suggestion return createAuthenticationRequestRedirectUrl(relyingParty, request, true).build(false).toUriString();
> CACHE_EVENT_COUNT (which is not needed for this case). HI, does it. Why do you need this? #Closed
Do you think it's necessary to override the properties in the configuration? That will't be the case that the config loader will't contain a table.
nit: add the ("RIT {};" in the log message before the {} is not found.
Instead of defining a method check and just use indexOf() to describe the string, prefer you use 3 statements instead of the int comparison.
Shouldn't this be public? (and maybe it can be removed?)
if (visited.add(term))
I'd use "defaultCacheMode" here. This method is used only in MvccFeatureChecker.isMvcc(). It's better to use it in all cases, instead of VmTypeProcessor.isDefaultConfiguration()
Missing @Override annotation.
DtoFactory.newDto(UserInRoleDescriptor.class).withIsInRole(isInRole()).withScopeId(scopeId).withScopeId(scopeId).withScopeId(scopeId);
This is similar to Compressor
Should this inspect the value of the userInfo to the pipeline (by deleting it from the set of owner columns)?
Can we make this a throw?
This line is a duplication of the code. It should be pulled out into a separate method like like updateWorkspaceSelection(boolean)
Style-nit: Space after if.
do it in one line
I just am just not 100% sure why the conversion to double is needed here.
You can replace this with EventBus.setDefaultView(ProfileType.FILE_CONTEXT, EXTRA_IMAGE_URI);
Multi-line if statements should be wrapped in braces.
formatting
This aligns with the new message.
You should use MssStatement here
nit: Make this () and introduce a private final static String NAME_EXPECTED_LENGTH = "protected final"
change to TimeUnit.SECONDS.sleep(machine.getState())
if there is no semantic element in the list: this is not a DRepresentationElement, nor a DRepresentation but nor a semantic element...
If you're using a custom executor, you can use the.map function.
@stosopelisse I think we need a short loop here like here at the beginning of this method
throw new IllegalStateException
I am not sure if this is the right place. I would have expected a race condition on reading lastConfirmed, but you need to shrink.
Is this operating system allowed?
Droprs. But we can't do this, right?
What about the iterators? There are lots of other places where you do a copy, selectively replace elements with a SortedSet. If you want to change this method to return an immutable collection, you can create a SortedSet copy and return a copy.
Why does this need to be set?
Why change to create?
this is concerned with the information of the opened project. We could probably dedupe the logic here with something like: if (parent instanceof IResource) { List<T> project = ((Connection) parent).getResources().stream().filter(p -> "Terminating".equals(p.getStatus())) {
nit: formatting
This is not adding an extra message. Why just don't let the exception be thrown?
Spelling: this is not obvious.
what about multiple storage domains?
We should log this properly too, I think. Errors in this class don't always bubble up where they can be inspected easily.
rename to subnetId
"(emptyString)"?
DatabaseUtils.makePlaceholders(revid, id)
Use Ds3DocSpecEmptyImpl
Please use "else if" since we are using two different variables, for the the following.
can we make this more readable something like Total running and compactor [], Maximum compaction queue capacity []. Thanks
nit: I understand the logic here that getNextUnAssignedTask() is called for every datastream task, but this code doesn't seem to be doing it. So I think we can get rid of the loop and just do the check after adding it to the newAssignmentForInstance.
Couldn't we not just use the width and width for the font here since width is not blank?
Is this the recommended way in Karaf -f? I guess for the dummyxaresource it has to be this way but can we try a H2 datasource somehow?
If someone does the following val things in the future, this method could be private. This private method could be made private.
Why are you creating a array of a single size of it?
Can we validate that we're doing MM_FIELDS task? Looks like we may want to use some kind of unique topic names, the same for both avro and schema conversion.
Please use static import.
not sure how this line was added here - this initialization is done in line 67 and needs to be removed.
You can add a cast to the symbol a bit more :wink:
I am unsure about this. The creation date should be generated inside the Checkpoint command.
Same thing as before.
why this?
throw AssertionError or IllegalArgumentException
Why is this not autoScaleDiagramCheckBox's selection listener?
Duped code. Any way of sharing?
Was it a bug? Because it is a set of items, maybe you should include the item in the list when you have filtered out.
this should be an error
.collect(Collectors.toList())
Since we're changing the semantics of the old and new TimestampedCacheFlushListener, we could remove the call to StateStore.handleAsync(request) method.
You don't need this.samples.factor, it's a bit unnoticeable.
Is there a reason you didn't just shorten the code like this? java Bundle bundle = new Bundle(); bundle.putSerializable(Router.EXTRA_ENROLLMENT, courseData); if (courseData!= null) { bundle.putLastAccessedSubsection(courseComponent.getId(), courseComponentId); } else { bundle.putLastAccessedSubsection(courseComponent.getId(), false); }
It seems like this method will always return false. Am I missing something?
Could you please add a check, please?
Should this method be private? Is it only used outside this class?
:warning:
Do you still need this if you've created the api?
this should be null since the createOrder method itself assumes that the encounter is created and not the same id
Add a severe logging message here describing the issue to server owners (and maybe tell them they will need to downgrade for now).
StateProviderImpl
When extracting a method keep it (whenever possible, it's easier to review the changes)
this is going to fail here.
Use Collections.emptyList() to avoid the creation of an object every time.
I prefer if you use instanceof here.
this method should return void. This is in the case of an exception, the caller needs to deal with that.
Log the exception
same here, you need to call Context.getOrderService()
Move this to a shared method?
Does it mean we might have dataConsistentOnStandby = true?
why not: boolean ret = false; try { prepareStatement = connection.prepareStatement(selectQuery); prepareStatement.setString(1, userName); prepareStatement.setString(2, domain); try { prepareStatement.close(); } finally { connection.close(); } } return ret; no problem to continue check... we do need to understand if we can provide database access detach from the engine... but in this case it is not that important as we will not use this vdc_options in future anyway. you have the configuration information within environment ENGINE_DEFAULTS, ENGINE_VARS. maybe I will move LocalConfig to uutils.
![MINOR](<LINK_1> 'Severity: MINOR') Immediately return this expression instead of assigning it to the temporary variable "id". [![rule](<LINK_0>](<LINK_2>
maybe use TextUtils.isEmpty(...) or Optional.empty() for consistency
This is using getPackageName() because java.lang.Ever is not guaranteed to be non-null.
Replace passenger!= this with!Objects.equals(passenger, this)
if you don't use this class, there is no need to set this as a parameter of this method.
I think this is the right place to initialize the waitTimeFer.
I would rather do the same as blocking in the catch block
We are not able to access the 'label' from the perspective of a LIFX notification. Does the translation work? If so, this line should be removed.
If columnWriters is null, there is a bug in the columnWriters, which will cause the page to be null. You could null the view in the initial size when it is empty.
why is this line inside while?
Does this method need to be public?
Same. Should this be.realm instead?
This is kind of confusing.
It seems like you have to throw an exception here if the index is not closed
merge with the previous line
Please use { and } for if statements.
Can we compose these stream calls by closing the input stream like the one made in PackingUtils?
Why the variable name?
As before, this is shared code with File..CompareEditorInput. Shared superclass?
I think we can keep the DB the only thing with this flag. Do we need to add a DB call to validate that the external ID is not null and the migration should take care of it? Otherwise, we might want to write some kind of db call to the DB to tell if we need to record this link to the external ID
"essentially"?
This might also need to be changed to use the model for the i18n capability.
do we need case insensitive checks?
"else" is redundant here
Maybe use what included in the message
if (cmd.isPresent())...
You can probably remove this if statement since it is done in both if blocks.
This should probably be tissueOrigin.getCreationDate()
nit: you could skip this if you have pending the task announces for a task.
Consider extracting this to a method
The docs indicate that we're not using the raw type. I would prefer to use [Type](<LINK_0> instead.
This should be a static method.
I think we should use AmbiguousSymbolImpl.initSymbol() here.
Do we need to check here?
remove from here. WDYT?
This seems bad. The value in the composite block will never be ShapeNodeEditPart. I think you should use getEditorNodeEditPart() instead of getEditor().getFigure().get(0)
this is a larger change. if I handle the case when the exception is translated into an exception the current exception is not handled.
Could the cipher suite be made configurable?
typo in var name
I would use get() method to avoid code duplication
This should be removed
Should be an extra or two
Method could be called with no name.
I think we want to use class.getName() to generate the package name.
I'm not sure how much this can work if it's an aggregate by default. CalciteUtils.isAggregateFunctionSupported(aggCall.getAggregation())) return false; If the agg call list is empty, throw an exception if the aggregate list is not supported.
Use 71 instead.
no need to load the appender
Use GoPluginApiRequest. <LINK_0>
Should we instead return an empty set here?
You should use CSS with the BoostTargetEffect here.
setErrorMessage
This should not be a draft. This is generated code which is not intended to trigger a draft.
This is not a good idea. If this is a generic exception, printing it to the user would not get the log message, this will be confusing.
Is it possible to avoid duplication this code?
while at this, could you simplify this statement to throttleDown == rateInSecs > desiredRatePerSec? (IntelliJ suggests this).
This should be set as a default case of the switch.
You may want to expose a mechanism for the client to cancel the AsyncTask or at least suppress the dialog show behavior. It looks like the easy way here would be just to expose a setter on Callback and do nothing if it's null when the asynchronous operation completes.
again, why is this done here?
You can make this synchronized instead of the try-catch block.
I think the Java 8 way is as below: List<T> list = Arrays.stream(items).map(item -> (T)item).collect(Collectors.toList());
style nit: we don't use curly brackets around single line blocks
This assertion seems to be redundant since the new users collection is created for each user.
The - DetectedLanguageList can be any better than theDetectedLanguageList.get(i) - this should only validatePrimaryLanguage if we are in the right language.
This is invalid output.
Why not return the first parameter?
should we handle this?
Another case to be consistent with geoinfo.
This code can be placed in. switch.
You should verify that the result is correct as well.
This may be a breaking change to not want people to set a path, and initialize cookies with the same name (i.e. searchCookie).
Do you think this line is necessary since it is already connected with getDevicecurrentThread().
you can use CollectionUtils.isNotEmpty()
Fix cyclomatic complexity sonar issue
this is a mistake...
This should be done in a finally block.
DtoFactory.createDto(LocationDto.class).withCondition(breakpoint.getBreakpointConfiguration().getCondition()).withHitCount(breakpoint.getBreakpointConfiguration().getHitCount());.start();
This "synchronized" seems not needed as TLSNIOWriteStream.shutdown() already protects it.
I'm fine with this patch but but if you're on it, please add the host's compatibility version as a parameter to the log.
We could potentially replace: if (targetFS.hasBeenInUse()) { return true; }
You can probably do: if the table is empty, the column should return 0 if the table is empty.
I'm not sure this is correct. For example, it would be better to obtain the exception from the.log instead of using it
looping over sequentialDocId and NUM_DATA seems like it just doing: java for (int i = 0; i < NUM_BUCKETS; i++) { _sequentialDocId = NUM_VALUES; i++) { _OUTPUT_(i, j); } }
given/ execute/ assert
you can use NLS.bind()
I guess you should drop this line, because it's not the same.
Add newline before return.
This can be written as a for-each loop
before catch, please catch NuxeoException - Catch the actual exception and wrap it as a NuxeoException.
Maybe you can take 'name' as the first argument?
The empty string is not good - no?
We can use a StringBuilder here. I think a lot of this code is prettier with an immutable list of strings, but I am still undecided on this one.
Won't this also add a generalization to the BigDecimal.length in this case? I think that's wrong.
The current should be closed after the while loop.
This is problematic if the lease doesn't own the error message, as it causes an endless loop if there is no t defined. The reason, it's possible to just pass null to the supervisor and add it to the request body, without the need to change the getCode method to String.
Add final keyword.
Please use a better name (primaryKeys, primaryKeyColumns).
You have removed the access to the storage_server_connections_per_host=StoragePool.class
Can we use a where clause here instead of writting one for each model type? if (insertedItem instanceof Comparable<?>) {
use variable for 'boolean'
Can you use String.valueOf instead of String.valueOf?
use this utils method to show error <LINK_0>
if ((persistKey ==...)?
Same here messager should never be null. Otherwise we can't report.
Shouldn't this be "OpacPpns" instead of "\r"?
nit: error message is not needed.
This could be replaced with Player::discardToDiscard.
@kirankumarkolli - you need to update this file with the proper spotbug issue which is failing here : <LINK_0>
space
Could use a linked list here with the problem [1]
This is not the same as superInjectionTarget.injectionMap.
How the flow get in here?
We should have an isComplete method to throw the exception. The flush is never called when the flush fails. Furthermore the close method should throw an exception if the flush fails. I don't think the caller is necessary to throw the exception, but it's not very obvious why the flush fails.
non-null check is redundant here, e.g. bindings.get(inputChannelName)
Shouldn't the backup file be deleted to the temp file?
Might be better to add a.toString() here, with the message.
I'm a bit worried about this one. Can we change the HiddenPreferences instead? This is part of the API's method so we need to go up with it too.
Can we just do ImmutableList.copyOf?
This could also be a little more user friendly by making this test a little less user-comprehensible.
you can use LabelsGeneratorInput.java
Can you use t.nedLanguage instead? Is there a real environment instead of hardcoded levels?
suggestion final DomainViolation last1 = violations.get(violations.size() - 2);
Are we guaranteed that we'll be avoiding a recursive call?
Is it possible for no security to be inactive this will throw an exception? Should we check for presence of a security realm too?
- Have you considered using.stream() on the value of a map? - Have you considered adding the value to the map?
what if processor.process() returns false?
This check is not needed
We should set the'read' flag to'repeat' instead of'read'
2 corrections: 1. Static imports 2. Have this as a constant, since it won't change its value during the entire execution (reading purposes, but more importantly avoid going to check for the entire payload (reading purposes, I believe)
We can use the empty() method to avoid all the code duplication.
why are we catching the InterruptedException here and throwing it at the end?
Can we use a constant here?
Passing in a SQL query here as well.
Are these extra checks necessary since they all extend this if statement
Maybe we can use the empty list and add this check inside the if that's easier to read?
Please consider using Collections.singletonList() instead.
we should not be closing in finally block
for comparison with an enum it's better to use ==.
This is what we tried.
Instead of your assert, just verify that the GetAuthInfoAction was actually called. If you do a tid==null, you probably don't need to call tid.
should we also add a check for config.inputField in the input schema and use that instead of relying on that
typo: continuator
I would change to 50 for clarity.
I will change this to use log.error(e.getMessage(), e); instead.
Why not just call System.err? if there are exceptions that are thrown out of the try block?
you could use SoftTestUtils.getMultiUser() api here
Must be object.change(db). The Change can be lazily loaded, and we may have the PatchSet but not the Change yet. So you need to pass the db through just in case, so the ChangeData can load the Change on demand if necessary.
final
It should be included in the test.
Please always use curly braces, even for one-liners.
Either with default or we should continue using the providers's default behavior.
![MAJOR](<LINK_1> 'Severity: MAJOR') Use "java.nio.Files#delete" here for better messages on error conditions. [![rule](<LINK_2>](<LINK_0>
You can use assertEquals(expected, actual) here too to make sure it's a bit more "expected"
You know it's not part of this patch, but why not use the sub-projects?
Why we have to use random numbers for your solution?
this is not a good way to fix it. convertField already has a switch statement on the field type, you shouldn't duplicate that logic here, and shouldn't be creating a new transformer for each recursive call. Instead, just remove the convertField call and duplicate the logic. The avro schema should always be calculated from the cdap schema.
what's the point of setting zkConnectionTimeout to 0?
Please add a space after "if"
You should use assertThat() here as well, for better readability of assertion failures
now that we have the random ID of the snapshot, I think it is better to put this in IgniteUtils.nl() which has the generic level.
Why are you printing the stack trace? This is always DataService.dispatch(msgContext) already logs the exception. Is this a debug log?
Use more descriptive variable names.
Style-nit: extra curly braces
This can be replaced with UuidUtils.fetchUUID(String, String)
I think this can be done in a lambda
Shouldn't this be ts - ts - ts - ts + 1?
Use Logger. sysout.
We should do it only when this page is enabled and not when it is enabled.
please use curly brackets for the if condition
HelixException message is already included at the method name.
Break into multiple lines
I think this should be left out of this PR in favor of making the TwitterErrorHandler respect the Twitter4j RateLimitStatus reset time. I'd rather to add a utility method that add the TwitterErrorHandler that contains the STREAMS-3T message and then leave that method up to 10.
For now we should keep this method package visible only
Why is this no longer needed?
This (and following statements) should be done in the layout, like it was done in the first place, and let that be done when the user wants to use the config file
The indentation level shouldn't be changed.
Maybe better to have a default constant for the default scope of INTERNAL_SERVER_ERROR.
We don't need check for null.
Better to get the bytes with StandardCharsets.UTF_8 (that's what will be used to read the file).
Perhaps we should have a log message here saying that the path was not found.
There is no need to use this, getContentTile().get(tile.getGridSetId())
This should get the containsKey(partition) implementation right?
Use StringBuilder.append() instead of append() on strings
if the view is already in the presenter, should we just move this code into the presenter and have all the methods that call this one and can be moved to the factory?
This call should not be done before we set the initial datya received. Also, this call should be done from the FilesTabView class
Does this mean that statement.isClosed() is useless?
Use isBlank method or isEmpty method.
toOSString() gets platform dependent path - Consider the case where you are looking at shared index location and if shared index is available, then you won't get a different URL if it is platform dependent - shouldn't this be toPortableString()?
Is the L.e(caught) needed?
This should be a specific exception.
don't call.toString() on the arguments here, so you don't need to do it all in one assertion
@HeartSaVioR Can you create a default value of "null" for each evaluate call?
There is no need for all these variable initializations.
To me it seems clearer to make conditional nodes more clear if they want to set a minimum access time limit rather than an equal number of minutes.
should be done in a finally block
Please use the formatter, or change this to: java } catch (Throwable t) {... }
maybe add the types in the message here so the user can see the types and which IDs are set.
Since it is used multiple times, make this a separate function returning List<SampleRowKeysResponse>? - try (BigtableSession session = new BigtableSession(bigtableOptions)) { - BigtableClusterName clusterName = bigtableOptions.getClusterName(); - BigtableTableName tableName = clusterName.toTableName(configuration.getTableId()); - SampleRowKeysRequest.Builder request = SampleRowKeysRequest.newBuilder(); - request.setTableName(tableName.toString()); - List<SampleRowKeysResponse> sampleRowKeys = - session.getDataClient().sampleRowKeys(request.build());
This is not needed anymore, java.lang.String would be better.
lambda?
When did we start supporting yaughty 1.9 so we didn't support it anymore. I didn't start supporting that was supported in the current version of 1.9 so we can use the version annotation now.
Since keyFile,passwd & alias are used for both methods, I think it will be nice to put them as private (final) members of the class
Warn log level seems to high for a normal state transition.
should this move into the finally block?
Why is this not using gethreadLocalRandom()? They seem to do the same thing.
Isn't we still trying to make a mistake on a NameKey? If we have the key field "name" is null, we should be able to write a mistake like "core.name".
Please, remove extra line.
Alex will say to use a view to access the items, though initializing with an initial capacity a bit higher than the number of items it will contain may make ArrayList more efficient. But Sets is also a good option, since you do not care about the order and it will avoid duplicates. But I would not block a patch for such a reason. Others may though... ;-)
Is this loop actually required? As I understand the original code the for loop suggests the _for_ loop was missing.
Could be inlined
Check if this inside the loop
This is now done via the logger.debug() call, is that ok?
I think we should remove the tabs here as they are deprecated, but let's remove the existing code as well, which can be removed.
Should this check be done by the "else" block above? That way, if someone tried to disable / no files, they would get an error dialog.
Is there a reason why you don't use a sleep like this to stop the controller, rather than the one received in a file?
please replace with: new ArrayList<>(lun.getLUN_id(), lunToVds.size());
The macs are always added in the compensation state but not in the compensation state. So if you remove the mac, the compensation parameters will remain.
So hideTopMenu isn't hide by default?
Wondering if there's a better way to do this, than just using the logger? Like this: logger.warn(UserAjax.class, "::acceptableUsers.");
please rename the field and use it everywhere, no?
let's rename this variable to relationshipTypeUuid
If this check is hit, it would be nice to add a null check and "return null" to the above check to avoid NPEs.
I don't feel it right that in a class delivered by our library we have a method not signalled with @Nullable that returns a null. Of course we don't have anything meaningful to return because it's a fake client... But checking the code I see that in one of the methods there is one SphereApiConfig with fake data. Maybe we can go on that line and provide a dummy config with a project key and API URL that leaves no doubt this is a fake config. Maybe @katmatt has a better idea?
This is unnecessary. The only thing that you test here is that if the content is not content, you don't have to test if the content is still content, which is not true. Either use this method, or inline the code.
shouldn't this be getDelayedAsyncConnection()?
We should pass the name?
we should throw exception here? Or it could be bad, we should handle it in the method signature
No need to define it here - it is runtime exception.
suggestion throw new AssertionError("Clone should never cause an Invalid SPDX Exception", e);
Please add the return type here instead of using a [List<DayActivityOverviewDto>](<LINK_0>
Or, assertThat(category.getAttributes().get("Title").getValue(), is("The Title")); because it will print a more useful message when the test fails.
I think this can be shortened toCopy.annotations!= null? toCopy.annotations : null.
Lets call Arrays.ensureCapacity(is.available()) before the loop and use Integer.BYTES
Providers of this class are public, so it should be private?
the sql statments should be in a db transaction
call isEmpty()
Need to close the stream in finally block.
This is not an issue, it should be fixed in a separate commit.
Prefer using "Internal Server Error." and not "Internal Server Error.". suggestion
You can use a short explanatory name for the if as well
Please use the generated body
Is this not needed?
this will use a finally block on the previous line (I don't know until now, but for me, the PR is to create a new stream object anyways).
Swapping these around breaks all other GUI's.
do not change this test, it should still check if proper encounter is returned from createEncounter service
The frame.flags() should be the first argument to append, otherwise it should be the last element of the frame.
Should not the above check be unnecessary since the if branch is still required.
Suggest adding a final failOnPrematureHandle and just log that this is getting deleted by the PR.
This should be input.status(status.name().toUpperCase()).
how about a single line: this.
You can leave this as sparseSet to merge related to more mbstones, and fail the analysis on this.
Is each mapping created on the same name?
This will create a post-start task in the activity where the self starts. Done task will have a different result than the post start.
Just to make sure I understand it correctly and this function is partitionedExchange in partitionedExchange. For example, partitioningScheme.isPresent() check is repeated a lot. But it might be better to move it to a separate function. Actually, it might be better to have a data table partitioning partitioning too.
Group exception types handled identically in a single catch block.
Is it possible for this to be false?
Please rename this to checkDataDownloadTimer, similar to how the FilesIndexInputFactoryTest use it.
why is it not just accoundId?
assertNotEquals?
Since InvalidChangeOperationException cannot occur anymore, I think it would be nice to remove it from the method signature here. If we do this, we can also remove InvalidChangeOperationException from the AbandonChangeHandler.call() method.
@Josephblt in cases like this you can use a more functional code like List<String> uuids = elements.stream().map(Element::getUUID).collect(Collectors.toList()); I think it is easier to understand, but just as easier to read, I'd be fine.
Use slf4j if possible. If it is a common thing to be named, consider creating the api and make it injectable so other classes can benefit from it.
Checking this is probably redundant now when the label doesn't exist, which means the subsequent transform call will throw an exception.
Missing final
is it really needed?
WDYT about moving such code to InternalRuntime and do not bootstrap at all if installers are missed
It's best if the method name is not camelcased (as well as using the interface). That way you can follow the code pattern and see if it exists somewhere else. It is also quite confusing to have the developer who cares about the type of the object. What do you think?
Not sure, I think it's safe to do this in a single lambda (UnresolvedAttribute.class) loop, which is always a UnresolvedAttribute.class.
should be "kalmonLatitude"
the FileOutputStream and out should be closed in finally block
Nit: I'd prefer to avoid the ifs since they are not needed
Please update this log message to be more generic.
Please split to multiple lines.
Device cannot have a centroid device. Check that while developing the u got a lot of a MraidianMeisation where the device was already set to "true". We should also verify the parameter to have a positive number.
Wouldn't it be better to use a logger?
You shouldn't need the catch block here.
tidied.size() -> tidied.get()
Can be simplified: java if (tree == null) { parseCompiledR(null, (TypeElement) element); } else { parseCompiledR(respectivePackageName, (TypeElement) element); }
That is a fault, but we have to check if host is leader
Please follow our code style: Space after if, always use braces. In case I understood the code correctly, this statement is a fail-fast one. In this case, I would change the code to java if (isFirstCharDigit(value) { return Optional.empty(); }
Domain '{}' is not used, please remove the check and assign it to a variable.
Prefer to move this method to the beginning of the method.
suggestion if (getUnit().getTech().isClan() && (getUnit().getTech().isClan()) {
Can we put this call in the MetricsServiceImpl itself? Won't this be called twice?
Shouldn't we also set the default locale if we provide a DFA way?
This null check is redundant as it doesn't have been checked before.
An exception should be thrown?
This does not seem correct. If there is a URL containing a format string that is not part of the file or path. If there is no format string in the URL. The implementation is to do it, and the method should be: } else { return new URL(urlBase.getProtocol(), urlBase.getHost(), urlBase.getPort(), buf.toString()); }
I find this method return void.
nit: Would Iterables.getLast(rootOutputBuffers) looks more concise?
why only removal of this event, is throwable accepted here? I expect that the flow gets restarted from the beginning upon exception. we should also log error on this throw block.
You can't skip the whole thing by using the taskFuture.get() directly.
Why change the access modifiers?
doesn't it throw an exception if config is not found?
If this is null, why not check it to see if topology.contains(elementName, groups)?
In other places we use getAdapter(). getAdapter() which is called from a check. Is that the case?
Declaration should just be Map
This way it won't return templates, but the method name is wrong...
Prefer to use the [String constructor](<LINK_0> pattern instead.
Should return the immutable list, or maybe use the state system here?
This should be actionStates instead of emptyMap
setErrorMessage
While an argument for theoretical advantages could be made, I haven't seen code where the JAXB ObjectFactory has any useful effect over just creating new objects yet.
Normally you should be skipping the service.pid time.
Move this in in the commit message? Otherwise the EPackage list may not be updated by all the commit message subprojects.
why not move this line to the beginning of the previous if statement?
Why not require it here as well?
It looks like this store will be reused by multiple places. Could you make a static method in AndroidFxAccount? Or, better yet, don't worry about it.
Is there a way to close the output file system?
i think this is an error. Basically it means that the request body is a ADALError and when it is a HttpServletResponse. Is there a specific reason for this?
why is this delay?
The return type should be java public Builder measurementMappings(Map<String, String> measurementMappings) { return measurementMappings; }
nit: could use Util.createSafePath() here instead
Suggestion: compiling the URL pattern with the characters then relying on the order of the test, i.e. RegexUrlPatternMap needs to be created to be more than once.
This test will not work properly for tests. If we have a non-default changelog, we should also fix that.
Unless I am missing something, the instance variable response is not used, and had the trace at line 113. The log statement does not have the updated response.
This whole convoluted mess can be replaced with Paths.get(config.getPKIDir(), "certs", String.format("%s-cert.pub", name)).toPath()
This line isn't needed if we are synchronizing on the same UI thread.
This will require us to special-case an empty set of granularIntervals if the input interval is null. I think it'd be nice to modify the GranularitySpec interface somehow. Maybe it could return an Optional<SortedSet<Interval>> from bucketIntervals?
These first array has shape info. Make sure to cover both cases.
I am OK with this change, but it seems to be better to just do File.delete(); in the finally block.
You should always use BAD_REQUEST for the Exception
I tend to put ">=" for these kinds of things, juuust in case something weird happens. Maybe it's just me.
I may be missing something here, but this seems a little strange.
Do you mean to read from another file? I think we can use Application.get().getPath()
It's tad we have an executor, but I would guess it would be simpler to have a single statement java try { Future<CheckResult> future = Executors.newSingleThreadExecutor(); try { return future.get(1, TimeUnit.SECONDS); } catch (Throwable ex) { log.debug("An exception took place when trying to retrieve the check result. Will return null.", ex); } } catch (Throwable ex) { log.debug("An exception took place when trying to retrieve the check result.", ex); } }
Do we need to register the connection listener?
This needs to return the old value, otherwise we'll get the stats to the older one.
should this be warning or error?
needsComma I think would be a better name than hasComma
Could you please use StringUtils.isBlank()?
this can be removed since the previous if is still needed
I think is fine as the removePublishCache() method is also for the enabled case. Do you think it is necessary to do that?
we should add a loggable which is being added
I think we still need to remove this, since we already have it in DteConfigManager
this test is failing if you do not assert the size of 1 to 2 (but the size of 1 to 3.)
Can we not swallow the exception?
rm
This seems to be needless
this is easy to reason about. Perhaps: Bytes.copy(col, row) as the return value of getColumn() is getting stored as a list (because it is easy to avoid as a map for an internal list as well?)
If we can avoid this 'limit' local variable's - we can just use the parsed version of the filter method.
The code that erroneously includes this listener, but the view or serviceLocator are not removed.
In this case, we are just setting the value to true. This is a bit strange.
This is not used anywhere, but it's possible to get rid of it in the tests explicitly. I'd rather see some of the test related to testing it.
Why is this? If we're going to be processing _and_ every time, shouldn't we be loading the own VMs before we load one?
please add brackets to make correlation data readability
If you have a static connection, and if not, create a connection. I believe you are are not checking for null in this case.
This method should be in its own file like Update_OLD. Not sure it is really a good idea to add such things.
> /var/tmp
Should the test be made into a separate test for both creationDate and SINGLE, as they are only present in the json?
we have this logic here as well
Is this post-processor? (I know it's not in a common place to process this image in PR)
If this is a bugal account, is it possible for a techs to be null? If not, I would prefer to raise an IllegalArgumentException (I think that this should be addressed)
now you can just do int scanId = telephony.requestNetworkScan(
- check this.
I'm a little concerned about this. We access this query from different places in the code.
Nitpicking: do you mind splitting this in 2 tests for readability / style.
Check args?
Could you make this final?
Did you mean to leave this PR?
I think the braces are redundant now.
we should warn for parameters not found in java, but instead use dictinoary.
Can you return String.parse(columnType.getObjectType()) instead of constructing a byte array?
Why will ugi be null here and not below?
If you're in the middle of the message, then you can use 'final' and 'else' to have it in the message.
I don't think this block and the changes are necessary. The docId is supposed to be part of the docId of this method so it's clear to me.
This call is too long. It is quite a long time to test. Please use the better name, correct variable names, and it is more descriptive about what is happening.
Minor: we can actually check the count? (nit) can be done inside while loop too though.
Did you check that the "name" is the same as the actual constant?
This condition can be simplified by calling the isPresent() call.
Won't the path always be STARTUP_CRASH?
Wondering if we should throw an exception if there is a process that is not a ShutdownResourceException?
we should handle return types java.util.Date and java.sql.Date
why did this need to be removed?
why do we check/break here, it is already covered in the while clause condition.
currentTimeMillis() is the number of bytes required here?
You can call the constructor with 4 args instead of this.
now that the expected value is updated, is the replace all still needed?
strange name
should stormpathJsonView be a constant somewhere?
This should probably be inside of mNativeMap.
As an FYI, should we use the printStackTrace();?
remove
You may want to add a log here. It should be initialized before you get the docString, i.e. log.trace if you're getting a null pointer exception.
It's better to have a flag then print the stack trace.
Do we not ignore content-type header in the request?
} else { in the if.
ChangePackageEnvelope.class.isInstance(fs)?
A random header id should be added if httpHeaders is null.
This is a valid value, but I'd pass in the error message here.
Maybe this method should be declared private?
should this be "query/time" in line with the method name?
This is very hard to follow. I would suggest just StringUtils.trim(mdString, separator).
Perhaps single quotes around actual code
Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint Constraint
why does this need to insert a listener in the middle of the callback chain? Can the queue reader manage its own queue?
This method can be declared private.
Why not stream?
How is this different from what is it doing?
I would consider cleaning this up using the content of the acquireTokenSilentSync() call here instead of the acquireTokenSilentSync() call.
final
I think it will be better to perform the removal of managed block disks after we start the async operations to remove the regular images because the removal is currently synchronized. (as the removal of the cinder disks)
Why is this required?
Why not move list of sizeChanged and the text content to the initial capacity?
Remove the catch block and let the exception propagate normally (which fails the test)
Use method reference instead of string concat
Must be AIDontUseIt (otherwise AI will discards all own hand for lands).
we don't need to check for Exception.
Why ignore interrupts here?
Collections.emptyMap()
consider extracting this into a separate method, e.g.: public void checkCurrentTaskState() throws TimeoutException { List<TaskGroup> tasks = new ArrayList<>(); for (TaskGroup task : taskGroups) { if (taskGroup.hasComplete()) { futures.add(stopTasksInGroup(taskGroup)); } } }
don't change this
If going through a different order, just use birthday (for birthday) instead.
In case the userTxnManager is null, we should call the dropConglomerateDescriptor(cd,userTxnManager); before calling the deletePartitionStatistics. Otherwise we may insert the stats in the userTxnManager. If you want to throw an exception, we should probably log an error message indicating that the stats are not found.
Please rename this variable list to pushResults for example
This log statement is wrapped in a isDebugEnabled check, but logged at INFO. Should it be logged at DEBUG or should the warn be logged?
I would have put(k, v) to make it more readable and compactly more readable.
Why this change should be a part of this PR? cardinality - numProcessed might be much better than just mentioning it in the first place.
Space after,.
Please remove redundant assertions: assertSoftly(res.getDependencies().size()).isEqualTo(4);
please extract to variable
This can be replaced with : didNotAcquireSanLock();
assertEquals(boolean actual, boolean expected)
isArray is fully thread safe?
Instead of calling this in the init method, why not put it in the method call?
Won't passing a bare repo here cause an issue?
same as above, please use RepositoryFiles.trash
You already have the class, why not just call subscribe on the child?
Is this really an error?
move it to the top of the method
this method says top-level but not at the bottom that a reader is fully consumed. Given the reader is always at the end, I think we need to consider the case where the reader is finished.
The spec says "TODO 'if' and 'else' are missing"
if (libraryPreferencesEnabled) { return; }
It's a bit strange that the exception is thrown in the constructor, which is not what we want. I'm sure it's worth logging something in the _error_ instead.
This can throw if there are no principals. It should probably have an explicit check to throw a proper error message
It looks like we have duplication of code in the ingest file filters tests. We should look into creating some new utility methods for creating and deleting a case.
rename to event
Typo: DropObjectsRequest -> CompartmentEditPart
I am not sure this is good. I feel like we should have a.get() (the empty list) and not return an empty list.
Since we append final to the StringBuilder, it would be better to avoid the need to create the string copy.
This validation logic should not be in the descriptor, it's common to do validation.
What about negative values? And also please, add some val to the exception.
s/like/nested/repo/README3.md/
this method is no longer needed
Inline this variable.
could this be debug?
As a small improvement you could switch L:86 and L:87, declare Class memberClass as final and reuse memberClass within the ternary expression.
Return an empty list instead of null (same for L59)
Add class to method deleteProject()
Why do you close the connection here?
I don't think you need this if. If a definition is not executed and the subscriber is unable to get a successful response, it should be completed.
Shouldn't we check if the field was a RealmModel?
this one should be: if (post) { validationResult.merge(service.getSecurityService().validateSecurityRoleName(securityRole.getRoleName())); } else if (post) { return Response.ok(savedRole).build(); } return ValidationResult.ok(savedRole).build();
It looks like this can be just a callable. Can we add some of the tasks to notPendingYet / null check logic?
exception handling looks realy inconsistent.
Why don't put the listener in the handleEvent function?
This should be put into a boolean flag.
I'd just set init hints to true here and in other places.
Shall we print the resulting application to a service?
Please use more descriptive e8
It is better to throw an exception in the constructor instead of returning a void.
How about changing code block (line 141  line 147) to following loop: for (RequestOrResponseType requestType : EnumSet.of(RequestOrResponseType.PutRequest, RequestOrResponseType.GetRequest, RequestOrResponseType.DeleteRequest, RequestOrResponseType.ReplicaMetadataRequest, RequestOrResponseType.ReplicaMetadataRequest)) { requestsDisableInfo.put(requestType, Collections.newSetFromMap(new ConcurrentHashMap<>())); }
Pass settingsRepository as argument to DownloadLanguageTranslationUseCase is not necessary
Can we extract this to a private method?
Change the actual implementation of toString() method to use the resulting String.
Can you also make sure the getConnections() is not null?
You don't need event.getChannel().ifPresent() here, because it will be invoked internally for a listener, but there's no reason for this.
why are we having the braces around the if statement?
Don't need this. Just getRootEntityType( sessionFactory, entityInfo.getClazz() ) should work.
suggestion assertThat(arguments.get(CLUSTER_SIE - 1).isEqualTo(CLUSTER_SIE)); We can probably extract this to a method.
Probably should be SURF RAM login, same for description.
Could we change to "Performance statistics writer started [file] with path of type DFLT_FILE_MAX_SIE for example "record statistics".
Why not to remove the code that builds the message builder on each case?
please remove the hashmap and just add player details
Maybe we can reuse the code from the ActivityResultListener#resetPassword() here?
You also have to notify the m_ prefix for a read lock.
signal should be new TmfNanoTimestamp
as we are changing how the digest is computed anyway, we can simplify this as buf.append(',');
You are now doing the same thing, it will be useful to create a method to reuse the ObjectMapper instead of using it.
I would use an IndexOutOfBoundException here, similar to the checkUnpublished() method above.
1. Why is this a String and not a String? 2. If we're pulling out the existing constants, I'd feel safer if these strings were stored in a public final static String EVENT_TIMESTAMP = "kafka-origin-offset". This also applies to fromKafka and EVENT_TIMESTAMP, so that we can add omissions the existing config.
If you want to add more assertions - you can add **try** clauses on the method.
![MAJOR](<LINK_0> 'Severity: MAJOR') Exceptional return value of java.io.File.mkdirs() ignored in com.vaadin.flow.server.frontend.installer.DefaultFileDownloader.downloadFile(Path, String) [![rule](<LINK_1>](<LINK_2>
You can move this check to superclass
You can use getStoragePool().isCeable() from here instead of creating a new one.
This could be null, but would it make sense to use the getOr... method, so that code would look like this: java if (!stack.isLinked( stack ) {
Maybe it's better to break this long statement in a named function.
Maybe we should always use org.apache.commons.lang3.StringUtils.isNotBlank() to do the same thing? otherwise this might cause NPEs in Eclipse and it doesn't have to be fixed.
You do the same thing here. Is DataAccessLimit() more efficient if there are multiple filters?
Nit: java if (Build.VERSION.SDK_INT > 13) {
This fits properly in the previous line
Does this work?
Ok, it's better to keep the author state.
Can use parameterized logging here.
for what it can be used?
minor: we could simplify this statement by using the return value of getStoredCookies.
I would be smart to throw this exception in this case, but I would prefer this method to return something like: java if (tm instanceof X509ExtendedTrustManager) { return (X509ExtendedTrustManager) tm; } return getNoOpInstance();
Should we change the default content type to 'ByteBufType'? This is very minor, but probably we should change it to use only ASCII characters.
I don't think this is a good idea. This method should return a boolean. I would expect the result to be EOFException only on the case of V11 and a method, which is a shorthand for V11.
I don't think this would be good. Could we change this to taggedMemoryAllocations.stream().filter(entry ->!Objects.equals(FORCE_FREE_TAG)) since it's a map?
redundant semi-colon
This looks suspicious: you always wait for the payload to be equals... You need to test that the payload is really an array of those things.
Magic number?
style nit: no braces here
Can we insert a new attribute and then ask the christed metadata? What about backward compatibility?
I'd split all calls into _mUIEvent_ to _only_ get the listener, all the HEs should have BASIC and NTLM (which is handled by Kerberos right now). The reason is that Kerberos is handled identically to NTLM, so there's no need to differentiate between the two.
Activator.PLUGIN_ID use activator of tmf.core
for (Map.Entry<String, String> entry : hostGroups.entrySet()) {
Thx! I see that we have to modify trainer.runMiniBatch() to return null; and move all the trainer.runItr() to create partitioner. And we can also move all the partition into trainer.runItr() because it's one time. If there is any condition to initialize Decision.
Minor: call it index or something.
This should never be true, but I think it is a valid behaviour of this class.
No timezone!
Why not change this to just this.getStudentForEmail(identifier)!= null?
should we return when this method is called? the message would be something like "this method failed
Why private?
final
Personally, I prefer to have a lambda expressions inside a lambda. It is hard to read such code. Please use java 8 lambda expressions to make code more readable.
error message is never printed
I think it's better to implement equals() and hashCode() in a custom class, to allow overriding the hashCode.
Why do we need these three conditions, if!isToToAllRegionsAsync() and log.trace(...)?
throw new FreeIpaClientException(message, throwable.getLocalizedMessage())
Please add a @squashBackgone and go back to the merge shape.
if databaseValue is null, right?
This should be moved to the sFieldsForClasses array
It's vaguely worrying that this function has multiple failure modes but its only indication of failure is a debug message if DBG is true. I imagine the API is set in stone and the function can't be changed to return a value? Failing that, if add default route fails, perhaps it makes sense not to set mDefaultRouteSet to true?
avgTemp1 and avgTemp2 are redundant.
Please remove the null check - only Eliminate it will be added - there will be added privileged block instead: <LINK_0> (discussion in <LINK_1> )
Instead of having a method for both of these methods, we should use requestPreferences.setHeatmapMatrixSize(Arrays.asList(new ParameterizedAdapterFactory(this))
Use printStackTrace() instead of e.printStackTrace()
The two statements above can be conveniently combined to: java Map<FeedbackQuestionAttributes, List<FeedbackResponseAttributes>> responsesForOneRecipient = sortedMap.computeIfAbsent(recipientTeam, k -> new LinkedHashMap<>());
It looks like this will end up being called twice (for each row in the currentgetCellCommand() method) and once here and again on the cellCommand. I think we should extract the parent command command to a local variable.
We should probably avoid hard-coding the participant.getSubstudies() call here by using participant.getSubstudies().forEach(substudies -> account.getAccountSubstudies().removeAll(path));
Returns an empty File[], if the path exists but is a directory.
This should be initialized to the field, to avoid the null check.
Please extract method GoStringLiteral to GoStringLiteral.
move this into an else statement
Similar to above, we should probably throw the exception as the cause is more specific.
Is this really necessary? One PR already account for the OM double check.
I think we should fail here, if error is not available.
Magic string.
can you please also move the code where you added the default statement?
Break the line before it?
here we'll want to throw only if we are not already tracing this packet.
I think this should be: if (environmentMode.isNonIntrusiveFullAsserted()) { //... }
please remove the java.util.Objects.equals()
Please call the FormField: smtp1 = smtp1 = smtp2.parse(smtp2) { smtp2.parse(smtp2) {... } }
Have you tested if there are multiple servers with this name?
I would recommend calling String.format() here instead of concatenation.
Remove the brackets so it fits on one line: () -> scrollBarView.requestLayout()
Why not create the AccessibilityChanger instance in the constructor as well?
Use _int_ instead of _byte_ to allow for values > 127...
What is the purpose of this line?
Good.
perhaps doing this line outside the if block could be replaced with &&
Shall we throw the InternalWorkflowException
It looks like you're doing a pretty similar thing with the above, could you make it an external method?
If we're going to drop the "." here, I'd unintentionally keep the last legit check.
Isn't this already protected?
no need to add it as a class level variable.
This is not (and should be) "group-x-binding"
What is the reason for this one?
I think this is KClientConfiguration.class.getSimpleName() instead of hard-coding the class name.
should it be handled using a security manager?
You should check if the lock is released. If it's not released you will get a leak after acquire.
I think stack trace is a little better here to have a log.error here.
Why this change? same here in acquireUnmanagedController()
Log using standard log statement and exception handling is extremely low-level.
change the message to "Invalid data in the network buffer, will not send SSL Close message."
IMHO this should include a descriptive reflog update, since this is a local repository that a user might be poking around in. cf. the output of "git reflog refs/remotes/origin/master" in a repo of your choice.
Also you can use: DirCache dc = repository.lockDirCache(); try { String repoPath = new Path(file.getPath());... } catch (IOException e) { throw new RuntimeException(e); }
I think this needs to be moved to the try-catch block
Any reason for the specific guard? I.e. GTK3.14.13 instead of 3.14.0. If there is no specific reason then please change this to: if (OS.GTK_VERSION >= OS.VERSION (3, 9, 0) {
We should use a warn level log here.
Please mind to add a log message.
If we're not using this orElse(null) above, is it really necessary to check for null before adding it?
remove the all the code from here and below
Maybe just 'wrappedMonitor'.
Change 'else' statement to block i.e. add braces.
nit: Waited %d seconds and operation was not complete
nit: Instead of casting for null, please use.orElseThrow(() -> new CucumberException(String.format("Can't assign null fields in %s. Please use boxed types.", e.get("class"));
I think this should be firstAndLastStopsDoNotHaveTimes
If we have a device with less than one account we should still block the app. Does this mean that we will commit multiple accounts in a different account? Should we have a client on the same account?
[optional] Do not write the ";" in the end of the String.format() method. This code is too complicated.
Maybe consider String.valueOf() to circumvent NPE
This is usually the service interface, not the implementation.
Assert some value of verification, such as checking startTime > 0, does it makes sense to check the other tests.
In the testExecuteSingleUploadBlobSizeTooLarge.
I think this is obsolete, it is not needed.
It looks like the constant must be before the variable.
Maybe it should be called method?
This validation fits better in the meaning of the method in this file, which is not true.
Can we rename this to something like "field" or something?
I think id_Not_Found should be a RuntimeException.
@Override
Are these values meant to be null?
Can this be merged with the check above?
if the disk doesn't exist you'll fail with NPE here, please first verify that it exists.
I think we need to close the client if we're not going to use it.
It's better to use.next() than.get() to avoid runtime exception
shouldn't you also return those?
You do not print in the println() call, it is sign of improper place to process exception.
entourage -> entourage
The second condition is always false.
nit: might want to add a null check for paymentExternalId before the cast
you can simplify for readability in general, please move it into.
Use Version.isVersion()
use if (!(item)
It's good practice to put these three lines into a function or method in the middle of the function to reduce the code duplication, and that's cleaner.
I think we can have a more specific exception like KeyVaultBackupOperation and the KeyVaultDeleteOperation interface, the KeyVaultDeleteOperation and KeyVaultDeleteOperation would need to be able to extend the KeyVaultBlobContainerUri which is where the output of the operation is.
nit: still space between ) and {
The name of the method is missing. I think it would be nice to assert the failure.
rf should always not null?
the variable name is not used
minor: would be nice to define the Void/null key for control messages in ControlMessage.getDefaultKey(), or, defining OutgoingControlMessageEnvelope(systemStream, partitionId, controlMessage) to be used here.
/s/in/is
Call RxJavaHooks.onError so no exception is lost.
Here reset should not be inside update() method, otherwise since StampedLock is not reentrant, this could be deadlock
I'm not sure why you're using setSubtreeChecked here?
Same. Only catch NPE?
Would it make sense to test this behavior?
The method should be the default entity (the interface), not the object itself.
This is a difficult situation. Can we have a message like "Error reading /proc/self/mounts. Can't detect filetypes." (you may have an example of /proc/self/mounts.sh).
Why do you need to increment the count?
log.debug
Should this be logged at the user?
Why not suggestion PlanNodeTree subPlanTree =
If we're on Java 8, it would be better to use CollectionUtils.filter(this.getState().getPermissionId()).filter(Objects::nonNull).forEach(this::remove); to save a couple of lines of code.
This should be delivery.getProtocolData()!= null? delivery.getProtocolData() : null instead of instance instanceof.
It looks like we are calling this activity again, right?
This one should be final.
looks like we should not do this. The progress monitor must be disposed when the debug listener is done.
Is this a problem? channelsToSync.remove(force) will sync the entire block and the channelsToSync will be removed from the cache. That's why the overhead is not at all in the extra place.
I think this will be an 'String.format()' which is not a Java. Perhaps checking with 'java.vendor'. We should check that property is present in the project.
consider using Utils.sort and params for more readability
This is breaking the code from the all the treatments list. According to the code, it is better and I would write: for (int i = 0; i < treatments.size(); i++) { if (treatments!= null) { this.treatments = Collections.emptySet(); } }
This is not correct. It is handled by the consumer.
Insert break here to avoid running the loop more than necessary.
same here, getContentsAspects can't be null.
Please add also VOOBSERVER.
No need to use UriBuilder
Can we keep the implementation so developers can override how the notification is built if they want to add new features or modify settings (that's why makeNotificationIf... methods were protected if devs are overriding MixpanelFCMMessagingService)? We need a way to let developers override the notification before its posted to the notificationmanager
should this be logged at debug level?
Is the (confusing) needed?
Will this test pass after the year 2100?
The equals/equals check is redundant here.
This should be set instead in the if (ignoreDTD) statement. If ignoreDTD is false, then we should allow DTDs.
This is not very important. If the consumer is not configured, this code should be called in tableGenerator and not called here.
Throw an exception here instead of returning false.
Saner to set normalExit = false initially, and set it to true in the end of try block. Otherwise Throwable which is not a RuntimeException in try block is qualified as "normal exit".
I think the three fields here are already an array.
you could pass clusterCompatibilityVersion to the constructor
Whats the benefit of this solution?
assertNotSame?
Please move this to string constant
Doesn't there need to be a translation call in the case of getCanDoActionMessages() containing a single message? This code drops it right through to the failure event handler. The previous code would translate it first.
s/New host/directory/
I think.ii(...) should be the second parameter in the test case so you'd want to check <.125 instead.
What is the default value of "task_locks" in this case? I'm a little bit confusing the definition. But this component is used by "agent" and uses "database" for task queuing so :-) of course we can change later.
@ptirador why we can't use addAll?
Why does this need to be inside the for loop?
This method should be clickFeedbackSessionPublishLink.
The implementation of getDefender().getAbility() is already implemented by the base class. This will simplify the implementation.
You need a check for packs.length == 0 here to just return early. Its a protection against an empty repository throwing ArrayIndexOutOfBoundsException when it was given a list of objects to find.
This queryBuilder will always be called repeatedly. Is there a reason to use it? If so, please remove it.
Do we need a private static method? Maybe even make it private?
I would rather use plain "NodeName" here. It is sufficient.
you removed the extra space in the condition
Merge these two if statements.
It may be better to use setHeader(RestUtils.Headers.DATE, new GregorianCalendar().getTime());
If you have a lot of things that try to keepstringWidth-text in the larger scheme which no longer throws exceptions, since sometimes they would have failed due to the larger scheme of things that have not been caused by that algorithm. Just that would be nice.
The adminTimeout is a class attribute, not a Scheduler. It could be configured to be used for anything else than a Scheduler.
seems like we want to output the value of i and r here too (and below)
The check for null in this case is redundant since you are checking for the width of the column in the Column view
This should always be a fixed size in Vec2
This catch block should be removed as is already done in @BeanWriter
I'd like to keep this line to be private
Can you remove the thread name here?
remove this please
We should define a static factory method.
1. Do we need a space after "<%s> wikibase:kafka ('wikibase' %d' %d ) 2. Should be ether final as well.
Optional: use Boolean.TRUE.toString()
can we make this a method that does not throw an exception?
can we use the metric registry instead of the data structure?
I'm wondering if we could just call getRowNumbers here? If so, we could get rid of the else altogether.
I think you should add null checks for DimFilter here before accessing the field's DimFilter.
this is a directory: <LINK_0>
Would prefer if Date was initialized using ts's getValue and getScale converted to ms
Was this change intentional?
could you change this to throw new Exception(e) so that we have the full stacktrace
This won't be in the 'log' statement, but if you'd like to have two parameters in the log, it might be better to create a Builder class that could be passed to the logger and then pass it in to the logger. That way the logger won't need to be changed everywhere.
Please add import to avoid fully-qualified class references. Also, why not simply do this: Locale localeKeys = locales.split(" *, *"); for (String localeKey : localeKeys) {... } result.add(localeKey.trim());
You can replace baseDir.toAbsolutePath().normalize() by.map(e -> e.getKey().endsWith(".projectBaseDir"))
Nit: these can be assertTrue(executor.getPoolSize() > 0);
not sure why we need this.... Lets not call Config.TOPOLOGY_LOCALITYAWARE_TOP_BOUND_PERCENT here.
No need for FrontendCompilationException
Can be final
pushdown is not supported yet
Nit: Are these internal variables used? If so, can't we directly delete the _new_ child_ and stat == null?
It seems to me that this is not being used.
Does this have side-effects? Otherwise could be a performance benefit to moving it inside of the if condition below.
I don't think mDelegate should be wrapped in mDelegate.delete(). It's OK to call insert() if it's dangerous and you shouldn't have it later.
suggestion jmxDomain = null;
How about to use separate data model?
Can be transformed to HashMap.Entry<String, List<GraphQLDirective>>.
Since this is a  DAO method, do we need to check for birthdate in the security service or omrsPerson being null?
how about renaming the compatibilityVersion to'version', since it's part of the update to'version'?
It would be nice to add more error messages to the error message in case it fails.
This could be a kPath. This could be a prefix to make this more readable.
suggestion dataMap.put(toData(e.getKey(), toData(e.getValue())), toData(e.getValue()));
why we need to check if ledger storage is already attached to ledger?
In the SmartMeteringMonitoringEndpoint I saw the response data being retrieved by a call to the meterResponseDataService. Calling the meterResponseDataService here to obtain the response data seems inconsistent at first sight. If there is no particular reason for this difference, I think it might be cleaner if obtaining the actual response is treated alike in different endpoints.
Can you use LOG.info("Executing {}", mountCommand);?
nit: this implementation is really awkward to me. I think it would be better if we just call close on the next line rather than on the next line. The fewer code changes I think is cleaner: java try (final Consumer<K, V> metrics) { final List<PartitionInfo> partitionsFor(Map<TopicPartition, OffsetAndMetadata> partitionsFor(Map<TopicPartition, OffsetAndMetadata> metrics)) { close(Duration.ofMillis(unit.toMillis(timeout))); } }
(Arrayly object can be null, please check on the left side of the if statement).
I think this should be more like:.query(Query.getSort() == SortOrder.DESC SortOrder.ASC).min(parameter.getSort().getOrder())? SortOrder.DESC : SortOrder.ASC;
This is unnecessary as the constructor doesn't have the default value.
Hmm, didn't think of this earlier, but it might be neater to do this using the VerificationWithTimeout mock methods. So you'd mock the eapCallback, then assert that the callback was fired within a timeout. I think that gets rid of our locks and booleans entirely, and make sit easier to read.
What if the state is not SUCCESS?
this is a new method initialized only for the enum service, doesn't it? I'm not sure this is correct
This is a little crazy simply because the suggest oracle may be called many times in rapid succession during the course of one operation. It would be easy to have a simple Cache<Boolean, List<Account>> with a short expiration time, say 30s. (The cache will only have a single key, say True, we're just using Cache for the expiration behavior.) (Also totally will not work for googlesource.com but we can wait till there's a proper secondary index for accounts.)
Tracking the call to getGrillSessionIdentifier.createConnection() seems to be repeated. Why do we need to create a new method for this?
expiringObject should be a lambda and a lambda should work :)
please add a log
no need for the new empty line
No. You want a stack trace here instead of only the exception.
Please move the initialization of the disposables to a local variable to avoid all the null checks.
Style nit: Unnecessary blank line.
shouldn't it check the getCluster().getCompatibilityVersion() from the cluster under the cluster compatibility version?
I wonder if it's better to do this: if ( StringHelper.isNotEmpty( withClause ) && StringHelper.isEmpty( filter ) && StringHelper.isEmpty( filter ) ) { return ""; } else if ( StringHelper.isNotEmpty( withClause ) && StringHelper.isEmpty( filter ) ) { return ""; } else { return StringHelper.isNotEmpty( filter ) && StringHelper.isEmpty( filter ) && StringHelper.isEmpty( filter ) ); }
Nice, yeah, I get it you can use an AtomicInteger to store the values of the enum values. You can use that here to avoid the two lookup codes for multiple values. Also, add a parameterized filter to the enum value.
This might be cleaner if you put the whole thing into the method and used variables where it's used.
Mentioning the message out above would be a good idea.
ParSeqGlobalConfiguration.getInstance().isCrossThreadStackTracesEnabled()?
Should handle all existing CAPS cases in a single GroupBy subclass. I'm not sure it is safe to use this anywhere (along with an extra _count_).
Again, we are braking a bad request to the code.
Can you use a specific Exception for the status code?
Factorize these two lines?
same here, need "else": ConsoleDeviceEnabled should be set according to template
All the implementations for the throwableFunction are the same in this test. Maybe there is a way to de-deduplicate this line: final CompletableFuture<Terminated> actorSystemTerminationFuture = actorSystem.getWhenTerminated().toCompletableFuture();
Consider making a helper method to ensure that we don't throw exceptions.
I think just passing file is enough instead of file.toPath()
How does the retry handler distinguish "failure in initialization + failure in handling all items" from "success in initialization + failure in handling all items"?
Let's add a new method to replace this with the following two lines.
Please use buildAndStartWithDirectExec#buildAndStartWithDirectExec instead.
Why not just do it in the next line?
This line can lead to a DNS lookup (blocking call). Would createUnresolved work as well?
This should be a constant, like pg_class.relkind
Suggest "long d = 0;" here, with an "if" case instead of having all columns selected
@dmzaytsev It's better to have this value in a static variable
Minor nit: Use try-with-resources to simplify this.
I think this broke the sonar build: <LINK_0> If this source change was intended, can you take a look at the Jekins configuration?
The implementation of Parameters for the constructor is _before_ the check is met. Here it's not exactly what we want to do.
Please use consistent formatting (spaces vs. tabs) so that the alignment of text blocks in the file doesn't become any worse than it already is. I realize that the text formatting is already inconsistent, but I would prefer to not have new inconsistencies added.
Change this to work the same as is in List<F>. Perhaps a consider returning a non-zero size and add to the other. Perhaps: consider returning a non-zero size for the all cases?
I wonder we should close the buffer here instead of just getting the length.
Are you sure this is what you want? The method can have multiple listener and log it if you want to have the same name.
You are using SUBTREE here, but not sure if it makes sense to do CharSet.
should it return getTotalStats?
can you make a constant called HOST_NAME to be consistent with the other tests?
All the time metrics are in the same transaction. Could we split them into separate method?
You should dispose the buffers in the try/finally block.
Please add a ArgChecker.isTrue(false) or use the ArgChecker directly
Do you want to catch this exception?
This is a localized message, we should probably have a constant for the pretty and generic name.
We should set the default value to SIGNING_ALGORITHM, correct?
final
This is not a good idea, but I think it's a good idea to keep the trace. We can get rid of it here, as it's only one segment.
nit: I think this is redundant, since the array's length is the same as the size of the array.
I'd prefer to keep the Typeser return around this if as should be used in JSON serialization.
minor: this could be changed to optionLengthNibble
Maybe we could use some utility to do this this way: java private void typeSelectorKeyDownEventListener(final Object event) { if (event instanceof KeyboardEvent) { Button managerButton = getManagerButton(); managerButton.focus(); } } else if (isCancelCancel(keyEvent)) {... }
space after +
channel.close().sync();
Can we use the same formatVersion as the log message?
I mean here. You have access to the values of this class, so when the values are changed, you can do the conversion at this point.
I think we should move this to line 306; we first wait for the thread to finish (join) then we start interrupting it if it still alive. We can still attempt a join() after the thread is interrupted, but with a shorter timeout, i.e. java _eventProducerPool.shutdown(); try { _eventProducerPool.shutdown(); } catch (InterruptedException ex) { /* omitted for brevity */ throw ex; } while (_eventProducerPool.isAlive()) { // Thread won't be alive if it's gracefully exited try { _eventProducerPool.shutdown(); _eventProducerPool.shutdown(); } catch (InterruptedException ex) { /* omitted for brevity */ throw ex; } }
I'm not sure the reason to be this is here. Assertions in the test classes are generated automatically, to ensure the generated status is always non-null.
Can you please remove the final qualifier and add a new local variable to the left and right of the for-loop?
This tag should be defined as constant somewhere.
"Type information is missing" or "Type information is missing"
I think this is leftover code from the original builder, and the method should be private (so that there is no reason to use it at all). I recommend change all method signatures to be private, and to make this one package private.
@Serranya Please, move this string to a constant file
primitive (int) would be sufficient
please rename to contig names
same as above. If we want to keep this method more consistent with other methods
Formatting (not sure, but I prefer to use a separate x/y instead of single assignment) sdArea.getXYPlot()
Why this change?
this could be encapsulated on a method called findFirstStepByElement(String) and then check for null if does not found
Can we remove a line break?
Maybe it would be better to check pendingBlocks and do a check for whether the offset is > 0 inside performPut?
Should we change this warn level to debug? If we are doing this, I think it is not an error.
You can use allMatch here to verify if the result is not null.
Ideally we are as specific as possible with exceptions based on what developers might see.
Why do you need to save the results?
I suggest to add a log of the exception here, just to ensure that the feature is not available.
Calling the method with a response can be replaced with withGateway3DSAuthorisationResponse.of(BaseAuthorisationResponse.AuthoriseStatus.ERROR, message, response);. This is also used in places where we log the response.
Remove the negations
Do you need to return InputStreamReader(charsetName)?
1. The default INT type of type String is not needed, isn't it? 2. The type of the cast takes from type string, but the string of null type must be either single or none of them.
put else in a new line
Doesn't Qulice complain about this line?
Why are we catching exceptions here instead of just logging them?
this could be inlined
overflow = ((xl  yl) & (xl  zl)) < 0;
I think in the case where we would still want to recycle the buffer packets. (could be the message to be dry, but perhaps it could be added to the "classifier" method here.)
Looks like there are leftover lua-op calls to the model classes in addition to the fields.
This code can be simplified using a stream.
I think we should make the variable name as well.
I would move the createNewFile check into the "else" block as it's an extra method.
could we simplify the logic as: if (childType == null) { return new MessageType(subfield.getRootName(), ImmutableList.of()); } typeBuilder.add(childType); parentType = childType;
This is not required.
shouldWriteWrite here be read or read?
you can inline item
I don't think this is a good idea. Removing reserved pool does not necessitate removing reserved pool. I suppose we will always need to set aside a part of our heap to things we don't track, various overhead, etc. We can probably now set reserved system memory to a lower value.
This is a low-level utility class, so it would be much cleaner if we ever add code to the connection. What do you think?
I think this should return status as well. Could we declare this as FAILED since it's a race condition? suggestion isHidden()
check for non null?
I think this can be final.
We want to keep the convention in java 8.
Shouldn't this be verifying that the element was applied to the filter?
this.
Why do you need canonicalList.size() - 1? It's a nice test to avoid a generic cast.
Can you response text here and verify that commits are contained in the right order?
should we use a format that allows the reader to use multi-byte columns?
static import for milliseconds please :)
nit: move it before the for loop.
use fieldType rather than fieldSchema in the message.
NTPROC_JUNK_ID is highly misleading
Can you explain why this change?
I find the other way around: if (shouldLogDebug()) { return months; }
Use onSuccess() or callback()?
This rw is not used, as you can't use Iterables.getLast
Can you extract a constant?
All "args[i].getSize() == PROPERTIES_TAG_DESC" is repeated in "else" block. What about a single call that included in PR?
Shouldn't we call countDown() here just after the waiterIds is cleared?
This is not a true check.
Rename this method too.
I think inside 'if' statement should be 'else', since it doesn't require 'breakor' in this case.
Why is this necessary?
could move the variables to the top and remove the private void
Do you think it's worthwhile to check!my responses.isEmpty() as well?
This variable is not used.
This is unncessary. This is a bad idea because population configuration will now be treated as duplicate.
I think that this loop would likely be better if it used split()
Don't we have to lock the email field again? We didn't have to do this before because it would check to see if the user had an existing email but if it was, it is not correct.
Use logger
I would pull this else if into a private function and then make the function static and private. This should not be a public method.
How about using %n here?
please remove this validation (and setSucceeded(false)
Should we remove this?
Pull this logic out into a utility method succinctBytes.
- you need to explicitely add the null here if you want it to be selectable. - this should also take into account the selected OS. Ideally, fill this list according to the values returned by osinfo.
This seems too broad and could be removed.
More magic numbers; use variables for longitude/latitude?
I think it is save to remove the System.out.println. If there is an indication that something went wrong, e.g. if the validationResult.getDetails() returns null then the code will be executed.
We can't use the scale variable here since the pattern is followed by a common way of determining the font type a bit. Like "true/false" or "false". The same goes for the default style.
IMO, makes sense to move the.build() method to the previous line of this PR.
Rather than hard-coding a file in the class and so, I suggest to use the class loader of the file that has a static final String variable that can be checked by File.separator.
Don't log and throw the same exception
as far as I can see, better to use the builder pattern.
This should be a switch and not a string comparison.
This line is too long: ElasticsearchSplit split = new ElasticsearchSplit(table, index, group.getShardId().getId(), nodes[nodeIndex].getHostName(), nodes[nodeIndex].getAddress().getPort(), layoutHandle.getTupleDomain());
Reverse the condition, so it is less readable.
Make constants
Why 5?
It would look cleaner if you moved this to line 92 above and take care of the result
maybe we can fix the coding conventions in the message? (or public/final)
Code style
decorateHtmlElementList
Shouldn't null here just be interpreted as an empty array?
The City class is defined in another package used by other tests. Any changes in City could potentially break the test. I would recommend using a class defined within the test itself. It is easier to maintain the code.
See if you could reuse the toString in MultiValueMap.
Rather than calling the function that is only called once, why not have a single method called migrateSessionPropertyToSecured(String str, String docId) that calls the function will also return a result for a specific reason.
It looks like you can use Collections.unmodifiableSet instead of new HashSet<>(reqBody.indexOf(value) >= 0)
This should be done once in the constructor.
What about using: java return Objects.equals(geocode, other.geocode) This will help to detect an exception if the geocode is missing.
I'd suggest not assuming an enum value in the acl field.
I think we should use TypeMetadata instead of its TypeMetadata to avoid potential NPEs.
why kWorker is not kWorker?
The more appropriate null check here is to return false if the definition is here.
This is not 'per node' It is the count of all CPUs defined in all NUMA nodes.
Please use curly braces around the if/else blocks, even if it's one line.
Can we get rid of this conditional? Maybe 3 lines above?
I would prefer to use org.activiti/engine/validation/validMessageProcess.bpmn20.xml in order to be consistent.
At least log the full exception message.
Considering this is a public method, I think we can make it package-private and annotate with @VisibleForTesting.
Use the Json object, as you did with [here](<LINK_0>
It seems we could directly use the field reference here. Any reason we need to define it again?
lets export this to a method
Can we do this?
Redundant code.
You should be able to remove this line since it's not used.
Shouldn't it be template for the system level in the PR?
Please use [Bundle.getSession(String)](<LINK_0> instead.
Why this change? It seems to be unrelated to the patch (and I'm not sure it is really needed ;))
seems like this variable should be named with a test that indicate what it goes to, rather than just creating a new ModelDescription(SourceModelA.class, "3.0.0.SNAPSHOT");
Why is this behavior changed? It used to be NOT waitForHole(false) as it was true, but now it waits instead. Is that true?
This could be replaced by Encode.forHtml(savedConnection.getDatabaseUser(), savedConnection.getDatabaseName());
Line too long.
This would not be necessary if a requirement is provided a Set.
Shouldn't this be context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS, false)?
Please add final for local variable, and rename validNetworkInterfaces.
Should be 'null'
+2 for a more readable variable name.
Need to be a test for this line.
I wonder if this method can be moved into the AnalyticsUtils as well as we are going to need to keep track of the media files up for each media.
Can we keep a string constants class for these?
This won't need to be done by each thread here. You can call sendEventToSystemProducer only once.
can be simplified as: return Objects.equals(baseImage, that.baseImageId)
What about extracting 2000 to a constant and reuse it in 2 places?
Add a check here to verify that the serialDataReceived method was not called.
Please use falcon instance " + "api on individual entities."
I believe it looks like it's time to remove the whole dropDowns MapBox. Then it is enough to add the filter with the desired result.
Keep @Register as an static method? So the value could be directly change?
can be simplified as:.map( v -> v instanceof Optional? (( Optional ) v ).orElse( null ) )
I'd use getTaskIdList() instead of getExecutionContext() - if you use VmHandler.convertVmData()
consider extracting to a method since you're repeating those two checks.
Shouldn't we add "None" here?
I'd suggest you do this without the break, and add a space after the if
Why not X500Principal principal = null;?
Does it make sense to move this while you're in here?
this could be a single line, you can just set the string here and pass it to the constructor.
Please use this.
closeResources() or add a looperTearDown() method that does just one of the running tasks?
This logic is not in the model, it should be exclude the identifier and maybe leave it here.
please reformat code
typo exsusts
Minor: Why do you need to do this in a finally?
does this make sense?
Can we factor out this logic into a method?
Collections.emptyList()?
Should this be a catch?
java itemGroup = ((AbstractFolder) itemGroup).getACL().hasPermission(authentication, USE_ITEM);
The method could be removed as well?
use the static substring() (since it's a class in the interface)
you can introduce new interface that you can ask if the run should use fork or not. default would be true, also if the new interface is not supported by context (as before)
You can save the size of once
@kahowell, the code should be: key = path.substring(0, childReplicationIndex); key = path.substring(childReplicationIndex + 1);
add null check for call id
How about adding a log statement if the window is not null?
Add the module name here instead. Don't use it.
UT is failing on test code.
I understand what you want to achieve, but can't it be fetched only once on Container initialization?
Is this needed? Please use a utility method from the TreParser, as it could be used to write a header.
This line is unnecessary. LocaleSettingHandler already sets type LocaleSettingHandler, so the line above can be removed.
Couldn't you just pass in the registry instead of of ViewModel?
Actually with BeanUtils we have some "standard" stuff in the build method I think. I would prefer to keep as it was for the first call to the build method
Ah, OK, that would be clearer.
The above code is not covered by the previous if condition.
This is using.toString(). If you want to keep acting, you should use the new method to check the state of the entity. But your tests are failing. The classname is broken because the methods are the same. The class you are testing is not part of the public API.
this part is the same as in restore restore, could you refactor it into a separate method?
Still wrong index... It really must be dependent on the TmfEventTableColumn, we cannot assume that the received 'columns' list is either in creation or visible order.
At this point, we're right. This is a global variable, not instance variable. I'd like to remove it and change it to be private.
Can you please remove this block?
the method needs to be private. otherwise it will be accessible to the "adoutout" file.
The problem here is that if the expression is not in the multivalued expression, the index is not in the multivalued expression, and index is in the multivalued expression param, not in the multivalued expression param. I'm wondering if we can fix this later if we have to.
add asserts
I'd suggest to remove the debug/info text and only log the warning once the translations are provided.
What about dumping the statements into a file to help the user? It's much easier to read.
@tmjee before awaitTermination you should call shutdown Then assert that awaitTermination returned true Than then shutdownNow
suggestion String file = Optional.of(args, "make sure %s", parentId, description);
Don't you need to make this a constant (like jobConf.get("jsonLoader.nestedLoad.disabled")))
Introducing the type in the if statement is not safe. If I read it, then break.
null check
Any reason for 2 and 2?
suggestion
When opening a trace in the unit tests, the resource is often set to null, it is not required. But then we'd have to see where the supplementary files are stored... (path of the state systems of analyses generated for this trace), so that we don't have orphaned files. Does having the resource make the supplementary files deletable?
This should be factorized, e.g.: int row = column == tb.numColumns()? thisRow : 1; if (lastRow == -1 || TupleUtils.cellCompare(tables[childIndex], column, lastRow, tb, column, row)!= 0) { firstVarIndices[childIndex].add(thisRow); }
You can use ThreadLocalRandom.current() for both scope and memory, this will be used in both
Why did you removed the check for -1 here? Do you not need it?
@onursumer wondering if this function should maybe be private just to avoid people from accidentally using it?
Probably better to name the response to something more like "publishing-queue"
Note that this exception only occurs if the change is going to be spammy. When you use "no parent patch set" it gets more likely to be "change edit ID has e multiple parents"
This test would pass even if an exception is thrown. The cause of the test is not to verify the cause. There are a few examples of this: <LINK_0>
@mmmyd Can we take a look at [this](<LINK_0> or, if it is handy, we can catch a specific exception here?
It appears that we don't need to catch this exception here.
Message is incorrect here
Throw a named exception here.
nit: move these 4 lines to a new method like isSat..
Better to use try-catch with final catch
Better with other example domain (e.g. example.org).
Are you sure this is what was already in the original code?
it looks like a constant
You can use state.sort(entry -> state.name().compareTo(entry.getKey()).
We should check for null here.
There is no point in having a new requestor. Do we want to be handling one case here?
Inject the client instead of this sleep()
This looks good, but the bindingResult check should be executed only if the repository exists. In other words, something like this: suggestion if (repository == null &&!RepositoryTypeEnum.PROXY.getType().equals(repository.getType())) { //... }
can you please rename to vmPayload?
This is pretty dangerous because alerts bigger than 1MB will break the emitter
It seems this code will always return null, no?
The Exception is never thrown.
1 =
You also have to replace anyMatch with allMatch here, otherwise there is only a validator error if _none_ of the media are in the physical structure tree. However, there should already be an error message if _only one_ is not in the physical tree.
If we are using this.valueString and valueString should we be consistent and use this.valueString? Or maybe this.valueString should be the same value as the field name?
Maybe you could avoid creating a new variable first and use it here and below, but it would be nice to avoid that as well.
Now one can only static import state methods for either TransformationState/Module, but that isn't a big issue
Log messages appear to be incorrect here too.
Can you have a test case that will throw an exception?
@zack-shoylev Do you know what the underlying issue is here? Waiting for locks to be released, or..?
Can we replace these 4 lines with: assertTrue("purgeLessThanEqualTo", Math.min(formattedValues, 0);
I would really prefer to serialize not only the first element, and then use a regular HashMap.
Nitpick: 'if' is not needed
Can we reuse the function that is also done by AbstractShutdownHook into FunctionHelper? Or re-use this also?
nit: extra space after (
Ctrl + D
There is another reason to do this here.
line > 120 chars
I'm not sure how much this sleep is running, but we probably need to do something with a CountDownLatch instead: 1. Thread.sleep(long) 2. Thread.sleep(5000) is not a thread and it can be changed to 0s and then assert 1s to return value.
Maybe a bit extreme? timeoutInSeconds * 1000 would be clearly in milliseconds.
<LINK_0>
nit: can use a better name (creating all these methods)
Isn't this going to be inefficient as the amount it is calculate the budgets from the budgetObject instead of parsing the budgetObject?
use curly braces
These will never be equal because run.id was never changed. The check is unnecessary now though. A similar check was used previously because the generated name was based on a predicted ID before the Run was actually saved. Since it is now saved first, the ID is solid. Above (L1535) should be changed to run.setId(run); if (baseId!= Long.MAX_VALUE) { //... }
Should this be done in the try block?
We don't want to invoke setVds, because get the whole VDS object is fetched from db during saving audit log to db. If we invoke only setVdsName, then we can spare this unnecessary VDS fetch. if (host!= null) { event.setVdsName(host.getName()); }
After some thinking about cases when a table exists but is empty, setting to "null" and then setting to "null". This will only revert to the default, and this will delegate to the new constructor.
I think CollectionUtils has a contains-method for arrays.
To be more explicit, should we throw an error here if "clean-on-flush" is specified without neither "flush" nor "flush-size" being present?
This should only happen if we go into the block, or is it possible that a new map is created?
It doesn't seem to be the default for the snomedRelationshipIndexEntry relationshipWithAdditionalCharType anymore, is it?
This is too complicated for a slave. Slave attributes are sent at INFO level
you should use the injected version here as well
Better to use the old version, taking the newer version. It is API.
Same here, don't apply the displayName.
What there is a random text?
Please, add the indent to highlight the blocks and avoid the mess in the code.
I ran the snippet against multiple compiled GTK versions on my machine and the issue reproduces on all of them -- even the first GTK3.10.9 release() before initializing the array with GTK_VERSION_1.
please use CollectionUtils.isNotEmpty()
Do we need to check for null? If the exchange user does not have enough nodes of the given project, then we can use it instead of the creation of an internalExchangeRepositoryMetadata.
Can you change this to use the logger.debug("processStreamList: {}", preparedQuery);
"uppercase".equals(textTransform) && textToInsert!= null
Is this really needed?
Was this intentional? Why not have a new constructor that takes a memberId and a limit?
please remove the format by default
Can we get rid of this stuff by using the resource class that's set in the constructor?
This shouldn't be here. The constructor will init the connection pool. I suggest calling the constructor with a builder, a default constructor will short-circuit the creation of the constructor.
In Tribble, the Rsp wrapper class is a ReplicateTimer, so it's better to do something like this: java RspList<Response> h = new Rsp<>(random.length); try { if (rb!= null) { h = System.nanoTime(); // COMPACT COMPRESSED_MAX_LONG = nanoTime.MILLISECONDS.toNanos(timeout)); } catch (Exception e) { return req_marshaller; } } return future;
not required.
This will be more readable for multiple users.
I'd suggest using just this: if (getSupportFragmentManager().getBackStackEntryCount() > 0) {.. } else {.. } This will enable us to get the defaultScene of the getCurrentFragment and save its scene in nextFragment.
I think we should have a condition if (LOGGER_METHODS.contains(symbol.fullyQualifiedName()) { checkLoggerLog(ctx, callExpression); } else { this.checkStrFormatStyle(ctx); }
Component type for the inactive device exception should be DOMAIN_TARIFF_SWITCHING here.
trace
why not move this logic to groupStates?
Again might want to check the iterator behavior here.
I think we should fail("Data validation didn't work for mismatched data.")
we can use this query instead of checking in the loop
please add brackets to all of these if statements
We should check that we reset event or call record.length() here
As you already have a bloom filter column, please remove this duplication.
This is not necessary now, right?
s/1/INDEX/?
Why not use the sync method here?
This defines what we are migrating from, and we are migrating from boxc3 data which currently uses the Normalization event, so you'll need to leave it as NORMALIATION in this case
The same pattern here.
Instead of "save, it's better to add a common DB operation, so we can verify the DB is saved and the user wants to refresh the dataset."
Just wondering if it might be better to refactor this into class variable to be called position or similar
This test queries are not necessary.
This should probably be a warning, not an error.
Could we also add a check that the resource.getAll(new PagingContext(0, 0, false, false)) does not contain the expected query streams?
I don't think this is good, with this pattern we are using try {... } finally { lock.unlock(); }
because writer.put() can fail, you should enclose it in a try/finally like: try { writer.put() } finally { writer.close() }
Should we not assert for null not in the first place?
We can merge this into the single line: return new App(appName, appContextPath, this.getClass().getClassLoader());
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
nit: s/protected/protected/etc.
Another place to deal with rolling back the transaction in case the transaction was missing something like isShowingTransaction. If I open a transaction after commitTransaction and rollbackTransaction, then the commitTransaction() method will try to commit the transaction and rollbackTransaction() will be called. But I'm not sure whether this is a good idea.
Why remove? Just put this in the constructor.
Do we ever expect this to happen?
Should be getDrawable(R.drawable.icon_user_attnneg), null, null, null)
Need to enhance the existing bean - new instances for setting this
Please don't change this inside an if that's a no-op. You could omit the "&&".
I think this should be done at the end rather than in the finally block.
the exception message should be updated with a more useful message.
This should not be changed since it is a WBeanComponent.
Sleep might make this test flaky. Would it be ok to do the test before the rest of the test?
suggestion } catch (Exception e1) {
To let's create a method setUpServerModules() to return the list of valid modules
If someone uses a lot of data type in the old custom dataset, then I think we should _always_ set the target column id for the DataColumn.
if the version is set, we're still getting this VM, right? if there's no storage type, then we're still getting the VM from the pool, and we're already on the take it.
I feel like it can be a leftover of the refactors from "getPartialWorkspace" to "get"
String.format(String) does same.
WALs not in expected range -> wait for WALs
This method can be removed.
You don't need to collect the entire stream if it's not used.
You could use == Subject.ANONYMOUS.equals(event.getEventType()) instead of if (subject == Subject.ANONYMOUS) {
mmm... I was not so sure about the "to" in future...it's not ok for this one...
You only want to use logged. Otherwise you want to log the exception.
Create a constructor without the last field?
Restriction should be replaced with [] in this case, because we do not know the element that is the parent array.
Please don't use this instance names. It's still the same for the test. Maybe move the variables to class level?
why public?
I'd suggest not to catch all exceptions, but just let the exception bubble up to the caller.
A duplicate?
Not sure if I just can't see it, but should we close the zkWorker if we get an exception?
Could we break this to : "WatchDog is a free"?
I know this is old code, but I still don't see a reason to change this to java return product.getProductContent().removeAll(toRemove);
In all you code, we log.error("could not instantiate class '{}' due to [{}]", instanceName, e.getMessage()); I think we should print that instead of the entire exception, right?
nit: it seems a bit cleaner to me to have a mutable map instead of a deep copy.
Could you please add an explanation in the message?
possible NPE
this should be regionInfo?
should use {}-placeholders instead of string concat
constructor name is not required
This naming looks unfortunate as it is not descriptive.
Why do you need these separate conversion?
Hardcoded order is probably better
I'm afraid this is a good place to print what we got here? (ie no variable)
Why did you change these?
If previousFormatParameters is empty you will enter this if while it used to not be the case before.
formatting
Only thing I can think of is if it can handle "09.1" (without actually testing it, I think the previous if statement may flag it as a malformed octal sequence.)
Please revert this change, too.
is this necessary? we already have it in SingularityRunNowRequest. Does that still work?
Use StringBuilder instead
Seems like it's a bit confusing to have a CheckpointStartRequest for the first checkpoint. If you really want to do a single-CheckpointInProgressRequest, you can save the get and just call writers.put.
Looks like the 4th parameter is no longer needed. Since the PR targets master/, it would be fine to remove it altogether, no?
Inline statsCalculator into this if we moved here.
This implementation would be fine for the filtering because it is executed only once per searched value. But for building the bloomfilter at write time it has a huge performance penalty because it is invoked for every value. I would suggest keeping the different hash functions for each parquet primitives to support write time performance. You may implement a convenient method for type T to be used for filtering.
Just use [JsonUtils.getJsonMetadata](<LINK_0>, they can be used as a method that is not only called once.
Californium should be e.getMessage()
I think you forgot to use named symbol to indicate that symbols are going to be loaded.
This one should be called after onComplete.call().
The query string is not used in the test case anywhere.
This may not be true.
do we need to preserve this behaviour?
You can just throw SECURITY_LOGGER.invalidKeytab(e); to get rid of the try/catch as it is an anti pattern.
I think we should keep the old methods and use these in Set methods.
receiptThread.toString().equals(key)
This should actually use that to write all the lines in that buffer, as that should be everywhere cleared in the neighborBlockReadHandler.
palka - we can use Collections.emptyList()
Using an enum as mentioned above, this would become if (saveComponents) which seems cleaner to me. So if we were to move the value of SOFT_UNIT to travel an existing service, then we would like to change the code where we would like to keep the symmetry.
You should make this explicit that it is (i.e. if (controller.isAreaClicked(mouseOverOnePlayer, input)) {
Should this method be private?
[minor] Can we add a "list" or something like that?
shouldn't be removed this one HibernateUtil.commitTransaction(); too?
java assertThat(logs.get()).containsOnlyOnce("test debouncer enqueued more than 10000 events, rejecting new events.");
Add a log statement.
No need to break as it is already in the while condition.
What if we have deterministic limits?
Wrong variable, should be memberGroup and resource group included in the error message.
Name it dto
I think we can use Math.equals() here but I don't see any reason to use byteAt over byteAt.
Could you please log the exception?
Add localName to the param? Makes it easier to debug when logs from multiple instances are merged into the same logging system
scaledLinkDist (i.e. _int_) should be sufficient to calculate the maximum value of CELL_SIE * 1000.
why doesn't this be done in the MockIndex constructor?
I understand this is not efficient, but you need to understand this block - line 93 should be implemented now also.
Verify divide by zero size.
Be careful about the time stamps. I know it is the same as the original line, but I am aware that you might change this to the original version of the test method (e.g. not explicit magic numbers).
There is a [internal.request.jsonrpc library](<LINK_0> You can use the JSON object directly in RegistrationHelper and avoid the null check
There's no reason to separate the 'clusterId' from the URL here. It's very hard to read.
We should add a DEBUG log here if the FederationException is thrown
Do these two lines have any blocking code?
this log statement is duplicated
This is neat! We'll have to remember to use it elsewhere!! :smiley:
Please remove "protected" modifier. We are not doing it for the second time.
Is it possible that this affecting string generation code also affects the same string?
This method could be reduced to DetailAST lambdaParameters = parent.findFirstToken(TokenTypes.PARAMETERS);
nit: [ERROR] /home/travis/build/openmicroscopy/bioformats/components/formats-gpl/src/main/java/org/apache/commons/lang/file/editor/Custom/java/org/apache/commons/lang/ImageProperties.java:[183] [ERROR] } catch (IOException e) { LOGGER.trace("Failed to convert image to {}: {}", id, e); } so it will be much more verbose
I don't think we should refactor this to be a callback.
I don't think we need sdkLocation anymore since it is used only in ConfigurationService. No need to get the device uuid here.
Couldn't you use an instead?
If the group is "1," here and in the other side we should probably also remove the "!" from this else block.
this is a double-/ now-ish
You should always have the check string 'StringUtils'. [![rule](<LINK_1>](<LINK_0>
Not sure what the one is supposed to be.
I would extract this logic (as well as some other logic in this method) in seperate methods. This entire method is 30 lines long. In my opinion way too long. This does not only provide better code readability but also code reusability.
are we ok with either of these conditions or just reverse them? if ((diskFull && allDisksFull) ||!allDisksFull)
AJ, An  vital map is a better way. Try  vital map for a time limit
The code here is the same as testCancelOfNonMatchedUser.
:stuck_out_tongue:
s/byte/byte/
Is it possible to use a waitForAssert like this?
I think this should be "Unfiltered"
may be return ((Un) term).getTimestep()!= null? timestep.compareTo(result) > 0)
suggestion noEntryFoundDialog.setContentText("No entry found for ISBN: " + identifier + ".");
Is this should be primitive?
This code is repeated a lot. Can we factor it out into a static method?
do not set the correlationId for the request. It is only applicable for the reqeust of the response.
Why do we need this check?
We should show the entity location in the exception. We should show the user the link.
I think this broke the sonar build: <LINK_0> If this source change was intended, can you take a look at the Jekins configuration?
Why don't you use the iterator?
You can just use getFieldValue(Json.class); here
Can you move this whole method to MojoBase?
zoomInEnabled = true;
Perhaps you can extract this into a private method (i.e. 'ThreadFactory.createSyncConfigurationBuilder' which creates the user-name with the same name). This will help to test how it works and removes the creation of the user-name from the DB.
You're missing spaces around operators.
use a final boolean in the class?
Is this really what we discussed? A question, could we have a case for deleting a delete?
You don't need this method. You can just use nextBatchFuture.setException(new IllegalStateException("Mock failure"));
[StringUtils.isBlank](<LINK_0> will return true for " " strings.
Don't print in console output.
can there be no "else" clauses?
This is too early. if(newAttributes.getId() == null) { return; } else { fqDb.getFeedbackQuestion(newAttributes.getId(), hasResponseRateUpdate); }
This should work, but I guess that the lifecycle methods (throws Exception ) are not necessary.
Do you mind doing a select here?
SetPushSetupAlarm should be tested on an EKnownDevice domain, not an EKnownDevice.
if (jsonInfo.equals("err"))
Maybe remove this and use logger.warn(error, ex)
minor: consider using try-with-resources
This is also incorrect. @rishabh-997 application constants should be used in the code.
There is a nice way to do this.
StringUtils.equals are used for Long and Long, I think you can use.longValue()
If we threw this exception, then will will not be caught and logged as severe
This should be done in a finally block.
Is this doing what I think it is -- using a normal directory as temp directory - outside or temp folders...
It's really hard to come up with a name for this.. not happy with this because it suggests action with DO but doesnt specify the action. I am unable to come up with any better though. Will post if I do.
Instead of creating and displaying error intent, I prefer to convert the String to a boolean to the intent.
Leftover debug statement?
:+1: for using this kind of thing
Why are we catching an exception here? It looks like this pattern (should be followed by a if (checkCancellation(CancelOption.NOTIFY_PEER)) is used in such a case.
Why do you need another set? Just use fTagLocations to check if it is there or not
Should we also check for null?
Please use log4j.
I generally prefer the empty string comparison over the comparison, a single integer comparison would be more readable and more readable.
Is there a reason why you didn't use _try-with-resources_ here instead of _ try-with-resources_?
I would prefer not to use this method in the TemplateProcessor, because it's not clear how to create the TemplateProcessor knows about the template.
Let's be consistent. I see this method is called only in the master. What do you think?
Are you sure it does not matter?
Too many dots, should be {version}
These five lines should really all be in their own method, along with the parsing of the timestamp in the beginning.
This is a good idea. You need to have a protected utility method to access the class, if necessary.
This should be done before calling the non-view method, because we don't really need to interact with the views in the view and the slighlty menu will stop at the bottom.
Remove the redundant final modifier.
I don't think you need to add the default gate name to the error message. Isn't it enough to provide that name?
I think it's safe to use StringUtils.hashCode() for this kind of thing.
wow, can we just keep totalLifespans and use totalLifespans.getAsInt() every time the value is used?
use try-with-resources
we're rebuilding these key names every time _android_devices is called. Is there a reason we're not using it in this class and it's using mPushPref.edit()?
cle.getCloudlet().getVm() -> cloudletDataList.take(i).append('w')); -> cle.getCloudlet().getVm().getFreePesNumber() - cle.getCloudlet().getNumberOfPesNumber());
why create a new IntervalList? why not just use snp.getChrom()?
java8-isation [forEach][filter]
You can have this method and pass the arguments to the nodeIndexMatcher.onMatchingSchema( state, indexes, node, after.propertyKeyId(), values) to the method, and then just use that here.
We could still perform the this query, even if the parameter value is not set, and the user doesn't really really care about it.
TimeUnit.DAYS.toMillis(System.DAYS)
setErrorMessage
Put the FileState and its bundle at the end of the test, which you extract from you you already have,
Could you please elaborate on why is the DC 1 here?
This list should only contain expectedConceptEntity1's since expectedConceptEntity2's name is different.
Please extract this into a method, e.g.: private ExpressionAnalyzer createWithoutSubqueries( metadata.getFunctionRegistry(), session, types, ImmutableList.of(), node -> new IllegalStateException("Unexpected Subquery".nest));
you don't need this.
Camel case
Does this need a context.
Constants.MB should be in the same way it is being written here.
can be replaced with Stream.of(processors)
A better approach would be to create a method in DatasetForData which returns the private object and then have to create a new method in DatasetData. Something like this: public DataSet createDataset(DataSetDTO dataset, String id, Integer userId) { return dateForData(id, dataset.getObjectId(), id, userId, dataset.getObjectId()); } public DataSet createDatasetV2(DataSetDTO dataset, String id, Integer id) { return DatasetWithProperties(id, dataset.getObjectId()); }
Can you use placeholders with {} for all arguments?
no need for final here. You can use this directly in GlusterUtil.convertDate
"The server does not support any of the driver and server versions that you are using."
I think we can rename this to subPiOne and childTwo.
This is a debug message and so should be removed.
this is not a good practice
why do we need this? Can't you use the VmDeviceUtils#getVirtioScsiControllers method?
Please add spacing between methods, in new code: public static Collection<CidrAddress> getAllInterfaceAddresses() { try { en = NetworkInterface.getNetworkInterfaces();... } catch (SocketException ex) { continue; } }
Not sure why we are throwing Exception here? Won't this always happen again?
why is this line necessary?
Why do you need to a nested synchronized?
Instead of the following, perhaps you can use the "normal" version here. My suggestion is to only do this when log.info("main: {}.", trafficLevel.INFO_FINE_SERVICE_LoggerContext);
I think lastIndexOf(':')() can be used here and in the else block.
This won't be how Jackson default handles a JsonProperty annotated method, it'll attempt to remove the Java class name.
code style
Duplicated code, we can extract it to method
Can we use the constant for the uuid so it's more new?
remove debugging code
coding style
Why do we need frontend changes when we don't plan to expose Jobs in webadmin within its own view like other entities (hosts, VMs,...)?
Do we need this?
rename to child
Can combine the body of the loop.
should not be protected
I'm not getting it. Why those beans are checked? If this is a change about virtual facility attribute, we should check presence of Attribute and Facility within the beans read from message.
An exception is caught and converted to a runtime exception. Either this is the only reason we throw a checked exception, or we should log it via logger.error.
Can the executor service implementation be simplified to: java public List<Server> primeConnectionsAsync(final List<Server> servers, final PrimeConnectionListener listener) { // Override the result of getters to primeConnectionsAsync(List<Server> future) { // Override this method } // Override this method // Override this method // Override this method // Override this method }
don't we want to change the existing behavior?
could this call be moved to the export project in the resources instead of the new one?
@vmaletta use search instead
![MAJOR](<LINK_0> 'Severity: MAJOR') Replace this usage of a generic type. [![rule](<LINK_1>](<LINK_2>
I actually like this. It would be better to remove the call to applyFilter() and just call this.updateSelectedItem(filterString).
I'd make this an empty line, so we can have a output for both items.
It seems this is missing a null check.
- convertValue isn't really a great way to handle this. Suggest setting the type of underlying object to a Map<String, Object>, so we can clear the object when it is actually a Collection.
If all of these are null, this code throws a NPE.
So we basically use this to bypass hostname checks?
Is there a way to "track" the number of consecutive failed attempts to open that pack file?
This doesn't seem right...
Make it public
Nitpick: The API is to return a json (no result) rather than an object. We should either use get(String) or convert to a JsonWriter rather than relying on the visitor's auto-generated fields.
Is this logic needed? I thought it is only needed if bufferId is -1.
Should be Response.ok()
You can use the parser-style method in the spatial reference object, and use it here, so the spatial reference will be created correctly.
This should be refactored out to a method, and return this instead.
I think it would be easier to do this: java TMutation tm = cm.toThrift(); List<TCondition> conditions = convertConditions(cm, compressedIters); //...
you can use the new UDC from the base.
I'm sure in this case, but.trim() would be a better check.
I think this is invalid, as the expression _arguments is not valid.
I think we don't need this anymore as we have already add Ioc to the list.
Do we want to add a ScanResultValue((List) batch).getOnlyElement((List) srv.getEvents())?
s/UpdateCluster/Edit
log.debug("pluginType = {}; pluginName = {};", pluginName, sourceConfig.user, sourceConfig.password);
Should we check for null here?
It is better to throw an exception if there is no wallet for the wallet. It is only valid wallet and the wallet doesn't have the wallet.
Actually the concept with id 88 in the test dataset is a drug and not a test, so this should be "DrugOrderValidator().validate(order.getQuantityId());"
I am wondering if this assertion is needed. The only thing I would recommend is to check when the value is an instance of "iterations", and if it's null, it doesn't _know_ that the hash is valid.
consider moving the if to the addVmCinderDisks method.
Should use the term "record" here.
Use getServiceRegistry().getService(IMetadataService.class)
this is very efficient: - use Objects.hashCode() - it returns the Objects.hash() - you should check for null and avoid an NPE - just add a null check to the fields of the enum to avoid NPEs. - You can use java.util.Objects.hashCode(additionalOptions)
It looks like we are not using placeholders in tests...
I think you should use a constant for the "magic" length
:bug: this is a bad idea, given the 65 65 extension it might be a long time unit, right?
Again, please don't call this unless ImportNode is is a ImportNode.
nit: adding parenthesis around _softConstraints.stream().map(v -> v.getAssignmentOriginScore(candidateNode, clusterContext)).mapToDouble(v -> v.getAssignmentOriginScore(candidateNode, clusterContext)).collect(Collectors.toList());
"for" -> "for"
An empty string?
Could you please change this line to something like "Unexpected text in non-language-title"?
nit: return results.entrySet().stream().map(e -> e.getKey(), e.getValue().isSuccessful()).collect(Collectors.toMap(e -> e.getValue().getErrors(), e -> e.getValue().getErrorMessages()).forEach(e -> e.println(String.format("OK":"FAILED", e)));
Here indentation is screwed again. Just remove the whole method with this example
Move this to a ResponseUtil class?
I would prefer to check isInAnyOrder() first, then use it in the else clause of the if below
Style-nit: Parens aren't necessary here around the conditional block.
Just a suggestion. suggestion serviceAccountsToDelete.forEach(this::deleteServiceAccounts);
I think PrevScopeUnitializedVariableData should be renamed.
The forEachOrdered
could you please check if currentSortBuffer is null? I guess it's not @Nullable.
I think onError(timeoutException) is generally better?
Does this really work with CDT or CDT? If so, I suggest we remove this All tests.
Why not chain these setting in the previous statement?
the caller should throw exception instead of returning ValidationResult
Shall we move this to debug level?
And here the builder is useless.
I would have used [AnacondaEnabled](<LINK_0> instead :)
Can be simplified by using primitive booleans.
Perhaps have a default method named isAlternativePresent(String name) so that we will be more confident that alternatives is always present or binary. alternatives doesn't seem to be used immediately, and the logic would be much more readable/less cost than having to cast/unnecessary.
This logic partly duplicates the loop above that is using GoImportOptimizer#findDuplicatedEntries. This leads to duplicated error message![screenshot 2015-09-09 21 44 35](<LINK_0>
Won't this change prevent the use of the Alumnini? if so, it could be refactored into a method, which returns the next time and is being handled by the else.
One more.
Missing space after )
I don't think we should be using try catch here as there is no exceptions thrown by the method.
Same here. If you want to test this logic that is performing the job, it'd be good to lift this out into a utility method.
As with others, I would not assert on the result of the operation, only on the resilience strategy being invoked.
This should be TableMeta.queryType()
use this utils method to show error <LINK_0>
Please parse exception to parse it.
IMO, you can merge both ifs if (rv == null ||!needsUnboxing(ctx)) { return null; }
make new attributes final
... 1000L?
Ternary with.startsWith(LAST_CHAR_Y)
why break?
missing final
getGMFDiagram()
This is registered at line 631 to 76. Not sure if that is good, but we can add a little bit of detail on this
Please make sure the message is consistent with the format of exception and use the same indentation for all the places.
I think we should use Utils.debug instead of this. That's the way we're done in a few places.
what if the annotation is null before this cast?
In the asserts this one, you know that the deleted blob exists.
nit: import org.apache.hadoop.mapreduce.db.db.db.db.db.db.db.db.db.db.DbRecordWriter;
Close this with a.
Suggest adding the operational to the NotRetryableException, so the error message will be much more informative.
Why is this method public?
Could probably be a static import.
See getAllLifelines remarks
this.keyNativeHashCode = keyBlockHashCode;
Good idea. Will do.
Again, we don't have to change this code - since it is already executed from the "next" method, so better to skip such loop.
Pull this out into AbfsInputStreamContext.build() and use it in the constructor?
This should also be wrapped in a RxTextView.textChangeEvents()
1) Is this change correct? 2) Why do we need to update the error message?
@merciesa maybe matter of taste, but why not i-- instead of i -= 1?
This code is pretty close, so I think it should be moved to the original method.
We have a few conventions in dasein: - for log statements, we use brackets, but the variable's return value of AutoScalingData(new ArrayList<>());
why not use equals here?
You can also do try (FSDataOutputStream stream = fs.create(new Path("s3n://test-bucket/test"))) { assertEquals(CannedAccessControlList.BucketOwnerFullControl, s3.getAcl()); }
Actual value is on the left, expected on line 63.
<LINK_0>
This line is unncessary. You can use this here: <LINK_0>
Just curious, what happens with this if an NPE?
If not inlined, requestedCount reference should be read into a local variable outside the loop.
fix formatting add space after bracket
Before, if there was an error, it would setToolTableJson_ID when the workflow is in progress. Now you don't set it at all. Do you want that? I don't know the answer, just raising the question. In theory, without understanding the whole flow, it seems like if there were already a value in that fiel, it would get cleared before your change, and now it doesn't. This happens in at least 2 other places (ran across this one first). Checking that this is as intended everywhere. Could very well be the bug fix :) But I'm still concerned about old values not being cleared.
I didn't see a reason for this change.
this can be set by user
I'm a bit picky here, but the tests would be clearer by replacing those 3 lines by a call to a method, such as this.store = getStore(KEY_SET_A, KEY_SET_B); private Store getStore(Set<String>... sets) { Map<String, String> originalStoreContent = getEntryMap(sets); FakeStore fakeStore = new FakeStore(originalStoreContent); return spy(fakeStore); } especially since there's a getCache() method to encapsulate the cache creation
Should this line be moved to line 41?
I think this should use a foreach loop instead of a loop.
try-with-resources.
In this case IMO we should use the isEmpty() check instead of size check.
Since we don't want to go through all this file, move the whole point of parsing the query string.
Since you're using the same media directory name here, could you use something like mediaFileList instead?
it is safer to perform the comparison the other way: VmDeviceType.DISK.name().equalsIgnoreCase(device.getType()) no risk for NPE.
I'd add a function to AggregateFunctionImplementation to make sure it's correct and check if any of the aggregations contains an ORDER BY clause and bail out early if not. These rules get applied many times throughout the optimization process, so the no-op case should be as lightweight as possible.
Such instanceof check is not necessary. And needs to check for null,.
Instead of calling.get() multiple times, you could use the.get() to fetch the preference and then call.get() if it is not null.
use enum for the strings.xml and is hardcoded.
still?
This does not look right. "_parallel" means that we're not using the "_parallel" constant in the code. If this is the case, use "_parallel".
same as other places, you can replace <LINK_0>
Again, this should be a while loop.
Can you change this to STRICT_MANAGED_TABLES.getHiveName() as a static method variable?
Any reason to not use Collections.emptyMap()?
The closePartition should be called in the constructor. And since the close() is abstract, it can be called directly within the PartitionProcessor. For consistency, and also the initializePartition should be initialized in the PartitionProcessorProcessor.
Useless extra line
shouldn't be done explicitly when vdsProxy is already being initialized?
I think it's better to have a check on exception and throw as IllegalStateException. Throwing an exception is something that should never happen.
Can be null?
As mentioned above, return value is OK?
I don't think it's necessary to have the keyboard focus _, just the text is shown in the UI directly. In the ui there is a similar problem in the ui binder file. We would have to change that to use the 'EditNetworkOnStyle' class.
I believe this will be sufficient.
In some cases, such as setting up the buf for composite buffer will result in a content being discarded, which should not be the last element in the tags list. So, in the future if someone projects to terminate a new process, it will be returning the correct content at that point, where we set the attribute for that option.
should we also check the volume is also set inside the activity?
Suggesting this PR at the end, so that the method is clear.
Minor: ParseException.
Might be my math skills, but 5 + 20!= 35 ;-)
Optional: use parameterized log if possible
I don't see this test being used.
This is PRE_DELETE event. Don't think it's necessary.
Use Dtos.newDto(boxService.get(id)) instead of Dtos.newDto(boxService.getUseId())
Not every id record has an email address.
Please remove the 'throws'.
I think we should add a version with Vector.empty(). This method doesn't throw an exception in Java because it will return 0 by default.
suggestion throw new IllegalArgumentException("The input uri list is empty");
a typo? expeced -> not
This object shouldn't be closed if there's an exception.
this should probably be package protected
I would remove this and keep the flow as it was before.
nit: space after "if"
Move this line under the if condition and handle the case. Or even better: if (trimer instanceof AQLSiriusInterpreter) {... }
rename to fileName, config, dir, Run, or use the 'clean' method for removing unused parameter.
unused
!= null
Causes ctf tests to fail
This could be a simple check instead: getNodeEnd() == null?
this can be replaced with existingLoadBalancer = existingLoadBalancer.map(existingLoadBalancer -> existingLoadBalancer.get()).filter(lb -> lb.getScheme() == scheme).findFirst();
nitpick: I think we could even simplify by moving the assignedValue call to the for loop below: if (assignedValue.is(Tree.Kind.LIST_LITERAL) &&!assignedValue.is(Tree.Kind.TUPLE) {... }
Should you use "\n" here (and also at the error message before printing the "VmsList" variable), you might receive a more readable error, where each VM name is printed on its own line.
This should be in a try/finally block to release resources. If there are other reason you want to handle exception, they shouldn't be output to client. If we don't want to print usages, they should be output to client. If we need to print usages, they can be printed with a warning which which they should be included.
Use component instead of this. this in this context will refer to the WebViewClient object, not the Web component (which is what it needs to be).
I think we should do the same trick as for the other nested catch blocks.
Are these local variables used at all? Looks like they can be initialized as soon as they are constructed.
Maybe we should also throw ToolException here to clean up later.
Does this mean that a password was closed before the password was created? That may cause problems in the future.
Not sure if this is the right place for this group name...
A dedicated method to check this would be nicer.
This method's logic appears to be an exact copy of serialize(Page page) except for slice = Slices.copyOf(slice); line. Would it make sense to extract this logic into a helper method and make a copy logic conditional on slice.get() or have a boolean flag that tells whether the copy should occur or not?
Maybe using the String webappPath = Optional.ofNullable(extensionPath).orElse(null);
I think this is spirit of the source code in BackendCapabilitiesResource.doQuery(Query)} return the same Sequence rather than one in the same way. I would suggest moving the common logic out into a new method.
This assignment and the one above is the same. Or this must be changed.
I think this should be a break, no?
You can use the Path object directly, no need to create a new one
"rebootAllowed" is already a constant so we don't have to worry about it here.
add fBot.waitUntil(ConditionHelpers.xyViewerIsReadyCondition(chartViewer)); here too
You know why you want to call the callback when there is no more than one operation, but it's more than a lambda.
Instead of calling deleteServer and then deleting the client, I would use that method in the test.
merge if you put this in a else and put the method body into the if.
Should we just return true if it's not a non-null?
In general, if you put setter/getters to static variable, it should be done in the model, not here it should be done in the getter.
this should at least be SUPPORTED_PARAM_ANNOTATIONS.length == 1
I see all the places where you have done this, but why not just use a single logger and do this for loop?
why not just throw exception, since the exception is not thrown
I think there's no need to copy the elements in order to compare it with DOT_GIT_ATTRIBUTES
Please use StringUtils.isEmpty(id)
@rishabh-997 Place the instanceof check here and call getKeyGenSpecBuilder(service) in the try
Dof!= null check is needed here
Is it possible to set empty recipe in such case?
i don't know if we want to cycle through the iterator. What do people think?
Please implement equals() to provide debugging state information for debugging purposes.
I tend to go with the other cleanup in this method (other methods). But it's pretty easy to understand.
What happens if there is a previous value?
Why protected? What's the same thing?
I think calling these 3 lines is probably in the wrong place. I think it would be better to use return new CoinmarketcapRateSource(preferredFiatCurrency); instead of the ternary if check.
I would modify this message to be is defined multiple times
Is there a reason why this hardcoded string is a static field instead of a class member?
Not sure we should use R.layout.bookmarks_widget?
consider to consolidate into a single if block as both do the same, unless there is a particular reason.
You should be able to remove these mocks from the test method and just do this: java @Mock private UserSession createMockUserSession(Person person) { return new UserSession( person); } @Mock public UserSession createMockUserSession(Person person) { // the constructor of the userSession to be a param to that method, with the appropriate parameters. } This will allow you to remove one of these mocks.
This can throw if there are no principals. It should probably have an explicit check to throw a proper error message
Could you verify that the folder doesn't exist?
If you're going to make the call to 'notFound', then the.isEmpty() will be more readable.
I guess VOOBSERVER role should be allowed too. Otherwise you're not able to get VO from the REST.
Missing braces.
If this is called before setupToC, then it's better to use the constructor of ToCInteractionFunnel.
Can you change this to assertBuildSummary(view.getBuildsSummary(), false, false, true);?
Optional.ofNullable should be used instead
I would like to see this method more meaningful. Since we're checking for the value and checking the GPUs in the message anyway, I think it wouldn't make sense to check the GPUs as an argument and print a proper message.
set the supplier to new AtomicLong(123)::getAndIncrement
I think this would be better as: if (response.getStatusLine().getStatusCode() >= 400) { return response.get().getStatusCode(); }
This might be clearer if it was extracted to a method with descriptive names. java public static Cipher getCipher(String cipherSuite, String securityProvider) { Cipher cipher = null; if (cipherSuite.equals("NullCipher")) { cipher = new NullCipher(); } else { cipher = Cipher.getInstance(cipherSuite, securityProvider); } } return cipher; }
In order to be consistent, you should convert this to an enum: java public static final Long EXTERNAL_PREFIX = Boolean.TRUE.toString(); and then use the String constructor.
If we're on it's own line, we should return an Optional
fValueTimestamp is derived from fValueTimestamp, should it be considered for hashCode() and equals()?
This can use the parser to generate the floor for the user, otherwise it's going to be useless.
Is this one of the lines in code tree? This should be extracted into a method.
what if currentUser!= null &&!currentUser.getObjectId().equals( userId ) ) should do the trick?
It is really nullable, here you should check if trace is non-null and return it. The method should return either null or null.
What makes sense to me?
So you are changing this if-statement to apply? Are you simplification?
nit: Make this method private?
can be better as motivated
We could just call toInstant().atOffset(oneOffset.UTC) instead of atOffset(oneOffset.UTC)
Add newline before return.
out of curiosity, is this an error condition or should this be handled by the exception in the line below instead?
This won't compile if the String is null, but the method will throw an NPE.
Another point where we put a deprecation to skip the related metrics. ReplicationStatus is doing a fallback which should be a deprecation. We can just do a fallback and not throw an exception if a ReplicationStatus is not Dead.
You could use for the exceptional case, I guess. But I would say that we would need to have a beanResolver from the default definition for the channelResolver.
how come we don't need this check?
let's put this in log.info
move this logic to the cache manager?
is this anonymous class necessary/intentional?
else is unnecessary here, since when previous 'if' is true, we jump out of the method. extract vmNames.size() and removedNetworks.size() to variable so it's not calculated multiple times.
double check that no group has been created
What is the point of this test?
This variable seems not being used
make sure you add the empty line below. Also, okbuckState.getExistingFile() you can make sure that the project element is not there.
We can use CodePointIterator here as well.
How about adding a space before the ==?
This is always true because of the 'instanceof' check at line 67. The reason is that this code is always true to begin with, rather than silently skip it.
this seems like an unnecessary step - let the factory do it for most of the time in the file.
Code style: rename -> layer
The 'else' part could be moved out of the loop.
please remove this lines
I think it would be cleaner to return an empty list instead of throwing an exception. You can add the metadata in the try block.
I guess this could be simplified by: if (activeWorkbenchWindow!= null) { return null; }
Why do you need to use runLater?
In general with these kinds of callback-centric workflows it's pretty dangerous for the way that the callback to be completed to rely on the callback being handled in this kind of manner. (sorry, clicked enter too soon, elaborating)
> /var/tmp
We should probably add PassivationCapable to the PassivationCapable interface and check it here. And TBH I like the idea but the PassivationCapable does not seem optional to me. It may not be created if we moved the addBean() above.
Please use if(boolean.BooleanProperty(Message.HDR_LARGE_COMPRESSED) {... }
Did you check here what happens if you don't pass ldapServers parameter to cmd line? Do you get an empty string, or null?
I know this is not your fault but maybe a logger? Or are we not going to print to console?
Same here, you need to do Arrays.asList().
Good edge case to check!
"cannot" is a little confusing. It is not a very important term here. I suggest something like "cannot create..." instead.
should update currentEvent in the loop?
Shouldn't we avoid the asset keyword? Are we sure that Eclipse is started with the -ea switch?
It is always safer to use the SingleThreadExecutor rather than the executor since it is always created with the timeout.
can't you use constants.empty() here as well?
Hi. @jonestfastiel, Could you please use Java 7 :warning: unaccepts statement with logger.debug()? We don't need this if condition.
We should probably check the error message as well
I would replace this if-else with ternary statements to make it shorter. but that's a matter of style - so just consider it
Not sure we need it here, since we're expecting the toString() method to be static.
It seems that it would be better to leave the exception after the calculation, or just do a log.warn() { } If you do that, it would be good to leave the exception in the log if no message is found.
You can do without else after this.
This seems to be unrelated to the PR
Should this be a debug statement if the time is > %s, or at least put it in a util method?
an Style-nit: I'd prefer having the '{' at the end of the closing brace on line 347.
Is there a benefit of using StringUtils.format() if there are no args to be formatted?
Prefer a StringBuilder here: StringBuilder output = new StringBuilder(format("-", new Long(timestamp)).append(String.format(UTF_8));
I don't think this is correct. If cache == null it returns false because this method must be called before init. So it returns true.
Unused constant.
Can be changed to: if (PROXY_USERS == null) { return; }
can the consumer get the partition key as well?
Could we keep this on one line?
Less error prone to break.
Instead of adding size to array, and then adding after the for loop, you could do something like: for (Object connection : connection.getRemotingService().getConnections()) {... }
Does it really need to be in a separate thread? If it has error, it should be its own exception.
there is a function in DiskReformatter that you can move here maybe. /** * Deletes {@code location} * @param location the location to delete * @throws IOException if there are any problems deleting {@code location}. */ private void safeDelete(Path path) throws IOException { if ( Files.notExists( path ) ) { throw new IllegalArgumentException(); } } Would this implementation do the same thing?
@tmjee It's better to create all instances ant then reuse them
For a map, the variable name _param_ is not a list, it is a list, not a list.
This will change to use the new State version
since we're already doing this logic in writeToFileWriter() - it looks again a bit strange to me. Could you pull the logic into a separate method?
Shouldnt we return VDSReturnValue itself here? If some exception, succedded flag is set to false, else getReturnValue would have the task's start status.
Should we use an [try-with-resources](<LINK_0> instead?
suggestion awaitBusy(() -> elasticsearchClient.search(getCrawlerName(), fs, endCrawlerDefinition(getCrawlerName()), null);
Please, move this functionality to the renderMain method (Or rename the render method) to create a new method In general, this is where the *not* used.
Can we use constant as well?
add the check to finally? Otherwise IP stream may be corrupted if cf.deleteOnExit.
Configurable timeout in upper case TiagConfig
without **a** 'MessageHandler'.
Why is this change necessary?
Maybe add a syncExec(monitor) method to notify the state system side?
You added a parameter but this command is also used from other places, so this check can be removed.
Shouldn't use t=0. Anyways, I believe all new attributes are already initialized to null.
This method is only called if added.isEmpty(). So the change is missing to send a change with a new reviewer that does this.
This variable can be written more simply using a local variable.
I'd rather use StringUtils.equals()
I don't understand the side effect by checking the case when there is a null, it'd be safer to collapse these conditionals into 1 line. Also, you can use.orElse(myDeclaration.getSuperTypeDeclaration().getName()) instead of Optional.findFirst() to keep this line confusing.
May be we can rename DvNonEmployeeTravel to DvNonEmployeeTravel().
Let's wrap the whole method with RangedClientPartition(boolean refresh)
I was thinking if is there any chance of an error causing this property to remain available, or is there something we can do to TopicCreationException be thrown?
do we need one System.out.println?
Might want to use serializables.transform() here instead of filtering out the name
This method should be private.
Catchs for much more errors, maybe something like CharArrayUtils.fromValue(fValue)?
Only return true
I would prefer to do a toString() here instead of just the name
why is it called HelixAdmin#getInstancesInCluster?
extract method
rename this to shouldProject, it's not only project
Strangely enough, this method returns null and throws an exception, returning null is not useful. We should probably throw an exception or log a warning when opening the trace
What about this instead? <LINK_0>
should this test as atomic? The advantage of explicit time sleeping is not a good practice for the test only
We talked about the version handling here. Not sure if we should switch from VersionInfo to VersionInfo.VersionKeys.MINOR to VersionInfo.VersionKeys.COMPILER to use it.
Please add check for null here.
Even this is not necessary. This is not really hiding anything.
I don't think we should expose the exceptions for the first one, there is no need for having them. All the exceptions are here, and we should not fond of them.
this is a bit strange, can you not pass CommCareApplication._().getTempFilePath() to the CommCareApplication and call it here.
@bxf12315 in back to _user_, filter_and_ password
Standby task should never be in REST -- see the implementation of close() that did not try to close the Standby task.
Can you put the mappers in the get( "/forms/result") before the get( "/forms/sharing", (req, res) -> util.getMetacardsByFilter(QUERY_TEMPLATE_TAG)
Shouldn't this be if (model.getSubTypes()!= null &&!model.getSubTypes().isEmpty()) { to avoid creating a new array to add the first element.
Why not rename to 'this.'?
Move the throws up to the first line.
A lot more vals please
Nit: use body instead of body.
this will remain the same?
@tsurdilo You can use here rather assertNull(processInstance).getProcessInstance(CONTAINER_ALIAS, differentReleaseId101)
There is no need to prefix + here as the string is not required.
style nit: we don't use curly braces around single line blocks
This is impossible, blockLength is an int.
Why did you add this parameter? It always has the exact same value as the other. So maybe just drop it?
Suggest to throw at most the exceptions.
it is better not to cast result to Collection... why not cast it?
Is this equivalent to org.ovirt.engine.core.common.businessentities.OsType#Other.ordinal()?
Does this work when the token is not created yet? Or is the other way around?
suggestion mounted.setShotsLeft(0);
There's no locking on this? Also, isn't this the functionality you wanted in the Facade layer?
I have to move this into line 206; to keep the code style consistent
@Override is missing.
At this point we don't log the stack trace each time we get a "Sonar way" dump. The log level should be the first time to get a "Sonar way" log level.
Formatting
Why calling a static method to create ConversationFragment and a static method? I much prefer readability.
... actually it looks like you're doing the right thing here. Can you update the logging message to reflect it?
You really don't need to pass this into the cacheService. You can create a new method that builds the message and then set it from the cacheService.
Similarly here, we're still using the value and not the condition.
The list may be bigger than the size of the list. Just Comparator.comparing(ProjectData::getName).reversed().thenComparing(c -> c.isOwner()).collect(Collectors.toList());
Don't we need to make the DataFileWriter instance instance? In general, I'd suggest to use a factory method for creating the DataFileWriter instance.
make this final I think
use!= null to pass null to the config constructor
A worth the use of the for each loop, could be expressed as a single the answers with each one.
Should we just throw the exception?
missing space after if
We don't need this to be a lambda, the method below can be simplified by just doing a lambda with a lambda.
There is also a code duplication here. Shall we move these 2 lines into the sendMessage?
I don't think there is any reason to use _translatable_ as the key?
Perhaps it would be better to add a checkType method for FieldPartitioners that you can use to represent the partitioner in one place.
suggestion List<SnapshotInfo> infos = snapshotDao.listByVolumeId(volumeId);
Should be a throw here.
Let's make sure the key for the Content-Type is implemented and you will have your new entry here instead of just the key.
I wonder if we should check that the payload is actually a byte array, and it is necessarily a string. If it is, we should use the same payload, than the whole payload, otherwise we lose data which is probably not what we want.
These strings can be extracted as constants.
This seems like a mismatch, since you are not using _raw_ String_ here.
:+1: Can you add braces here?
Consider including the password (and UUID) in the test?
Why you need to cache the projectStateFactory here? ReviewDb.open() already returns the ProjectState, and inheritedRights() can be null.
the key set will be modified in #get(), it is expected that we have to create a new bookies set from the collection, and it is already added in quarantinedBookies's key. it is confusing to me. A map may be used here, is there any reason to use quarantinedBookies's key?
I'm wondering if any code be moved outside this try block to clarify what can throw an IOException and what can't.
Shall we use something like here?
@hanm can you please invert this and remove this change? we've already breaking changes in master in master.
Please use a meaningful name for the action name.
Is this thread safe? If not, how about a simple shutdown of the service?
use StringUtils.isNotEmpty
Suggest you use ternary operator: if ((bucketName = amazonS3URI.getURI().getScheme()) == null) {
I think we should delegate to this to be sure that the stream is closed.
Please extract the map to a ViewerFilter object.
Use LocalTime created in tests
Does this mean an empty string in the select query?
This condition should be read from the model file, not the other one. Where do you come from the model file?
no need to log at info level, I would return it as it's fine to make it work.
The idea behind this synchronized is that these methods should only be called at the end of the class, not during configuration update.
After trying it, we would prefer that the state color could be drawn with two lines. The reason is that when the'stateColor' does not come from the SWT window, a new window will appear. We had a point to draw all the state color which would be drawn with the window limits, to make sure we see the state color. We could draw the line which does the fill for the state color which would be drawn with the window limits.
that's not the same as before. You could do this inside createTimer.
To conform with our team standard, would you please prefix the variable with this.?
Instead of using a specific query string, do we need the [Converter](<LINK_0> here and in other classes?
can the name be more specific?
nit: move this to just after loadDeprecatedGlobalHttpProxy()
It's actually a pretty abstract class, so at least the class level is not enforced, but even if it's explicitly set (or because user could override the default) then it's effectively a normal user behavior.
Extract the building of the ResponseMessage to it's own variable (in eclipse, select the text, right-click > refactor > extract local variable / select code + shift+alt+L). This will make the code a bit more readable, especially when you'll be passing in other things besides the ResponseMessage.
looks like this method could be called if you remove the service and replace service
Missing auth check (C:\n)
This could be done simpler if you used logEntries(logEntry -> (OnlineLogRecord) logEntry)
Please catch RuntimeException instead of using System.err.
We cannot assume all fields. If you look at the original code, DSpaceObject is the thing being indexed. This is because Communities and Collections are *also* indexed in Discovery (so that you can search on their names/descriptions).
I don't think this is necessary and the refactor should already be part of the try block block
explain this
May be extract the NewDataSourceEvent constructor to a separate method and reuse it here, instead of having the duplicated code?
getTenantDomain
String.format
I am not sure where this can return null, but you could just return null
This will need to be revisited to throw proper exceptions.
We should use a cache map here to avoid multiple threads calling it. It would also be a good idea to change the return value from get() to a single value.
static import
use a format
I think this doesn't exist in your case, but under a network request, we should still be able to create this exception since this is thrown in such case.
should this be extending the base class instead of extending BaseDAO?
This convert is unnecessary in this method. You could just call getClusterByServiceList()
You need to use server.getPermanents().contains("Sliver") to check that the element is not contained in the list.
Why not use Preconditions.checkNotNull?
I don't think you need to have the test data.feedbackQuestions.for that there is a param.
If this is for the log message, it should be added to the error message
Minor: maybe extract the test number into a constant, since it is referenced a few times in this class
when we set the calculator to the GoalDownload object, we don't need to have it. Just the other thing that looks like calculator is fine and it's not used anymore.
It is already public. Did you intend to use assert here?
If you want to clear this list, please pass it to @Before rather than a setter.
The above change is not needed.
I think.reset() returns a value in the header line, so you'd want to check <.125 instead.
Instead of skipping it here, we should throw an exception if it is interrupted so that all caller is either interrupted or not.
Why are you catching and ignoring?
If you are extending this to null, you will end up with a null pointer exception in the other places which it will cause the Exception to be thrown.
Was this line come from a typo?
You can use org.apache.commons.lang3.StringUtils#isBlank here
When testing, I got an NPE when studentProfile is null. This needs a non-null check. Also needs a test to prevent that from happening again.
Was there a particular reason to add the braces around the new code?
Please use any(State.LEADER) rather than never()).askAndProcessSnapshotOnDemand
This is a remnant of the original body.
Why do we need to check the vertex of the hash code?
should not this be removed
I think the try/catch block is intended, can you add the exception's try { } finally { connection =!success; }
IMO, only the classes that are thrown can be replaced with private static final modifier.
I think this line is not needed because we have the plugin java convention in the ui-web.xml
Maybe it's worth extracting a method like getMessage()?
@ivange94 sorry my bad :) can you take a look at my head?
Now you have a separate thread pool of time to create this lock. This is needed?
This should be 1PC
Should it be the type parameter?
final
I don't see why we need this?
latch
Why does this need to be public?
Add a fail() after this line, so that the target is actually the same as the new GithubProfileScraper.scrapeGithub(profile,res);.
Should this be a Set? If not, then add a isEmpty check.
This is Presto code base I think this should return Optional.ofNullable(opEmitter.isPresent()).orElse(int) If there is no output for the expression, please rename to more meaningful return type
How about using String.valueOf(size.split("x")? We do not have a usecase in long time.
:notebook: [System.out.format](<LINK_0> may be able to help here
It is possible to get rid of this variable, since you're already using it again.
can you change this to: if (new PeerConnectionClient.PeerConnectionParameters( videoEnabled, permission)!= PackageManager.PERMISSION_GRANTED) { // create PeerConnectionFactory(); }
Should this be duplicated with the one below?
@ FieldInfo4j would solve the problem that new ArrayList<>(2) will be created with the same size. I would recommend to use computeIfAbsent().
This getFrom method should take a modifier to determine the file name and parameter. The deceleration of getFrom() should be improved. For this case it would read a method of the getFrom method.
Is it possible to check empty strings?
WordsEnvironment.getObject() should throw this error if the object isn't found.
@exception
Check if the second argument is null, otherwise return.
Rename to getMostRecent
You can use symbol.isSubtypeOf(symbol) here, no need to cast it to a ClassTree.
It would be nice to use the constant values defined in the FixedCouponBondTrade.
What's the purpose of this test?
This is already done by the Log_OC.d(TAG,...) line above, so it's better to remove the extra space.
You should always close the old resource.
I'm not a lover of synchronized! Can we make a race condition?
@manstis Any way to get this code?
Why does this need to be null?
This change does not seem necessary for this PR. I would like to know why this line was changed.
This should say resource.openStream()
side question, but do we really need to check for cluster level?
Could you remove AudioManager.SOUND_DIR and use AudioManager.SOUND_DIR here?
I think this is too much generic. If the pattern ends with a.*\\.java" doesn't exist, please check and make sure there are no error messages.
Maybe you should move the network check to the removedNetworks() method and use it here and in removeNetworkFromVds() to prevent possible NPE.
This seems like it should be a generic log message in the Exception.
I might be out of scope, but it should be internationalized. You can remove it
java.orElseThrow(() -> new UnableToCreateStatementException( String.format("No argument factory registered for type [%s] for element [%s] on [%s]", tv.type, name, object), ctx));
I think these variable names should be changed to be the same as the field names now.
this looks like it's not meant to be a public API, it should be a private method and let the API instantiate the object directly.
The key should be testGetVariantsByRegionHelper.
This check is not necessary, the method is simply retried at the end of the visitNewClass.
You probably want a different way of doing this, although less important since we can see all the paths
WorkflowRuntimeParameters.getOnlyElement() is a bit better than using.filter() method.
In theory, this is not the JMSCorrelationID. The JmsMessageReader generates a new CorrelationID if none is received via JMS. So it is more the Scout Correlation ID.
Should we just check if the dataname is in the database and keep the migration with it?
setMembers(new User()) is unnecessary.
Is this actually needed?
Why do you need this check?
Missing space after (
I know this is not part of those PR, but to give it to these filed should be a constant. something like "canNotInject"?
This is not right - we need to tell the receiving side that the transport did a byte array with a name like: byte[] bytesToWrite = new String(byte[])
botForce.getCamoCategory() can be null
This is not needed. There is a default value, you have done it only in case of Tuple.
to avoid duplicated code i guess, it can be extracted to method, e.g. : java return ImmutableSet.of(NUMBER_OF_NON_NULL_VALUES, MIN, MAX, NUMBER_OF_DISTINCT_VALUES);
Can we make this method private?
that code looks funny. Is the code not expected or not? Seems like a fail() should either be in the normal or exception flow path, no?
Can we use standard sanitizedName instead of sanitizeedName?
I think this is okay, but it looks like we are still dealing with collection's keys. Just one thing, is it?
if you're getting the wrong row, should we check that the schema contains the expected row key too?
Need to change the name to trustStore.
Can we avoid using the old api here?
Q: We have statefulTasksToRankedCandidates as a class-level static final, and we assign the tasksToRankedCandidates to the constructor of the class. We could just create a TreeSet, with the following two parameters: java private static final Map<TaskId, Integer> statefulTasks = new TreeSet<>(); clientsToCaughtUpClients.forEach(client -> tasksToCaughtUpClients.add(client));
If there is another test case for this line than it is used.
suggestion ServiceReference -> methodHandler.getMethod(serviceMethod, methodHandler.ServiceInterface() );
This makes no sense, and is where I think the only available this event is in the EAP_CODE_SUCCESS. I think you only have to check here for the error case and throw an exception if the decodeResult is null, and these other exceptions should be wrapped in a runtime exception with a descriptive message.
Since you're only going to be changing here, consider moving the elevator initialization to an info instead of Booleanstick1.
remove first argument
You could use org.kie.workbench.common.stunner.core.util.StringUtils.nonEmpty(..) (but how was you to know!?!)
Please check with isEmpty()
If line is "" then you can just do.findFirst() and avoid the if/else block.
Can this be done in JobDAG instead of here?
Variable name should be unused
InfraVariables is not set but also persistInfraVariables. So why do we need to set it here?
is there a reason why we need to use null?
unused
I think we should use the.toArray() /.toArray() here.
v1? Not v1beta1
Explain - why is this SPARK_HOME?
We need a more complex logic in this method or someth (or something) to extract to a separate method given these two lines: Properties existingStepProperties = this.stepProperties.get(stepName); if (stepProperties.containsKey(stepName) {... } stepProperties.putAll(propertiesEntry.getValue());
this validation should be in the commcare controller, not the service integration
Do we need this check?
Should be fine in this case.
I think you should also save the condition groups separately, if you invalidate a new rule, then you can do the same trick as in line 76
Why not just add the prefab to the CoreRegistry?
I'd return "false" here, stating "c://File.createTempFile("c://file", ".tmp")
getCount() - 1?
((Server)server).setModuleState(temp, state) is called twice in this loop
I don't think we need this variable at all, since we're not using it.
Do we have tests for this?
Subjective Exception to be thrown, we should be more specific here, e.g., "Failed to execute request (interrupted..." ).
Can we add a log.error() here?
If we go to the cqlParser class, we could use this class to annotate this class with @Context.
please move this sibling.findFirstToken(TokenTypes.IDENT).getText(); before the for loop.
do you get the redundant newline thing now?
for readability I think we should have one here.
Does this have to be public?
Use a new method in InputPortInfo constructor.
This looks a little confusing - it should extend privileges at all
Why do you use java.util.Arrays.asList()?
Can't we rename to suffixValue or something like that?
Consistently use variables, all names that are not used _after_ the variable. This is the same as the one in copyPositions(positions, offset, length), but it's being used twice.
Sorry, please remove this error.
why not put image?
can you put this to a private method, preferably in the module config file
Maybe I'm being daft, but where are the CDA message being added?
You should rather use.isEmpty().
Shouldn't it be template.
call getView(event).refresh();
Nit: make it more descriptive.
So the logic here is in getService() and this method is supposed to be in the public api? Please createService() and remove the private APIs to be consistent with each other.
why to start sence for non operational VMs?
Would it be better to just do an exception if the job is not found and trigger the jobs with a job type?
I think you need to do the null check on the CorrelationAttributeInstance's constructor.
I don't think using getters for this class is is the recommended pattern.
why is it required to check the return value of refreshVdsRunTimeInfo()? see also in vdsEventListener().vdsUpEvent(), it will be always null.
s/isSeparator/isSeparator?
This is unnecessarily slow when change!= null and we know the branch name from the change object.
This is a pattern where this should be used, this should be in the for loop.
Only thing I think we should be more general: if (patientBundle!= null &&!patientBundle.isBuilding(), true)) { Something like java } else { patientBundle = getIntent().get(); }
There should be a null check on this.
This is suspicious. It should be requestProcessingTime - requestStart + response.getStatusCode(), response.getBytesRead(), requestProcessingTime, responseProcessingTime
Again, the indentation is wrong here.
If we want to fail the app, we should also log something and continue. We should only log the isActive state and not for that case.
Also, shouldn't this be synchronized?
Predicates.instanceOf(MongoDBRouter.class)
I think we should only reset the task if the user selected something.
I think that textBytes[fieldId] is also valid in the input schema.
so we're not using the Java 8 output here?
Lot
Type is not available, please use context.getOperatorContext().findClass(Class) instead.
I wonder if we should create a map of configs for this instead of reading the properties. E.g. for example FileDescriptorSource fileDescriptorSource = parseAndResolve(FileDescriptorSource.class); And then here FileDescriptor fileDescriptorSource = fileDescriptorSource.getFileDescriptorSource().
The created method is called copy but the DirectoryList only contains the values from Directory, so maybe we can just do: Files.createDirectories(destination).toPath().resolve(destinationPath)
I don't want to fail to display this error
I think you should also mention the username in the error.
is this null check necessary?
Formatting.
:ant: If we use Timeone.setDefault(DateTimeone.UTC) instead of setting it to one value, I think we should create a private method to onedDateTime.setDefault(Timeone.getTimeone("UTC") to support the system time zone.
nit: any reason this change is needed?
Please use Factory.getCRUDControllers()
You should use the org.elasticsearch.client.Person instead of an Exception, because Refactor doesn't support SUBTYPE_USER_AGENT method invocations.
nit: you can get rid of the double / 1_000_000 code, right?
This one should also assert that the.size() == 1 because of the one above.
I don't think the atLeastOneIndexUsed should be used here. If the query does not contain a text, it would be better to have something like SELECT _id FROM \"%s\"", tableName) instead.
Please rename to *this* method or *this* method.
catch (CliInitializationException | IOException e) { throw new IllegalStateException("Unable to connect to controller.", e); }
Are we assuming that if oVirt is installed and managing the cluster, scheduling will be done from oVirt? I think we should disable the CLI scheduler only if there's an existing schedule setup from oVirt. How would we handle the case of multiple schedules on a volume, if a customer wants it. Currently that can be done through CLI. Meta-volume could exist because of geo-rep use case too.
Sorry, I didn't yet look into it. Could you explain it, and why is this code kept?
I don't follow this logic. If the array is empty then this method returns an empty array? And if the array is empty then the content is as an empty array?
It seems that this could be useful.log.tracef
I don't think you need to return the result here. You can just check for "removingType" in this case.
true -> false?
If you are trying to remove this loop in I think its worth also making a mistake in the future. Maybe we should have a single routine that can do the work that way.
Can you please use StringUtils.isNotBlank(configStr) instead?
This should be on the next line.
double check that the group is still here
I'm not sure if this is good or not, but would it be better to just use something like this? SecureRandom.getInstance("SHA1PRNG");
Would it be possible to stop this at the beginning of the performStart? That is more sad, I think.
should be 'task'with its description here
It would be useful to add a second check if is enabled, in debug mode.
can we make resourceName for all the states be same e.g. "state" instead of being specific as that requires the conditional and hardcoding of URLs? I'm not sure if we need to give each one a different name.
1) When would 'IStatus.ERROR' be used? 2) Why drop the exeption message and use the message?
I don't think we should remove the Log.e when the user clicks on the marker it's unclear what the user is trying to do. Shouldn't the check for null and!null be the check?
I'd recommend using.orElseGet(() -> LOG_CHUNK_SIE); since the parameter is in the logAndReplaceRequest method - it doesn't seem to matter.
Since this is public API, we should have the annotations on the classpath as well.
These 3 lines could be moved into a method and reused.
Should we add a warning log here?
Should this pass the type to the constructor?
Should be meanSingularData.
Need to declare them before declaration.
If we're doing this, then we should use the self constructor rather than the actual value.
This operation is duplicated in the conditions above. Is it possible to pull the method logic out into its own function?
Format the whole code (ctrl + alt + L)
We should probably update this to use the newer convenience method getHostPath()
why not log details of the type + message instead of the exception?
@adrielparedes this line is redundant right? because we've checked the watcher being registered even if it is not registered again to the bottom. So why do we need this check? Also, why not--private?
suggestion logger.error("Device with MAC: " + macAddress + " not found/discovered.");
this.
Shouldn't this always create a table? If the user changes the location it's an existing one, then that will be missing.
lets add a short blurb in the field description and in the.md doc file describing that records with a missing field get filtered out.
nit: I think the declaration of the credential variable could be moved to its declaration, as it helps with the same results.
Where are we setting the cmVersion to CMRepositoryVersionUtil#isVersionNewerOrEqualToLimitedURL?
why is this useful?
you put the newThread interrupt in the wrong spot. You want a catch (InterruptedException ie) here just above the catch (Exception e). In that new catch clause is where you call newThread.start(). That interrupt will (potentially) interrupt the sleep and when interrupting the sleep, you just simply "return". You want to tell the inner thread to stop doing what its doing - and you do taht by catching the interrupt and just returning.
this method could be declared private
Java style: prefer to break at higher semantic level.
could be inlined here.
Probably you could foresee what you do here, but for more examples of the EVENT_BUS call below, since it uses the old method to return Events for the given argument.
should return an empty list and put an error message in the else case
variable not needed
To make it clear what the grid is. If we have a crash with some reasonable initial number of times rather than an equal number of times.
You can get rid of this particular block by simply doing: java if (buf == ref && bs < wantSize) bs = (bs <= 0) bs =;
When is the first parameter to be null? Java classes should never be null.
This should be done from whitin the locked block, after we've received the sigal from "notResolving". Otherwise a new thread might come here and dispose of the old one's pools. Likewise for all calls to "notResolving"
you can simplified the if/else with the one below
Was it possible to have a single method that does the logic and returns a null here?
You can use Objects.requireNonNull(omap, "ocID == omap.getoc")
Do we need this check here, or is the actor#hasPermission just used?
I think it would be worth making this error a bit more useful. At least adding the node number so that if errors pop up in the log then someone can see if a particular device is generating lots of errors.
use Objects.equals()
We can't use warn level log here. Throw an exception if the level is too low.
It seems safer to use a lambda here
null == adapter
I think this is a good idea. This could potentially be a problem if someone didn't reach the query.
you aren't testing the null case? also, what about the following case? Assert.assertEquals("myUser", user.getUserName(), ", myDomain);
doc
I think this should be private. It shouldn't be public.
not sure about this one. Will the end result be false even if we are not going to add any value?
If we are going to throw Unused tasks, should we just return the unused tasks we are either on?
Why we're hiding the error?
And all of these tests can be moved to separate tests.
verifyExceptionMatch() blocks on future.getException(), so isDone() will always be true when you're here, no? Also, if the callback was received, then we should ensure that future.getBlobInfoCallback() returns Future<BlobInfo> and if the callback was received, then we should not call verifyExceptionMatch() in this method.
Could be simplified as java if (authentication == null || authentication instanceof AnonymousAuthenticationToken) { return ACL.SYSTEM; }
Is this change related to updating the PR?
please remove the try/catch, you are catching it in public methods
I would rather make this as a lambda for performance reasons. I'm not sure there's a reason to check the fences, but I don't think we really need to map around around sblock.
s/lease already exists/storage domain/
I thought there was an issue with unboxing the value from expectedMetrics.get(metric.name()). I think it would be cleaner to do: Long value = expectedMetrics.get(metric.name()); if (value!= null) { long expectedValue = value.longValue();...
This should be in the WordPressDB there. So, this method will return false if a link is added to the "Plans that are not part of the current plan. This is why we need to add a link in WordPressDB which tells the user that this option is not added to the plan.
I would change the file name to account for all the 'first' password.
I would return Collections.emptyList() instead of letting the caller handle and continue.
This case is not covered in other places.
The WARNING log shows very high level. Why not just do this.addEventHandler(new DefaultStatement(block));?
There's technically a race condition here, I think this function needs to be synchronized, and set the function inside rapidParseInt()
do we want this to continue even if the service is undeployed?
there is a simple loop here that returns the size of the tree. Use this method
what about : import static com.caelum.vrelum.http.Parameter;
Replace it with locationRequests = helper.logAuditEvent(AuditEvent.Buddy_STORAGE_ENABLED, Buddy_STORAGE_CHECKS);
need to be 'final'
You should have done it right when writing this for the first time
You should use Utils.getTemporalPath here instead of Places.
should be final
susceptible to various XXE injections by the looks of it...
I think it's better to let this exception bubble up and declare it in throws of the method. this is how all other methods in the library work
As I said, I think this is a very wrong way to do this. The constructor doesn't require a parameter to the TargetSummaryBean instance (as the default constructor), but this way you can make sure the parameter is the same. The current way you provide the default value, you should use it here.
You should check if the workflow is removed, otherwise the workflow is not being removed.
I thought we were having a file and one in the file system?
I don't think this is the right check if it is not found within the module, but from another perspective this is the check for missing catalogedBys.
This will create the same object every time the constructor is called. There's no need to create this object at all.
We appear to be re-implementing some of querying logic to find the metadata. Instead, leverage the existing APIs in DataConsumer.
TerminalConnector doesn't have to be created for the workspace, but here you should use brackets to check for the workspace word
Could you please change this to use a constant in AherlockAttributes class? So you can use it here.
why not using the iterator?
Do the casting at the right place for the "model" being null here.
The rest of this method used the ctl.getRefName() inline where it needs it. I proposed to remove this variable and use ctl.getRefName() to match the style in the rest of this method.
Remove the hard coded string
This is not the right way to set the number of results to zero. It would be better to have a test for that.
Can you invert this condition and make the flow more readable?
Remove CoinexchangeRateSource.
why do you need this?
@sebing please put spaces around :
Be more specific about the input stream - close the stream - close the stream - close the stream - close the stream
I'm not sure this is a good idea. In this case the exception is not handled properly, since we are expecting that the test is actually executed. So why do we need to wait for the completion of the request?
suggestion assertThat(ldapUserDetails.getDn()).isEqualTo("uid=base64encoded-issue-1840,ou=Users,dc=carlspring,dc=com"); assertThat(ldapUserDetails.getUsername()).isEqualTo("{MD5}5f4dcc3b5aa765d61d8327deb882cf99"); assertThat(passwordEncoder.matches("password", ldapUserDetails.getPassword())).isEqualTo(true); assertThat(((List<SimpleGrantedAuthority>) ldapUser.getAuthorities())).contains(new SimpleGrantedAuthority(SystemRole.REPOSITORY_MANAGER.name()), new SimpleGrantedAuthority("USER_ROLE"));
This construct is weird: description <LINK_0> > Could you check if it would be window to return if the output schema is not connected to a given window? I think it would be reasonable to provide the existing output record to the output record.
<LINK_0> This is only true when add() is successful. Instead get a PK-ID key, i think, checking.
This is good and all, but in the chromeos_system_trace.xml the trace elements are non-system by default. You have to introduce a new method and a call that is non-runtime by setTraceType(traceElement) instead.
Why is this necessary?
These changes shouldn't be avoided.
Is this logic correct? I would expect files to be deleted either.
Can we use try-with-resources here like you did in the assignment?
I think a short circuit exit at the top of the method and try to get rid of this check. Possibly put a.get(dimensionId) check into a method and use that here.
style nit: no braces around single line blocks
Is not necessary? Wasn't checking for a single question member (like check)
This method should be invoked before updating the files in the new one.
copy
Generics?
This should be done only once in the UI, otherwise there is a bug where the dialog is not available.
This could be protected.
This method is used by two places, so it does not really matter.
For each test case, it should be a nicer way to do it using a list instead of a concrete List.
wrap this line (and above)
if (StringUtils.isBlank(proxyHostStatus.getHost())) { this.mount =...; } else if (windowsMode.toUpperCase(FS_TYPE_NAME)) { // TODO how to open a mount with the exist without mountPath = null; } and is better, to handle it gracefully?
Can we make this a method as well?
I strongly prefer inverting these kinds of tests so that they bail early, instead of wrapping the entire method. E.g.: if (!mHelperItemList.contains(isExpanded() && mHelperItemList.remove(i)) { return; } It's a little thing, but getting rid of one level of nesting reduces conditional context for the reader.
Please import DiskImage
This block looks the same as in the other constructor. Should it be DRYed out? I probably wrote this block,but I admit I am having trouble recalling why KeyName was chosen to be used to form the KeyName.
Curious why this is not android specific?
Use a logger here.
TypedId was created for this type of TypedId, not an TypedId. Is this change necessary?
What happens with withButtons?
Should this be done with an exception or retry future?
I would really hope that we would have constants, too.
Assertion failed: <LINK_0>
Remove this variable
set the charset to UTF8
I'm always a bit suspicious about using method calls with ternary operator, since Java will invoke the method even if the precondition equals to false
Not sure if using title change is a good idea to introduce. 'example.com' is not included in the test.
inline tEntry
Instead of a while loop, what is the point of setting up the index index?
the exception is logged and not logged.
You could avoid the ternary operator here: DatastreamPids originalDs = metadata.getDatastreamObject(ORIGINAL_FILE.getId());
The other test does not have this delay; why is it needed here?
You should be able to call onGetVisitTypeResponse(response.body()) and not onGetVisitTypeResponse().
Is there no reason to set the status for the spolite way?
This could be rewritten with something like callExpression.arguments().arguments().arguments().length
I think it would be better to create a second method where the store is the default, so that we know the type of the element we receive (ie. type of "no element")
Nit: why not use the constant in FocusTopology instead?
Please go with FQN here as well
This will always be true when the fragment is launched, Since it is not in the app lifecycle, it could be dropped afterwards.
Should we also validate that the table name is a non-empty table?
this seems like a big change.
Instead of doing this, you can get the request method once and again just pass it to the HttpRequestHelper.printRequestParameters()
This should be warn, not info.
I'd suggest using a.onAddress(Protocol.HTTP_1_1.recv) to avoid the need to create a variable for the class
This catch-block should be removed
Should be final.
It would be more readable if you used StringBuilder instead of StringBuffer. What about using com.google.common.collect.Ps#UTF8 instead?
Same as above for these objects.
Please invert the condition and put the line 77 inside the if block.
Not sure what this is for. Is it possible to get a result of the service, and instead use it as a boolean value?
